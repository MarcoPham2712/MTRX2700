
Serialpart1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000021c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003b0  080003b0  00002048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003b0  080003b0  00002048  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080003b0  080003b0  00002048  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080003b0  080003b0  00002048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003b0  080003b0  000013b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003b4  080003b4  000013b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000048  20000000  080003b8  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002048  2**0
                  CONTENTS
 10 .bss          0000001c  20000048  20000048  00002048  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000064  20000064  00002048  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY
 13 .debug_line   00000147  00000000  00000000  00002078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000081  00000000  00000000  000021bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000055  00000000  00000000  00002240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  00002295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  000022d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000092  00000000  00000000  00002318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  000023aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  000023c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000048 	.word	0x20000048
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000398 	.word	0x08000398

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000004c 	.word	0x2000004c
 80001d0:	08000398 	.word	0x08000398

080001d4 <enable_peripheral_clocks>:

@ function to enable the clocks for the peripherals we could be using (A, B, C, D and E)
enable_peripheral_clocks:

	@ load the address of the RCC address boundary (for enabling the IO clock)
	LDR R0, =RCC
 80001d4:	4843      	ldr	r0, [pc, #268]	@ (80002e4 <delay_inner+0xa>)

	@ enable all of the GPIO peripherals in AHBENR
	LDR R1, [R0, #AHBENR]
 80001d6:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOE_ENABLE | 1 << GPIOD_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOB_ENABLE | 1 << GPIOA_ENABLE  @ enable GPIO
 80001d8:	f441 1178 	orr.w	r1, r1, #4063232	@ 0x3e0000
	STR R1, [R0, #AHBENR]
 80001dc:	6141      	str	r1, [r0, #20]

	BX LR @ return
 80001de:	4770      	bx	lr

080001e0 <enable_uart>:
enable_uart:

	@make a note about the different ways that we set specific bits in this configuration section

	@ select which UART you want to enable
	LDR R0, =GPIOC
 80001e0:	4841      	ldr	r0, [pc, #260]	@ (80002e8 <delay_inner+0xe>)

	@ set the alternate function for the UART pins (what ever you have selected)
	LDR R1, =0x77
 80001e2:	f04f 0177 	mov.w	r1, #119	@ 0x77
	STRB R1, [R0, AFRL + 2]
 80001e6:	f880 1022 	strb.w	r1, [r0, #34]	@ 0x22


	@ modify the mode of the GPIO pins you want to use to enable 'alternate function mode'
	LDR R1, [R0, GPIO_MODER]
 80001ea:	6801      	ldr	r1, [r0, #0]
	ORR R1, 0xA00 @ Mask for pins to change to 'alternate function mode'
 80001ec:	f441 6120 	orr.w	r1, r1, #2560	@ 0xa00
	STR R1, [R0, GPIO_MODER]
 80001f0:	6001      	str	r1, [r0, #0]

	@ modify the speed of the GPIO pins you want to use to enable 'high speed'
	LDR R1, [R0, GPIO_OSPEEDR]
 80001f2:	6881      	ldr	r1, [r0, #8]
	ORR R1, 0xF00 @ Mask for pins to be set as high speed
 80001f4:	f441 6170 	orr.w	r1, r1, #3840	@ 0xf00
	STR R1, [R0, GPIO_OSPEEDR]
 80001f8:	6081      	str	r1, [r0, #8]

	@ Set the enable bit for the specific UART you want to use
	@ Note: this might be in APB1ENR or APB2ENR
	@ you can find this out by looking in the datasheet
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 80001fa:	483a      	ldr	r0, [pc, #232]	@ (80002e4 <delay_inner+0xa>)
	LDR R1, [R0, #APB2ENR] @ load the original value from the enable register
 80001fc:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << UART_EN  @ apply the bit mask to the previous values of the enable the UART
 80001fe:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
	STR R1, [R0, #APB2ENR] @ store the modified enable register values back to RCC
 8000202:	6181      	str	r1, [r0, #24]

	@ this is the baud rate
	MOV R1, #0x46 @ from our earlier calculations (for 8MHz), store this in register R1
 8000204:	f04f 0146 	mov.w	r1, #70	@ 0x46
	LDR R0, =UART @ the base address for the register to turn clocks on/off
 8000208:	4838      	ldr	r0, [pc, #224]	@ (80002ec <delay_inner+0x12>)
	STRH R1, [R0, #USART_BRR] @ store this value directly in the first half word (16 bits) of
 800020a:	8181      	strh	r1, [r0, #12]
							  	 @ the baud rate register

	@ we want to set a few things here, lets define their bit positions to make it more readable
	LDR R0, =UART @ the base address for the register to set up the specified UART
 800020c:	4837      	ldr	r0, [pc, #220]	@ (80002ec <delay_inner+0x12>)
	LDR R1, [R0, #USART_CR1] @ load the original value from the enable register
 800020e:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE @ make a bit mask with a '1' for the bits to enable,
 8000210:	f041 010d 	orr.w	r1, r1, #13
													   @ apply the bit mask to the previous values of the enable register

	STR R1, [R0, #USART_CR1] @ store the modified enable register values back to RCC
 8000214:	6001      	str	r1, [r0, #0]

	BX LR @ return
 8000216:	4770      	bx	lr

08000218 <change_clock_speed>:

@ set the PLL (clocks are described in page 125 of the large manual)
change_clock_speed:
@ step 1, set clock to HSE (the external clock)
	@ enable HSE (and wait for complete)
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 8000218:	4832      	ldr	r0, [pc, #200]	@ (80002e4 <delay_inner+0xa>)
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 800021a:	6801      	ldr	r1, [r0, #0]
	LDR R2, =1 << HSEBYP | 1 << HSEON @ make a bit mask with a '1' in the 0th bit position
 800021c:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
	ORR R1, R2 @ apply the bit mask to the previous values of the enable register
 8000220:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, #RCC_CR] @ store the modified enable register values back to RCC
 8000224:	6001      	str	r1, [r0, #0]

08000226 <wait_for_HSERDY>:

	@ wait for the changes to be completed
wait_for_HSERDY:
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 8000226:	6801      	ldr	r1, [r0, #0]
	TST R1, 1 << HSERDY @ Test the HSERDY bit (check if it is 1)
 8000228:	f411 3f00 	tst.w	r1, #131072	@ 0x20000
	BEQ wait_for_HSERDY
 800022c:	d0fb      	beq.n	8000226 <wait_for_HSERDY>

@ step 2, now the clock is HSE, we are allowed to switch to PLL
	@ clock is set to External clock (external crystal) - 8MHz, can enable the PLL now
	LDR R1, [R0, #RCC_CFGR] @ load the original value from the enable register
 800022e:	6841      	ldr	r1, [r0, #4]
	LDR R2, =1 << 20 | 1 << PLLSRC | 1 << 22 @ the last term is for the USB prescaler to be 1
 8000230:	f44f 02a2 	mov.w	r2, #5308416	@ 0x510000
	ORR R1, R2  @ set PLLSRC (use PLL) and PLLMUL to 0100 - bit 20 is 1 (set speed as 6x faster)
 8000234:	ea41 0102 	orr.w	r1, r1, r2
				@ see page 140 of the large manual for options
				@ NOTE: cannot go faster than 72MHz)
	STR R1, [R0, #RCC_CFGR] @ store the modified enable register values back to RCC
 8000238:	6041      	str	r1, [r0, #4]

	@ enable PLL (and wait for complete)
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 800023a:	482a      	ldr	r0, [pc, #168]	@ (80002e4 <delay_inner+0xa>)
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 800023c:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << PLLON @ apply the bit mask to turn on the PLL
 800023e:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
	STR R1, [R0, #RCC_CR] @ store the modified enable register values back to RCC
 8000242:	6001      	str	r1, [r0, #0]

08000244 <wait_for_PLLRDY>:

wait_for_PLLRDY:
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 8000244:	6801      	ldr	r1, [r0, #0]
	TST R1, 1 << PLLRDY @ Test the HSERDY bit (check if it is 1)
 8000246:	f011 7f00 	tst.w	r1, #33554432	@ 0x2000000
	BEQ wait_for_PLLRDY
 800024a:	d0fb      	beq.n	8000244 <wait_for_PLLRDY>

@ step 3, PLL is ready, switch over the system clock to PLL
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 800024c:	4825      	ldr	r0, [pc, #148]	@ (80002e4 <delay_inner+0xa>)
	LDR R1, [R0, #RCC_CFGR]  @ load the current value of the peripheral clock registers
 800024e:	6841      	ldr	r1, [r0, #4]
	MOV R2, 1 << 10 | 1 << 1  @ some more settings - bit 1 (SW = 10)  - PLL set as system clock
 8000250:	f240 4202 	movw	r2, #1026	@ 0x402
									   @ bit 10 (HCLK=100) divided by 2 (clock is faster, need to prescale for peripherals)
	ORR R1, R2	@ Set the values of these two clocks (turn them on)
 8000254:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, #RCC_CFGR]  @ store the modified register back to the submodule
 8000258:	6041      	str	r1, [r0, #4]

	LDR R1, [R0, #RCC_CFGR]  @ load the current value of the peripheral clock registers
 800025a:	6841      	ldr	r1, [r0, #4]
	ORR R1, 1 << USBPRE	@ Set the USB prescaler (when PLL is on for the USB)
 800025c:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
	STR R1, [R0, #RCC_CFGR]  @ store the modified register back to the submodule
 8000260:	6041      	str	r1, [r0, #4]

	BX LR @ return
 8000262:	4770      	bx	lr

08000264 <initialise_power>:

@ initialise the power systems on the microcontroller
@ PWREN (enable power to the clock), SYSCFGEN system clock enable
initialise_power:

	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 8000264:	481f      	ldr	r0, [pc, #124]	@ (80002e4 <delay_inner+0xa>)

	@ enable clock power in APB1ENR
	LDR R1, [R0, #APB1ENR]
 8000266:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << PWREN @ apply the bit mask for power enable
 8000268:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
	STR R1, [R0, #APB1ENR]
 800026c:	61c1      	str	r1, [r0, #28]

	@ enable clock config in APB2ENR
	LDR R1, [R0, #APB2ENR]
 800026e:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << SYSCFGEN @ apply the bit mask to allow clock configuration
 8000270:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, #APB2ENR]
 8000274:	6181      	str	r1, [r0, #24]

	BX LR @ return
 8000276:	4770      	bx	lr

08000278 <main>:


@ this is the entry function called from the c file
main:

	BL initialise_power
 8000278:	f7ff fff4 	bl	8000264 <initialise_power>
	BL enable_peripheral_clocks
 800027c:	f7ff ffaa 	bl	80001d4 <enable_peripheral_clocks>
	BL enable_uart
 8000280:	f7ff ffae 	bl	80001e0 <enable_uart>

08000284 <program_loop>:


program_loop:
	BL button_check_loop   		   @ Check if button is pressed and send message
 8000284:	f000 f801 	bl	800028a <button_check_loop>
    B program_loop                 @ Repeat forever
 8000288:	e7fc      	b.n	8000284 <program_loop>

0800028a <button_check_loop>:

button_check_loop:
	LDR R0, =GPIOA                  @ Load GPIOA base address
 800028a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    LDR R1, [R0, IDR]        @ Load GPIO mode register
 800028e:	6901      	ldr	r1, [r0, #16]
    TST R1, #1        			@ Check if PA0 (User Button) is pressed
 8000290:	f011 0f01 	tst.w	r1, #1
    BEQ button_check_loop           @ If not pressed, keep checking
 8000294:	d0f9      	beq.n	800028a <button_check_loop>
    @LDR R2, =GPIOE                    @ Load GPIOE base address
    @LDRB R3, =0b10101010				@LED pattern
    @STRB R3, [R2, #ODR + 1]             @ Load output data register


    LDR R1, =tx_string              @ Load address of the message string
 8000296:	4916      	ldr	r1, [pc, #88]	@ (80002f0 <delay_inner+0x16>)
    BL uart_transmit_string         @ Call UART transmit function
 8000298:	f000 f801 	bl	800029e <uart_transmit_string>

    BX LR                           @ Return
 800029c:	4770      	bx	lr

0800029e <uart_transmit_string>:


uart_transmit_string:
    PUSH {LR}                       @ Save return address
 800029e:	b500      	push	{lr}

080002a0 <transmit_loop>:

transmit_loop:						@tx_loop
    LDRB R2, [R1], #1               @ Load a byte from the string and increment pointer
 80002a0:	f811 2b01 	ldrb.w	r2, [r1], #1
    CMP R2, #0                      @ Check if null terminator reached
 80002a4:	2a00      	cmp	r2, #0
    BEQ transmit_done               @ If null, end transmission
 80002a6:	d002      	beq.n	80002ae <transmit_done>

    BL uart_transmit_char           @ Send character via UART
 80002a8:	f000 f808 	bl	80002bc <uart_transmit_char>
    B transmit_loop                 @ Continue sending characters
 80002ac:	e7f8      	b.n	80002a0 <transmit_loop>

080002ae <transmit_done>:

transmit_done:
    LDRB R2, =terminator            @ Load terminating character ('*')
 80002ae:	f89f 2044 	ldrb.w	r2, [pc, #68]	@ 80002f4 <delay_inner+0x1a>
    BL uart_transmit_char           @ Send the terminating character
 80002b2:	f000 f803 	bl	80002bc <uart_transmit_char>

    POP {LR}                        @ Restore return address
 80002b6:	f85d eb04 	ldr.w	lr, [sp], #4
    BX LR                           @ Return
 80002ba:	4770      	bx	lr

080002bc <uart_transmit_char>:

uart_transmit_char:					@tx_uart
    PUSH {LR}                       @ Save return address
 80002bc:	b500      	push	{lr}

080002be <wait_for_tx_ready>:

wait_for_tx_ready:
    LDR R3, =UART                   @ Load UART base address
 80002be:	4b0b      	ldr	r3, [pc, #44]	@ (80002ec <delay_inner+0x12>)
    LDR R4, [R3, USART_ISR]          @ Load UART status register
 80002c0:	69dc      	ldr	r4, [r3, #28]
    TST R4, 1 << UART_TXE            @ Check if Transmit buffer is empty
 80002c2:	f014 0f80 	tst.w	r4, #128	@ 0x80
    BL delay_loop
 80002c6:	f000 f806 	bl	80002d6 <delay_loop>
    BEQ wait_for_tx_ready            @ Wait if buffer is full
 80002ca:	d0f8      	beq.n	80002be <wait_for_tx_ready>

    STRB R2, [R3, USART_TDR]         @ Store character in Transmit Data Register
 80002cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    POP {LR}                         @ Restore return address
 80002d0:	f85d eb04 	ldr.w	lr, [sp], #4
    BX LR                            @ Return
 80002d4:	4770      	bx	lr

080002d6 <delay_loop>:

delay_loop:
    LDR R9, =0xFFFFF
 80002d6:	f8df 9020 	ldr.w	r9, [pc, #32]	@ 80002f8 <delay_inner+0x1e>

080002da <delay_inner>:
delay_inner:
    SUBS R9, #1
 80002da:	f1b9 0901 	subs.w	r9, r9, #1
    BLT delay_inner
 80002de:	dbfc      	blt.n	80002da <delay_inner>
    BX LR
 80002e0:	4770      	bx	lr
 80002e2:	0000      	.short	0x0000
	LDR R0, =RCC
 80002e4:	40021000 	.word	0x40021000
	LDR R0, =GPIOC
 80002e8:	48000800 	.word	0x48000800
	LDR R0, =UART @ the base address for the register to turn clocks on/off
 80002ec:	40013800 	.word	0x40013800
    LDR R1, =tx_string              @ Load address of the message string
 80002f0:	2000003f 	.word	0x2000003f
    LDRB R2, =terminator            @ Load terminating character ('*')
 80002f4:	20000046 	.word	0x20000046
    LDR R9, =0xFFFFF
 80002f8:	000fffff 	.word	0x000fffff

080002fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002fc:	480d      	ldr	r0, [pc, #52]	@ (8000334 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000300:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000304:	480c      	ldr	r0, [pc, #48]	@ (8000338 <LoopForever+0x6>)
  ldr r1, =_edata
 8000306:	490d      	ldr	r1, [pc, #52]	@ (800033c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000308:	4a0d      	ldr	r2, [pc, #52]	@ (8000340 <LoopForever+0xe>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800030c:	e002      	b.n	8000314 <LoopCopyDataInit>

0800030e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000312:	3304      	adds	r3, #4

08000314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000318:	d3f9      	bcc.n	800030e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800031a:	4a0a      	ldr	r2, [pc, #40]	@ (8000344 <LoopForever+0x12>)
  ldr r4, =_ebss
 800031c:	4c0a      	ldr	r4, [pc, #40]	@ (8000348 <LoopForever+0x16>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000320:	e001      	b.n	8000326 <LoopFillZerobss>

08000322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000324:	3204      	adds	r2, #4

08000326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000328:	d3fb      	bcc.n	8000322 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800032a:	f000 f811 	bl	8000350 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800032e:	f7ff ffa3 	bl	8000278 <main>

08000332 <LoopForever>:

LoopForever:
  b LoopForever
 8000332:	e7fe      	b.n	8000332 <LoopForever>
  ldr   r0, =_estack
 8000334:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800033c:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8000340:	080003b8 	.word	0x080003b8
  ldr r2, =_sbss
 8000344:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8000348:	20000064 	.word	0x20000064

0800034c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800034c:	e7fe      	b.n	800034c <ADC1_2_IRQHandler>
	...

08000350 <__libc_init_array>:
 8000350:	b570      	push	{r4, r5, r6, lr}
 8000352:	4d0d      	ldr	r5, [pc, #52]	@ (8000388 <__libc_init_array+0x38>)
 8000354:	4c0d      	ldr	r4, [pc, #52]	@ (800038c <__libc_init_array+0x3c>)
 8000356:	1b64      	subs	r4, r4, r5
 8000358:	10a4      	asrs	r4, r4, #2
 800035a:	2600      	movs	r6, #0
 800035c:	42a6      	cmp	r6, r4
 800035e:	d109      	bne.n	8000374 <__libc_init_array+0x24>
 8000360:	4d0b      	ldr	r5, [pc, #44]	@ (8000390 <__libc_init_array+0x40>)
 8000362:	4c0c      	ldr	r4, [pc, #48]	@ (8000394 <__libc_init_array+0x44>)
 8000364:	f000 f818 	bl	8000398 <_init>
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	10a4      	asrs	r4, r4, #2
 800036c:	2600      	movs	r6, #0
 800036e:	42a6      	cmp	r6, r4
 8000370:	d105      	bne.n	800037e <__libc_init_array+0x2e>
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f855 3b04 	ldr.w	r3, [r5], #4
 8000378:	4798      	blx	r3
 800037a:	3601      	adds	r6, #1
 800037c:	e7ee      	b.n	800035c <__libc_init_array+0xc>
 800037e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000382:	4798      	blx	r3
 8000384:	3601      	adds	r6, #1
 8000386:	e7f2      	b.n	800036e <__libc_init_array+0x1e>
 8000388:	080003b0 	.word	0x080003b0
 800038c:	080003b0 	.word	0x080003b0
 8000390:	080003b0 	.word	0x080003b0
 8000394:	080003b4 	.word	0x080003b4

08000398 <_init>:
 8000398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800039a:	bf00      	nop
 800039c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039e:	bc08      	pop	{r3}
 80003a0:	469e      	mov	lr, r3
 80003a2:	4770      	bx	lr

080003a4 <_fini>:
 80003a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a6:	bf00      	nop
 80003a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003aa:	bc08      	pop	{r3}
 80003ac:	469e      	mov	lr, r3
 80003ae:	4770      	bx	lr
