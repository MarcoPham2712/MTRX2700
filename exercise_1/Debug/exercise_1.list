
exercise_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000029c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000430  08000430  00002050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000430  08000430  00002050  2**0
                  CONTENTS
  4 .ARM          00000000  08000430  08000430  00002050  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000430  08000430  00002050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000430  08000430  00001430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000434  08000434  00001434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  08000438  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002050  2**0
                  CONTENTS
 10 .bss          0000001c  20000050  20000050  00002050  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000006c  2000006c  00002050  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002050  2**0
                  CONTENTS, READONLY
 13 .debug_line   00000184  00000000  00000000  00002080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 000000a0  00000000  00000000  00002204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000055  00000000  00000000  000022a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  000022f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  00002338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000099  00000000  00000000  00002380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  00002419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  00002434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000050 	.word	0x20000050
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000418 	.word	0x08000418

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000054 	.word	0x20000054
 80001d0:	08000418 	.word	0x08000418

080001d4 <case_converter_setup_and_run>:
string_buffer: .space 10          @ string buffer for the converted string

.text

case_converter_setup_and_run:
    LDR   R0, =0                  @ 1 = convert to uppercase  0 = convert to lowercase
 80001d4:	f04f 0000 	mov.w	r0, #0
    LDR   R1, =ascii_string
 80001d8:	495c      	ldr	r1, [pc, #368]	@ (800034c <program_loop+0x4>)
    LDR   R2, =string_buffer
 80001da:	4a5d      	ldr	r2, [pc, #372]	@ (8000350 <program_loop+0x8>)

080001dc <case_converter_run>:

case_converter_run:
    MOV   R3, #0                  @ R3 is the index pointer starts at 0
 80001dc:	f04f 0300 	mov.w	r3, #0
    CMP   R0, #1                  @ Check the mode
 80001e0:	2801      	cmp	r0, #1
    BEQ   Uppercase
 80001e2:	d000      	beq.n	80001e6 <Uppercase>
    B     Lowercase
 80001e4:	e00c      	b.n	8000200 <Lowercase>

080001e6 <Uppercase>:

Uppercase:
    LDRB  R4, [R1, R3]            @ Load one character from the source into R4
 80001e6:	5ccc      	ldrb	r4, [r1, r3]
    CMP   R4, #0                  @ Compare with null terminator '\0'
 80001e8:	2c00      	cmp	r4, #0
    BEQ   finish
 80001ea:	d016      	beq.n	800021a <finish>

    CMP   R4, #'a'                @ If character is less than 'a'
 80001ec:	2c61      	cmp	r4, #97	@ 0x61
    BLT   store_ucha
 80001ee:	db03      	blt.n	80001f8 <store_ucha>
    CMP   R4, #'z'                @ If character is greater than 'z'
 80001f0:	2c7a      	cmp	r4, #122	@ 0x7a
    BGT   store_ucha
 80001f2:	dc01      	bgt.n	80001f8 <store_ucha>
    SUB   R4, R4, #32             @ Otherwise, convert 'a'–'z' to uppercase by subtracting 32
 80001f4:	f1a4 0420 	sub.w	r4, r4, #32

080001f8 <store_ucha>:

store_ucha:
    STRB  R4, [R2, R3]            @ Store the (converted) character in the destination
 80001f8:	54d4      	strb	r4, [r2, r3]
    ADD   R3, #1                  @ Move the index to the next character
 80001fa:	f103 0301 	add.w	r3, r3, #1
    B     Uppercase
 80001fe:	e7f2      	b.n	80001e6 <Uppercase>

08000200 <Lowercase>:

Lowercase:
    LDRB  R4, [R1, R3]            @ Load one character from the source into R4
 8000200:	5ccc      	ldrb	r4, [r1, r3]
    CMP   R4, #0                  @ Compare with null terminator '\0'
 8000202:	2c00      	cmp	r4, #0
    BEQ   finish
 8000204:	d009      	beq.n	800021a <finish>

    CMP   R4, #'A'                @ If character is less than 'A'
 8000206:	2c41      	cmp	r4, #65	@ 0x41
    BLT   store_lcha
 8000208:	db03      	blt.n	8000212 <store_lcha>
    CMP   R4, #'Z'                @ If character is greater than 'Z'
 800020a:	2c5a      	cmp	r4, #90	@ 0x5a
    BGT   store_lcha
 800020c:	dc01      	bgt.n	8000212 <store_lcha>
    ADD   R4, R4, #32             @ Otherwise, convert 'A'–'Z' to lowercase by adding 32
 800020e:	f104 0420 	add.w	r4, r4, #32

08000212 <store_lcha>:

store_lcha:
    STRB  R4, [R2, R3]
 8000212:	54d4      	strb	r4, [r2, r3]
    ADD   R3, #1                  @ Move the index to the next character
 8000214:	f103 0301 	add.w	r3, r3, #1
    B     Lowercase
 8000218:	e7f2      	b.n	8000200 <Lowercase>

0800021a <finish>:

finish:
    MOV   R4, #0
 800021a:	f04f 0400 	mov.w	r4, #0
    STRB  R4, [R2, R3]
 800021e:	54d4      	strb	r4, [r2, r3]
    BKPT  #0
 8000220:	be00      	bkpt	0x0000

08000222 <palindrome>:
// R0 is used as a backwards iterating pointer and then to return the result
// R2 is used to test the character in R0
// R3 is used to test the character in R1
// Result is stored in R0 (1 is palindrome, 0 is not)
palindrome:
	MOV R0, R1 // Load string from R1 into R0
 8000222:	4608      	mov	r0, r1

08000224 <palindrome_loop_to_null>:

	// Set R0 pointer to end of string
	palindrome_loop_to_null:
		// Load string value into R2 and compare
		LDRB R2, [R0]
 8000224:	7802      	ldrb	r2, [r0, #0]
		CMP R2, #0
 8000226:	2a00      	cmp	r2, #0
		ADD R0, #1
 8000228:	f100 0001 	add.w	r0, r0, #1
		BNE palindrome_loop_to_null
 800022c:	d1fa      	bne.n	8000224 <palindrome_loop_to_null>

	// Set pointer to before string NULL terminator
	SUB R0, #0x2
 800022e:	f1a0 0002 	sub.w	r0, r0, #2

08000232 <palindrome_loop_until_tested>:

	// Iterate pointers R1/R0 forward/backwards respectively until they pass
	palindrome_loop_until_tested:
		// Load and compare both characters
		LDRB R2, [R0]
 8000232:	7802      	ldrb	r2, [r0, #0]
		LDRB R3, [R1]
 8000234:	780b      	ldrb	r3, [r1, #0]
		CMP R2, R3
 8000236:	429a      	cmp	r2, r3
		BEQ continue_palindrome
 8000238:	d009      	beq.n	800024e <continue_palindrome>

0800023a <palindrome_check_capital>:

		palindrome_check_capital:
			ADD R2, #32
 800023a:	f102 0220 	add.w	r2, r2, #32
			CMP R2, R3
 800023e:	429a      	cmp	r2, r3
			BEQ continue_palindrome
 8000240:	d005      	beq.n	800024e <continue_palindrome>

08000242 <palindrome_check_capital2>:

		palindrome_check_capital2:
			ADD R3, #32
 8000242:	f103 0320 	add.w	r3, r3, #32
			SUB R2, #32
 8000246:	f1a2 0220 	sub.w	r2, r2, #32
			CMP R2, R3
 800024a:	429a      	cmp	r2, r3
			BNE palindrome_fail
 800024c:	d108      	bne.n	8000260 <palindrome_fail>

0800024e <continue_palindrome>:

		// Iterate pointers until they pass
		continue_palindrome:
			SUB R0, #0x1
 800024e:	f1a0 0001 	sub.w	r0, r0, #1
			ADD R1, #0x1
 8000252:	f101 0101 	add.w	r1, r1, #1
			CMP R0, R1
 8000256:	4288      	cmp	r0, r1
			BGT palindrome_loop_until_tested
 8000258:	dceb      	bgt.n	8000232 <palindrome_loop_until_tested>

0800025a <palindrome_pass>:

	// Return 1 if string is a palindrome, else 0
	palindrome_pass:
		MOV R0, #1
 800025a:	f04f 0001 	mov.w	r0, #1
		BX LR
 800025e:	4770      	bx	lr

08000260 <palindrome_fail>:

	palindrome_fail:
		MOV R0, #0
 8000260:	f04f 0000 	mov.w	r0, #0
		BX LR
 8000264:	4770      	bx	lr

08000266 <caesar_cipher>:
// R3: 'A' or 'a' to indicate if cipher is upper/lower
// R4: Result of division required for modulo operator
// R5: Modulo divisor
caesar_cipher:
	// Register setup
	POP {R0, R1} // Pop the cipher key and string from the stack
 8000266:	bc03      	pop	{r0, r1}
	SUB R1, #1   // Start before the string (because pre-increment loop)
 8000268:	f1a1 0101 	sub.w	r1, r1, #1
	MOV R5, #26
 800026c:	f04f 051a 	mov.w	r5, #26

	// Convert cipher key to positive value in range [0, 25]
	SDIV R4, R0, R5
 8000270:	fb90 f4f5 	sdiv	r4, r0, r5
	MUL R4, R5
 8000274:	fb05 f404 	mul.w	r4, r5, r4
	SUB R0, R4
 8000278:	eba0 0004 	sub.w	r0, r0, r4
	CMP R0, #0 // Add 26 to negative values
 800027c:	2800      	cmp	r0, #0
	BGE cipher_next
 800027e:	da00      	bge.n	8000282 <cipher_next>
	ADD R0, R5
 8000280:	4428      	add	r0, r5

08000282 <cipher_next>:

	cipher_next:
		// Iterate string until terminating NULLL
		LDRB R2, [R1, #1]!
 8000282:	f811 2f01 	ldrb.w	r2, [r1, #1]!
		CMP R2, #0
 8000286:	2a00      	cmp	r2, #0
		BEQ cipher_finish
 8000288:	d017      	beq.n	80002ba <cipher_finish>

		// Ignore values before and after the alphabet
		CMP R2, #'A'
 800028a:	2a41      	cmp	r2, #65	@ 0x41
		BLT cipher_next
 800028c:	dbf9      	blt.n	8000282 <cipher_next>
		CMP R2, #'z'
 800028e:	2a7a      	cmp	r2, #122	@ 0x7a
		BGT cipher_next
 8000290:	dcf7      	bgt.n	8000282 <cipher_next>

		// Check if uppercase or lower case
		CMP R2, #'Z'
 8000292:	2a5a      	cmp	r2, #90	@ 0x5a
		MOV R3, #'A'
 8000294:	f04f 0341 	mov.w	r3, #65	@ 0x41
		BLE perform_cipher
 8000298:	dd03      	ble.n	80002a2 <perform_cipher>

		CMP R2, #'a'
 800029a:	2a61      	cmp	r2, #97	@ 0x61
		MOV R3, #'a'
 800029c:	f04f 0361 	mov.w	r3, #97	@ 0x61
		BGE perform_cipher
 80002a0:	daff      	bge.n	80002a2 <perform_cipher>

080002a2 <perform_cipher>:

	perform_cipher:
		// Convert letter to a number [0, 25] and perform cipher
		SUB R2, R3
 80002a2:	eba2 0203 	sub.w	r2, r2, r3
		ADD R2, R0
 80002a6:	4402      	add	r2, r0

		// Modulo operation (subtract highest multiple of 26)
		UDIV R4, R2, R5
 80002a8:	fbb2 f4f5 	udiv	r4, r2, r5
		MUL R4, R5
 80002ac:	fb05 f404 	mul.w	r4, r5, r4
		SUB R2, R4
 80002b0:	eba2 0204 	sub.w	r2, r2, r4

		// Convert number back to letter of given case, store in R1
		ADD R2, R3
 80002b4:	441a      	add	r2, r3
		STRB R2, [R1]
 80002b6:	700a      	strb	r2, [r1, #0]
		B cipher_next
 80002b8:	e7e3      	b.n	8000282 <cipher_next>

080002ba <cipher_finish>:

	cipher_finish:
		BX LR
 80002ba:	4770      	bx	lr

080002bc <main>:

.text

main:
	// Test 1a
	LDR R0, =0
 80002bc:	f04f 0000 	mov.w	r0, #0
	LDR R1, =hello_world_string
 80002c0:	4924      	ldr	r1, [pc, #144]	@ (8000354 <program_loop+0xc>)
	LDR R2, =converted_hello_world_string
 80002c2:	4a25      	ldr	r2, [pc, #148]	@ (8000358 <program_loop+0x10>)
	B case_converter_run
 80002c4:	e78a      	b.n	80001dc <case_converter_run>

	// Test 1b
	LDR R1, =hello_world_string
 80002c6:	4923      	ldr	r1, [pc, #140]	@ (8000354 <program_loop+0xc>)
	BL palindrome
 80002c8:	f7ff ffab 	bl	8000222 <palindrome>

	LDR R1, =palindrome_string
 80002cc:	4923      	ldr	r1, [pc, #140]	@ (800035c <program_loop+0x14>)
	BL palindrome
 80002ce:	f7ff ffa8 	bl	8000222 <palindrome>

	// Test 1c
	// Basic test
	LDR R0, =cipher_key
 80002d2:	4823      	ldr	r0, [pc, #140]	@ (8000360 <program_loop+0x18>)
	LDRB R0, [R0]
 80002d4:	7800      	ldrb	r0, [r0, #0]
	LDR R1, =cipher_string
 80002d6:	4923      	ldr	r1, [pc, #140]	@ (8000364 <program_loop+0x1c>)
	PUSH {R0, R1}
 80002d8:	b403      	push	{r0, r1}
	BL caesar_cipher
 80002da:	f7ff ffc4 	bl	8000266 <caesar_cipher>

	LDR R1, =cipher_string_1
 80002de:	4922      	ldr	r1, [pc, #136]	@ (8000368 <program_loop+0x20>)
	PUSH {R0, R1}
 80002e0:	b403      	push	{r0, r1}
	BL caesar_cipher
 80002e2:	f7ff ffc0 	bl	8000266 <caesar_cipher>

	LDR R1, =cipher_string_2
 80002e6:	4921      	ldr	r1, [pc, #132]	@ (800036c <program_loop+0x24>)
	PUSH {R0, R1}
 80002e8:	b403      	push	{r0, r1}
	BL caesar_cipher
 80002ea:	f7ff ffbc 	bl	8000266 <caesar_cipher>

	// Negative (Decipher) test
	LDR R0, =cipher_key_1
 80002ee:	4820      	ldr	r0, [pc, #128]	@ (8000370 <program_loop+0x28>)
	LDRSB R0, [R0]
 80002f0:	f990 0000 	ldrsb.w	r0, [r0]
	LDR R1, =cipher_string
 80002f4:	491b      	ldr	r1, [pc, #108]	@ (8000364 <program_loop+0x1c>)
	PUSH {R0, R1}
 80002f6:	b403      	push	{r0, r1}
	BL caesar_cipher
 80002f8:	f7ff ffb5 	bl	8000266 <caesar_cipher>

	LDR R1, =cipher_string_1
 80002fc:	491a      	ldr	r1, [pc, #104]	@ (8000368 <program_loop+0x20>)
	PUSH {R0, R1}
 80002fe:	b403      	push	{r0, r1}
	BL caesar_cipher
 8000300:	f7ff ffb1 	bl	8000266 <caesar_cipher>

	LDR R1, =cipher_string_2
 8000304:	4919      	ldr	r1, [pc, #100]	@ (800036c <program_loop+0x24>)
	PUSH {R0, R1}
 8000306:	b403      	push	{r0, r1}
	BL caesar_cipher
 8000308:	f7ff ffad 	bl	8000266 <caesar_cipher>

	// Overflow test
	LDR R0, =cipher_key_2
 800030c:	4819      	ldr	r0, [pc, #100]	@ (8000374 <program_loop+0x2c>)
	LDRSB R0, [R0]
 800030e:	f990 0000 	ldrsb.w	r0, [r0]
	LDR R1, =cipher_string
 8000312:	4914      	ldr	r1, [pc, #80]	@ (8000364 <program_loop+0x1c>)
	PUSH {R0, R1}
 8000314:	b403      	push	{r0, r1}
	BL caesar_cipher
 8000316:	f7ff ffa6 	bl	8000266 <caesar_cipher>

	LDR R1, =cipher_string_1
 800031a:	4913      	ldr	r1, [pc, #76]	@ (8000368 <program_loop+0x20>)
	PUSH {R0, R1}
 800031c:	b403      	push	{r0, r1}
	BL caesar_cipher
 800031e:	f7ff ffa2 	bl	8000266 <caesar_cipher>

	LDR R1, =cipher_string_2
 8000322:	4912      	ldr	r1, [pc, #72]	@ (800036c <program_loop+0x24>)
	PUSH {R0, R1}
 8000324:	b403      	push	{r0, r1}
	BL caesar_cipher
 8000326:	f7ff ff9e 	bl	8000266 <caesar_cipher>

	// Negative overflow (decipher) test
	LDR R0, =cipher_key_3
 800032a:	4813      	ldr	r0, [pc, #76]	@ (8000378 <program_loop+0x30>)
	LDRSB R0, [R0]
 800032c:	f990 0000 	ldrsb.w	r0, [r0]
	LDR R1, =cipher_string
 8000330:	490c      	ldr	r1, [pc, #48]	@ (8000364 <program_loop+0x1c>)
	PUSH {R0, R1}
 8000332:	b403      	push	{r0, r1}
	BL caesar_cipher
 8000334:	f7ff ff97 	bl	8000266 <caesar_cipher>

	LDR R1, =cipher_string_1
 8000338:	490b      	ldr	r1, [pc, #44]	@ (8000368 <program_loop+0x20>)
	PUSH {R0, R1}
 800033a:	b403      	push	{r0, r1}
	BL caesar_cipher
 800033c:	f7ff ff93 	bl	8000266 <caesar_cipher>

	LDR R1, =cipher_string_2
 8000340:	490a      	ldr	r1, [pc, #40]	@ (800036c <program_loop+0x24>)
	PUSH {R0, R1}
 8000342:	b403      	push	{r0, r1}
	BL caesar_cipher
 8000344:	f7ff ff8f 	bl	8000266 <caesar_cipher>

08000348 <program_loop>:

program_loop:
	B program_loop
 8000348:	e7fe      	b.n	8000348 <program_loop>
 800034a:	0000      	.short	0x0000
    LDR   R1, =ascii_string
 800034c:	20000000 	.word	0x20000000
    LDR   R2, =string_buffer
 8000350:	20000006 	.word	0x20000006
	LDR R1, =hello_world_string
 8000354:	20000010 	.word	0x20000010
	LDR R2, =converted_hello_world_string
 8000358:	20000026 	.word	0x20000026
	LDR R1, =palindrome_string
 800035c:	2000001c 	.word	0x2000001c
	LDR R0, =cipher_key
 8000360:	20000037 	.word	0x20000037
	LDR R1, =cipher_string
 8000364:	2000003b 	.word	0x2000003b
	LDR R1, =cipher_string_1
 8000368:	2000003f 	.word	0x2000003f
	LDR R1, =cipher_string_2
 800036c:	20000046 	.word	0x20000046
	LDR R0, =cipher_key_1
 8000370:	20000038 	.word	0x20000038
	LDR R0, =cipher_key_2
 8000374:	20000039 	.word	0x20000039
	LDR R0, =cipher_key_3
 8000378:	2000003a 	.word	0x2000003a

0800037c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800037c:	480d      	ldr	r0, [pc, #52]	@ (80003b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800037e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000380:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000384:	480c      	ldr	r0, [pc, #48]	@ (80003b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000386:	490d      	ldr	r1, [pc, #52]	@ (80003bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000388:	4a0d      	ldr	r2, [pc, #52]	@ (80003c0 <LoopForever+0xe>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800038c:	e002      	b.n	8000394 <LoopCopyDataInit>

0800038e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000392:	3304      	adds	r3, #4

08000394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000398:	d3f9      	bcc.n	800038e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800039a:	4a0a      	ldr	r2, [pc, #40]	@ (80003c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800039c:	4c0a      	ldr	r4, [pc, #40]	@ (80003c8 <LoopForever+0x16>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a0:	e001      	b.n	80003a6 <LoopFillZerobss>

080003a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a4:	3204      	adds	r2, #4

080003a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a8:	d3fb      	bcc.n	80003a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003aa:	f000 f811 	bl	80003d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ae:	f7ff ff85 	bl	80002bc <main>

080003b2 <LoopForever>:

LoopForever:
  b LoopForever
 80003b2:	e7fe      	b.n	80003b2 <LoopForever>
  ldr   r0, =_estack
 80003b4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80003b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003bc:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80003c0:	08000438 	.word	0x08000438
  ldr r2, =_sbss
 80003c4:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80003c8:	2000006c 	.word	0x2000006c

080003cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003cc:	e7fe      	b.n	80003cc <ADC1_2_IRQHandler>
	...

080003d0 <__libc_init_array>:
 80003d0:	b570      	push	{r4, r5, r6, lr}
 80003d2:	4d0d      	ldr	r5, [pc, #52]	@ (8000408 <__libc_init_array+0x38>)
 80003d4:	4c0d      	ldr	r4, [pc, #52]	@ (800040c <__libc_init_array+0x3c>)
 80003d6:	1b64      	subs	r4, r4, r5
 80003d8:	10a4      	asrs	r4, r4, #2
 80003da:	2600      	movs	r6, #0
 80003dc:	42a6      	cmp	r6, r4
 80003de:	d109      	bne.n	80003f4 <__libc_init_array+0x24>
 80003e0:	4d0b      	ldr	r5, [pc, #44]	@ (8000410 <__libc_init_array+0x40>)
 80003e2:	4c0c      	ldr	r4, [pc, #48]	@ (8000414 <__libc_init_array+0x44>)
 80003e4:	f000 f818 	bl	8000418 <_init>
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	10a4      	asrs	r4, r4, #2
 80003ec:	2600      	movs	r6, #0
 80003ee:	42a6      	cmp	r6, r4
 80003f0:	d105      	bne.n	80003fe <__libc_init_array+0x2e>
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f8:	4798      	blx	r3
 80003fa:	3601      	adds	r6, #1
 80003fc:	e7ee      	b.n	80003dc <__libc_init_array+0xc>
 80003fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000402:	4798      	blx	r3
 8000404:	3601      	adds	r6, #1
 8000406:	e7f2      	b.n	80003ee <__libc_init_array+0x1e>
 8000408:	08000430 	.word	0x08000430
 800040c:	08000430 	.word	0x08000430
 8000410:	08000430 	.word	0x08000430
 8000414:	08000434 	.word	0x08000434

08000418 <_init>:
 8000418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041a:	bf00      	nop
 800041c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041e:	bc08      	pop	{r3}
 8000420:	469e      	mov	lr, r3
 8000422:	4770      	bx	lr

08000424 <_fini>:
 8000424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000426:	bf00      	nop
 8000428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042a:	bc08      	pop	{r3}
 800042c:	469e      	mov	lr, r3
 800042e:	4770      	bx	lr
