
exercise_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000218  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003ac  080003ac  00002034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003ac  080003ac  00002034  2**0
                  CONTENTS
  4 .ARM          00000000  080003ac  080003ac  00002034  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003ac  080003ac  00002034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003ac  080003ac  000013ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003b0  080003b0  000013b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  080003b4  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002034  2**0
                  CONTENTS
 10 .bss          0000001c  20000034  20000034  00002034  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000050  20000050  00002034  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY
 13 .debug_line   00000155  00000000  00000000  00002064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 000000a0  00000000  00000000  000021b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000055  00000000  00000000  00002259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  000022ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  000022e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000099  00000000  00000000  00002330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  000023c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  000023e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000034 	.word	0x20000034
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000394 	.word	0x08000394

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000038 	.word	0x20000038
 80001d0:	08000394 	.word	0x08000394

080001d4 <case_converter>:
ascii_string:  .asciz "EntP\0"    @ string (null-terminated)
string_buffer: .space 10          @ string buffer for the converted string

.text
case_converter:
    LDR   R0, =0                  @ 1 = convert to uppercase  0 = convert to lowercase
 80001d4:	f04f 0000 	mov.w	r0, #0
    LDR   R1, =ascii_string
 80001d8:	4941      	ldr	r1, [pc, #260]	@ (80002e0 <main+0xc>)
    LDR   R2, =string_buffer
 80001da:	4a42      	ldr	r2, [pc, #264]	@ (80002e4 <main+0x10>)
    MOV   R3, #0                  @ R3 is the index pointer starts at 0
 80001dc:	f04f 0300 	mov.w	r3, #0

080001e0 <loop>:

loop:
    CMP   R0, #1                  @ Check the mode
 80001e0:	2801      	cmp	r0, #1
    BEQ   Uppercase
 80001e2:	d000      	beq.n	80001e6 <Uppercase>
    B     Lowercase
 80001e4:	e00c      	b.n	8000200 <Lowercase>

080001e6 <Uppercase>:

Uppercase:
    LDRB  R4, [R1, R3]            @ Load one character from the source into R4
 80001e6:	5ccc      	ldrb	r4, [r1, r3]
    CMP   R4, #0                  @ Compare with null terminator '\0'
 80001e8:	2c00      	cmp	r4, #0
    BEQ   finish
 80001ea:	d016      	beq.n	800021a <finish>

    CMP   R4, #'a'                @ If character is less than 'a'
 80001ec:	2c61      	cmp	r4, #97	@ 0x61
    BLT   store_ucha
 80001ee:	db03      	blt.n	80001f8 <store_ucha>
    CMP   R4, #'z'                @ If character is greater than 'z'
 80001f0:	2c7a      	cmp	r4, #122	@ 0x7a
    BGT   store_ucha
 80001f2:	dc01      	bgt.n	80001f8 <store_ucha>
    SUB   R4, R4, #32             @ Otherwise, convert 'a'–'z' to uppercase by subtracting 32
 80001f4:	f1a4 0420 	sub.w	r4, r4, #32

080001f8 <store_ucha>:

store_ucha:
    STRB  R4, [R2, R3]            @ Store the (converted) character in the destination
 80001f8:	54d4      	strb	r4, [r2, r3]
    ADD   R3, #1                  @ Move the index to the next character
 80001fa:	f103 0301 	add.w	r3, r3, #1
    B     loop
 80001fe:	e7ef      	b.n	80001e0 <loop>

08000200 <Lowercase>:

Lowercase:
    LDRB  R4, [R1, R3]            @ Load one character from the source into R4
 8000200:	5ccc      	ldrb	r4, [r1, r3]
    CMP   R4, #0                  @ Compare with null terminator '\0'
 8000202:	2c00      	cmp	r4, #0
    BEQ   finish
 8000204:	d009      	beq.n	800021a <finish>

    CMP   R4, #'A'                @ If character is less than 'A'
 8000206:	2c41      	cmp	r4, #65	@ 0x41
    BLT   store_lcha
 8000208:	db03      	blt.n	8000212 <store_lcha>
    CMP   R4, #'Z'                @ If character is greater than 'Z'
 800020a:	2c5a      	cmp	r4, #90	@ 0x5a
    BGT   store_lcha
 800020c:	dc01      	bgt.n	8000212 <store_lcha>
    ADD   R4, R4, #32             @ Otherwise, convert 'A'–'Z' to lowercase by adding 32
 800020e:	f104 0420 	add.w	r4, r4, #32

08000212 <store_lcha>:

store_lcha:
    STRB  R4, [R2, R3]
 8000212:	54d4      	strb	r4, [r2, r3]
    ADD   R3, #1                  @ Move the index to the next character
 8000214:	f103 0301 	add.w	r3, r3, #1
    B     loop
 8000218:	e7e2      	b.n	80001e0 <loop>

0800021a <finish>:

finish:
    MOV   R4, #0
 800021a:	f04f 0400 	mov.w	r4, #0
    STRB  R4, [R2, R3]
 800021e:	54d4      	strb	r4, [r2, r3]
    BKPT  #0
 8000220:	be00      	bkpt	0x0000

08000222 <palindrome>:
 * R0 is used as a backwards iterating pointer
 * Result is stored in R0 (1 is palindrome, 0 is not)
 */
palindrome:
	// Load the address of the string into R0
	MOV R0, R1
 8000222:	4608      	mov	r0, r1

08000224 <palindrome_loop_to_null>:

	// Set R0 pointer to end of string
	palindrome_loop_to_null:
		// Load string value into R2 and compare
		LDRB R2, [R0]
 8000224:	7802      	ldrb	r2, [r0, #0]
		CMP R2, #0x0
 8000226:	2a00      	cmp	r2, #0
		ADD R0, #0x1
 8000228:	f100 0001 	add.w	r0, r0, #1
		BNE palindrome_loop_to_null
 800022c:	d1fa      	bne.n	8000224 <palindrome_loop_to_null>

	// Set pointer to before string NULL terminator
	SUB R0, #0x2
 800022e:	f1a0 0002 	sub.w	r0, r0, #2

08000232 <palindrome_loop_until_tested>:

	// Iterate pointers R1/R0 forward/backwards respectively until they pass
	palindrome_loop_until_tested:
		// Load and compare both characters
		LDRB R2, [R0]
 8000232:	7802      	ldrb	r2, [r0, #0]
		LDRB R3, [R1]
 8000234:	780b      	ldrb	r3, [r1, #0]
		CMP R2, R3
 8000236:	429a      	cmp	r2, r3
		BNE palindrome_fail
 8000238:	d108      	bne.n	800024c <palindrome_fail>

		// Iterate pointers until they pass
		SUB R0, #0x1
 800023a:	f1a0 0001 	sub.w	r0, r0, #1
		ADD R1, #0x1
 800023e:	f101 0101 	add.w	r1, r1, #1
		CMP R0, R1
 8000242:	4288      	cmp	r0, r1
		BGT palindrome_loop_until_tested
 8000244:	dcf5      	bgt.n	8000232 <palindrome_loop_until_tested>

08000246 <palindrome_pass>:

	// Set R0 to 1 if string is a palindrome, else 0
	palindrome_pass:
		LDR R0, =#0x1
 8000246:	f04f 0001 	mov.w	r0, #1
		BX LR
 800024a:	4770      	bx	lr

0800024c <palindrome_fail>:

	palindrome_fail:
		LDR R0, =#0x0
 800024c:	f04f 0000 	mov.w	r0, #0
		BX LR
 8000250:	4770      	bx	lr

08000252 <start_caesar_cipher>:
asciii_string: .asciz "ABcd\0"
string_bufferr: .space 10          @ Destination buffer (10 bytes)

.text
start_caesar_cipher:
    LDR R0,=3            	@ Caesar cipher shift (could be 3 or -3)
 8000252:	f04f 0003 	mov.w	r0, #3
    LDR R1,=asciii_string
 8000256:	4924      	ldr	r1, [pc, #144]	@ (80002e8 <main+0x14>)
    LDR R2,=string_bufferr
 8000258:	4a24      	ldr	r2, [pc, #144]	@ (80002ec <main+0x18>)
    LDR R3,=0x00         	@ R3 is the index (starting at 0)
 800025a:	f04f 0300 	mov.w	r3, #0

0800025e <caesar_cipher>:

caesar_cipher:
    LDRB R4,[R1,R3]     	@ Read one character from the string
 800025e:	5ccc      	ldrb	r4, [r1, r3]
    CMP R4,#0            	@ Check if it is '\0'
 8000260:	2c00      	cmp	r4, #0
    BEQ finished_string
 8000262:	d033      	beq.n	80002cc <finished_string>

    CMP R4,#'A'
 8000264:	2c41      	cmp	r4, #65	@ 0x41
    BLT store_character
 8000266:	db2d      	blt.n	80002c4 <store_character>

    CMP R4,#'Z'
 8000268:	2c5a      	cmp	r4, #90	@ 0x5a
    BGT check_lowercase
 800026a:	dc00      	bgt.n	800026e <check_lowercase>

    B uppercase
 800026c:	e004      	b.n	8000278 <uppercase>

0800026e <check_lowercase>:

check_lowercase:
    CMP R4,#'a'
 800026e:	2c61      	cmp	r4, #97	@ 0x61
    BLT store_character
 8000270:	db28      	blt.n	80002c4 <store_character>

    CMP R4,#'z'
 8000272:	2c7a      	cmp	r4, #122	@ 0x7a
    BGT store_character
 8000274:	dc26      	bgt.n	80002c4 <store_character>

    B lowercase
 8000276:	e012      	b.n	800029e <lowercase>

08000278 <uppercase>:

uppercase:
    MOV R5,#0           	 @ Clear R5
 8000278:	f04f 0500 	mov.w	r5, #0
    SUB R5,R4,#'A'      	@ Find position in the alphabet (0–25)
 800027c:	f1a4 0541 	sub.w	r5, r4, #65	@ 0x41
    ADD R5,R5,R0        	@ Add the shift (R0)
 8000280:	4405      	add	r5, r0

    CMP R5,#0            	@ Check if below 0
 8000282:	2d00      	cmp	r5, #0
    BGE check_upper_26
 8000284:	da01      	bge.n	800028a <check_upper_26>
    ADD R5,R5,#26       	@ If below 0, wrap around (add 26)
 8000286:	f105 051a 	add.w	r5, r5, #26

0800028a <check_upper_26>:

check_upper_26:
    CMP R5,#26           	@ If 26 or more, we need to wrap
 800028a:	2d1a      	cmp	r5, #26
    BLT normal_case_upper
 800028c:	db04      	blt.n	8000298 <normal_case_upper>
    SUB R5,#26           	@ Subtract 26 to wrap within 0–25
 800028e:	f1a5 051a 	sub.w	r5, r5, #26

    ADD R4,R5,#'A'      	@ Convert back to ASCII
 8000292:	f105 0441 	add.w	r4, r5, #65	@ 0x41
    B store_character
 8000296:	e015      	b.n	80002c4 <store_character>

08000298 <normal_case_upper>:

normal_case_upper:
    ADD R4,R5,#'A'      	@ Convert the shifted value back to uppercase
 8000298:	f105 0441 	add.w	r4, r5, #65	@ 0x41
    B store_character
 800029c:	e012      	b.n	80002c4 <store_character>

0800029e <lowercase>:

lowercase:
    MOV R5,#0            	@ Clear R5
 800029e:	f04f 0500 	mov.w	r5, #0
    SUB R5,R4,#'a'      	@ Find position in the alphabet (0–25)
 80002a2:	f1a4 0561 	sub.w	r5, r4, #97	@ 0x61
    ADD R5,R5,R0        	@ Add the shift (R0)
 80002a6:	4405      	add	r5, r0

    CMP R5,#0            	@ Check if below 0
 80002a8:	2d00      	cmp	r5, #0
    BGE check_lower_26
 80002aa:	da01      	bge.n	80002b0 <check_lower_26>
    ADD R5,R5,#26       	@ If below 0, wrap around
 80002ac:	f105 051a 	add.w	r5, r5, #26

080002b0 <check_lower_26>:

check_lower_26:
    CMP R5,#26
 80002b0:	2d1a      	cmp	r5, #26
    BLT normal_case_lower
 80002b2:	db04      	blt.n	80002be <normal_case_lower>
    SUB R5,#26          	 @ Wrap if >= 26
 80002b4:	f1a5 051a 	sub.w	r5, r5, #26
    ADD R4,R5,#'a'      	@ Convert back to ASCII
 80002b8:	f105 0461 	add.w	r4, r5, #97	@ 0x61
    B store_character
 80002bc:	e002      	b.n	80002c4 <store_character>

080002be <normal_case_lower>:

normal_case_lower:
    ADD R4,R5,#'a'      	@ Convert the shifted value back to lowercase
 80002be:	f105 0461 	add.w	r4, r5, #97	@ 0x61
    B store_character
 80002c2:	e7ff      	b.n	80002c4 <store_character>

080002c4 <store_character>:

store_character:
    STRB R4,[R2, R3]     	@ Store the processed character in the destination
 80002c4:	54d4      	strb	r4, [r2, r3]
    ADD R3,R3,#1        	@ Move to the next character
 80002c6:	f103 0301 	add.w	r3, r3, #1
    B caesar_cipher       	@ Repeat for the next source character
 80002ca:	e7c8      	b.n	800025e <caesar_cipher>

080002cc <finished_string>:

finished_string:
    MOV R4,#0            	@ Load 0 into R4
 80002cc:	f04f 0400 	mov.w	r4, #0
    STRB R4,[R2, R3]
 80002d0:	54d4      	strb	r4, [r2, r3]
    BKPT #0
 80002d2:	be00      	bkpt	0x0000

080002d4 <main>:

.text

main:
	// Test 1b
	LDR R1, =hello_world_string
 80002d4:	4906      	ldr	r1, [pc, #24]	@ (80002f0 <main+0x1c>)
	BL palindrome
 80002d6:	f7ff ffa4 	bl	8000222 <palindrome>
	LDR R1, =palindrome_string
 80002da:	4906      	ldr	r1, [pc, #24]	@ (80002f4 <main+0x20>)
	BL palindrome
 80002dc:	f7ff ffa1 	bl	8000222 <palindrome>
    LDR   R1, =ascii_string
 80002e0:	20000000 	.word	0x20000000
    LDR   R2, =string_buffer
 80002e4:	20000006 	.word	0x20000006
    LDR R1,=asciii_string
 80002e8:	20000010 	.word	0x20000010
    LDR R2,=string_bufferr
 80002ec:	20000016 	.word	0x20000016
	LDR R1, =hello_world_string
 80002f0:	20000020 	.word	0x20000020
	LDR R1, =palindrome_string
 80002f4:	2000002c 	.word	0x2000002c

080002f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f8:	480d      	ldr	r0, [pc, #52]	@ (8000330 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000300:	480c      	ldr	r0, [pc, #48]	@ (8000334 <LoopForever+0x6>)
  ldr r1, =_edata
 8000302:	490d      	ldr	r1, [pc, #52]	@ (8000338 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000304:	4a0d      	ldr	r2, [pc, #52]	@ (800033c <LoopForever+0xe>)
  movs r3, #0
 8000306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000308:	e002      	b.n	8000310 <LoopCopyDataInit>

0800030a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800030c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800030e:	3304      	adds	r3, #4

08000310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000314:	d3f9      	bcc.n	800030a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000316:	4a0a      	ldr	r2, [pc, #40]	@ (8000340 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000318:	4c0a      	ldr	r4, [pc, #40]	@ (8000344 <LoopForever+0x16>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800031c:	e001      	b.n	8000322 <LoopFillZerobss>

0800031e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800031e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000320:	3204      	adds	r2, #4

08000322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000324:	d3fb      	bcc.n	800031e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000326:	f000 f811 	bl	800034c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800032a:	f7ff ffd3 	bl	80002d4 <main>

0800032e <LoopForever>:

LoopForever:
  b LoopForever
 800032e:	e7fe      	b.n	800032e <LoopForever>
  ldr   r0, =_estack
 8000330:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000338:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 800033c:	080003b4 	.word	0x080003b4
  ldr r2, =_sbss
 8000340:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000344:	20000050 	.word	0x20000050

08000348 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000348:	e7fe      	b.n	8000348 <ADC1_2_IRQHandler>
	...

0800034c <__libc_init_array>:
 800034c:	b570      	push	{r4, r5, r6, lr}
 800034e:	4d0d      	ldr	r5, [pc, #52]	@ (8000384 <__libc_init_array+0x38>)
 8000350:	4c0d      	ldr	r4, [pc, #52]	@ (8000388 <__libc_init_array+0x3c>)
 8000352:	1b64      	subs	r4, r4, r5
 8000354:	10a4      	asrs	r4, r4, #2
 8000356:	2600      	movs	r6, #0
 8000358:	42a6      	cmp	r6, r4
 800035a:	d109      	bne.n	8000370 <__libc_init_array+0x24>
 800035c:	4d0b      	ldr	r5, [pc, #44]	@ (800038c <__libc_init_array+0x40>)
 800035e:	4c0c      	ldr	r4, [pc, #48]	@ (8000390 <__libc_init_array+0x44>)
 8000360:	f000 f818 	bl	8000394 <_init>
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	10a4      	asrs	r4, r4, #2
 8000368:	2600      	movs	r6, #0
 800036a:	42a6      	cmp	r6, r4
 800036c:	d105      	bne.n	800037a <__libc_init_array+0x2e>
 800036e:	bd70      	pop	{r4, r5, r6, pc}
 8000370:	f855 3b04 	ldr.w	r3, [r5], #4
 8000374:	4798      	blx	r3
 8000376:	3601      	adds	r6, #1
 8000378:	e7ee      	b.n	8000358 <__libc_init_array+0xc>
 800037a:	f855 3b04 	ldr.w	r3, [r5], #4
 800037e:	4798      	blx	r3
 8000380:	3601      	adds	r6, #1
 8000382:	e7f2      	b.n	800036a <__libc_init_array+0x1e>
 8000384:	080003ac 	.word	0x080003ac
 8000388:	080003ac 	.word	0x080003ac
 800038c:	080003ac 	.word	0x080003ac
 8000390:	080003b0 	.word	0x080003b0

08000394 <_init>:
 8000394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000396:	bf00      	nop
 8000398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039a:	bc08      	pop	{r3}
 800039c:	469e      	mov	lr, r3
 800039e:	4770      	bx	lr

080003a0 <_fini>:
 80003a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a2:	bf00      	nop
 80003a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003a6:	bc08      	pop	{r3}
 80003a8:	469e      	mov	lr, r3
 80003aa:	4770      	bx	lr
