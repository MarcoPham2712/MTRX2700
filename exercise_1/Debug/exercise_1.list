
exercise_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000264  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003f8  080003f8  0000203c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003f8  080003f8  0000203c  2**0
                  CONTENTS
  4 .ARM          00000000  080003f8  080003f8  0000203c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003f8  080003f8  0000203c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003f8  080003f8  000013f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003fc  080003fc  000013fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000003c  20000000  08000400  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000203c  2**0
                  CONTENTS
 10 .bss          0000001c  2000003c  2000003c  0000203c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000058  20000058  0000203c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY
 13 .debug_line   00000172  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 000000a0  00000000  00000000  000021de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000055  00000000  00000000  0000227e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  000022d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  00002310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000099  00000000  00000000  00002358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  000023f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  0000240c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000003c 	.word	0x2000003c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003e0 	.word	0x080003e0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000040 	.word	0x20000040
 80001d0:	080003e0 	.word	0x080003e0

080001d4 <case_converter>:
ascii_string:  .asciz "EntP\0"    @ string (null-terminated)
string_buffer: .space 10          @ string buffer for the converted string

.text
case_converter:
    LDR   R0, =0                  @ 1 = convert to uppercase  0 = convert to lowercase
 80001d4:	f04f 0000 	mov.w	r0, #0
    LDR   R1, =ascii_string
 80001d8:	4951      	ldr	r1, [pc, #324]	@ (8000320 <program_loop+0x2>)
    LDR   R2, =string_buffer
 80001da:	4a52      	ldr	r2, [pc, #328]	@ (8000324 <program_loop+0x6>)
    MOV   R3, #0                  @ R3 is the index pointer starts at 0
 80001dc:	f04f 0300 	mov.w	r3, #0

080001e0 <loop>:

loop:
    CMP   R0, #1                  @ Check the mode
 80001e0:	2801      	cmp	r0, #1
    BEQ   Uppercase
 80001e2:	d000      	beq.n	80001e6 <Uppercase>
    B     Lowercase
 80001e4:	e00c      	b.n	8000200 <Lowercase>

080001e6 <Uppercase>:

Uppercase:
    LDRB  R4, [R1, R3]            @ Load one character from the source into R4
 80001e6:	5ccc      	ldrb	r4, [r1, r3]
    CMP   R4, #0                  @ Compare with null terminator '\0'
 80001e8:	2c00      	cmp	r4, #0
    BEQ   finish
 80001ea:	d016      	beq.n	800021a <finish>

    CMP   R4, #'a'                @ If character is less than 'a'
 80001ec:	2c61      	cmp	r4, #97	@ 0x61
    BLT   store_ucha
 80001ee:	db03      	blt.n	80001f8 <store_ucha>
    CMP   R4, #'z'                @ If character is greater than 'z'
 80001f0:	2c7a      	cmp	r4, #122	@ 0x7a
    BGT   store_ucha
 80001f2:	dc01      	bgt.n	80001f8 <store_ucha>
    SUB   R4, R4, #32             @ Otherwise, convert 'a'–'z' to uppercase by subtracting 32
 80001f4:	f1a4 0420 	sub.w	r4, r4, #32

080001f8 <store_ucha>:

store_ucha:
    STRB  R4, [R2, R3]            @ Store the (converted) character in the destination
 80001f8:	54d4      	strb	r4, [r2, r3]
    ADD   R3, #1                  @ Move the index to the next character
 80001fa:	f103 0301 	add.w	r3, r3, #1
    B     loop
 80001fe:	e7ef      	b.n	80001e0 <loop>

08000200 <Lowercase>:

Lowercase:
    LDRB  R4, [R1, R3]            @ Load one character from the source into R4
 8000200:	5ccc      	ldrb	r4, [r1, r3]
    CMP   R4, #0                  @ Compare with null terminator '\0'
 8000202:	2c00      	cmp	r4, #0
    BEQ   finish
 8000204:	d009      	beq.n	800021a <finish>

    CMP   R4, #'A'                @ If character is less than 'A'
 8000206:	2c41      	cmp	r4, #65	@ 0x41
    BLT   store_lcha
 8000208:	db03      	blt.n	8000212 <store_lcha>
    CMP   R4, #'Z'                @ If character is greater than 'Z'
 800020a:	2c5a      	cmp	r4, #90	@ 0x5a
    BGT   store_lcha
 800020c:	dc01      	bgt.n	8000212 <store_lcha>
    ADD   R4, R4, #32             @ Otherwise, convert 'A'–'Z' to lowercase by adding 32
 800020e:	f104 0420 	add.w	r4, r4, #32

08000212 <store_lcha>:

store_lcha:
    STRB  R4, [R2, R3]
 8000212:	54d4      	strb	r4, [r2, r3]
    ADD   R3, #1                  @ Move the index to the next character
 8000214:	f103 0301 	add.w	r3, r3, #1
    B     loop
 8000218:	e7e2      	b.n	80001e0 <loop>

0800021a <finish>:

finish:
    MOV   R4, #0
 800021a:	f04f 0400 	mov.w	r4, #0
    STRB  R4, [R2, R3]
 800021e:	54d4      	strb	r4, [r2, r3]
    BKPT  #0
 8000220:	be00      	bkpt	0x0000

08000222 <palindrome>:
 * R0 is used as a backwards iterating pointer
 * Result is stored in R0 (1 is palindrome, 0 is not)
 */
palindrome:
	// Load the address of the string into R0
	MOV R0, R1
 8000222:	4608      	mov	r0, r1

08000224 <palindrome_loop_to_null>:

	// Set R0 pointer to end of string
	palindrome_loop_to_null:
		// Load string value into R2 and compare
		LDRB R2, [R0]
 8000224:	7802      	ldrb	r2, [r0, #0]
		CMP R2, #0x0
 8000226:	2a00      	cmp	r2, #0
		ADD R0, #0x1
 8000228:	f100 0001 	add.w	r0, r0, #1
		BNE palindrome_loop_to_null
 800022c:	d1fa      	bne.n	8000224 <palindrome_loop_to_null>

	// Set pointer to before string NULL terminator
	SUB R0, #0x2
 800022e:	f1a0 0002 	sub.w	r0, r0, #2

08000232 <palindrome_loop_until_tested>:

	// Iterate pointers R1/R0 forward/backwards respectively until they pass
	palindrome_loop_until_tested:
		// Load and compare both characters
		LDRB R2, [R0]
 8000232:	7802      	ldrb	r2, [r0, #0]
		LDRB R3, [R1]
 8000234:	780b      	ldrb	r3, [r1, #0]
		CMP R2, R3
 8000236:	429a      	cmp	r2, r3
		BNE palindrome_fail
 8000238:	d108      	bne.n	800024c <palindrome_fail>

		// Iterate pointers until they pass
		SUB R0, #0x1
 800023a:	f1a0 0001 	sub.w	r0, r0, #1
		ADD R1, #0x1
 800023e:	f101 0101 	add.w	r1, r1, #1
		CMP R0, R1
 8000242:	4288      	cmp	r0, r1
		BGT palindrome_loop_until_tested
 8000244:	dcf5      	bgt.n	8000232 <palindrome_loop_until_tested>

08000246 <palindrome_pass>:

	// Set R0 to 1 if string is a palindrome, else 0
	palindrome_pass:
		LDR R0, =#0x1
 8000246:	f04f 0001 	mov.w	r0, #1
		BX LR
 800024a:	4770      	bx	lr

0800024c <palindrome_fail>:

	palindrome_fail:
		LDR R0, =#0x0
 800024c:	f04f 0000 	mov.w	r0, #0
		BX LR
 8000250:	4770      	bx	lr

08000252 <caesar_cipher>:
// R3: 'A' or 'a' to indicate if cipher is upper/lower
// R4: Result of division required for modulo operator
// R5: Modulo divisor
caesar_cipher:
	// Register setup
	POP {R0, R1} // Pop the cipher key and string from the stack
 8000252:	bc03      	pop	{r0, r1}
	SUB R1, #1   // Start before the string (because pre-increment loop)
 8000254:	f1a1 0101 	sub.w	r1, r1, #1
	MOV R5, #26
 8000258:	f04f 051a 	mov.w	r5, #26

	// Convert cipher key to positive value in range [0, 25]
	SDIV R4, R0, R5
 800025c:	fb90 f4f5 	sdiv	r4, r0, r5
	MUL R4, R5
 8000260:	fb05 f404 	mul.w	r4, r5, r4
	SUB R0, R4
 8000264:	eba0 0004 	sub.w	r0, r0, r4
	CMP R0, #0 // Add 26 to negative values
 8000268:	2800      	cmp	r0, #0
	BGE cipher_next
 800026a:	da00      	bge.n	800026e <cipher_next>
	ADD R0, R5
 800026c:	4428      	add	r0, r5

0800026e <cipher_next>:

	cipher_next:
		// Iterate string until terminating NULLL
		LDRB R2, [R1, #1]!
 800026e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
		CMP R2, #0
 8000272:	2a00      	cmp	r2, #0
		BEQ cipher_finish
 8000274:	d017      	beq.n	80002a6 <cipher_finish>

		// Ignore values before and after the alphabet
		CMP R2, #'A'
 8000276:	2a41      	cmp	r2, #65	@ 0x41
		BLT cipher_next
 8000278:	dbf9      	blt.n	800026e <cipher_next>
		CMP R2, #'z'
 800027a:	2a7a      	cmp	r2, #122	@ 0x7a
		BGT cipher_next
 800027c:	dcf7      	bgt.n	800026e <cipher_next>

		// Check if uppercase or lower case
		CMP R2, #'Z'
 800027e:	2a5a      	cmp	r2, #90	@ 0x5a
		MOV R3, #'A'
 8000280:	f04f 0341 	mov.w	r3, #65	@ 0x41
		BLE perform_cipher
 8000284:	dd03      	ble.n	800028e <perform_cipher>

		CMP R2, #'a'
 8000286:	2a61      	cmp	r2, #97	@ 0x61
		MOV R3, #'a'
 8000288:	f04f 0361 	mov.w	r3, #97	@ 0x61
		BGE perform_cipher
 800028c:	daff      	bge.n	800028e <perform_cipher>

0800028e <perform_cipher>:

	perform_cipher:
		// Convert letter to a number [0, 25] and perform cipher
		SUB R2, R3
 800028e:	eba2 0203 	sub.w	r2, r2, r3
		ADD R2, R0
 8000292:	4402      	add	r2, r0

		// Modulo operation (subtract highest multiple of 26)
		UDIV R4, R2, R5
 8000294:	fbb2 f4f5 	udiv	r4, r2, r5
		MUL R4, R5
 8000298:	fb05 f404 	mul.w	r4, r5, r4
		SUB R2, R4
 800029c:	eba2 0204 	sub.w	r2, r2, r4

		// Convert number back to letter of given case, store in R1
		ADD R2, R3
 80002a0:	441a      	add	r2, r3
		STRB R2, [R1]
 80002a2:	700a      	strb	r2, [r1, #0]
		B cipher_next
 80002a4:	e7e3      	b.n	800026e <cipher_next>

080002a6 <cipher_finish>:

	cipher_finish:
		BX LR
 80002a6:	4770      	bx	lr

080002a8 <main>:
	// LDR R1, =palindrome_string
	// BL palindrome

	// Test 1c
	// Basic test
	LDR R0, =cipher_key
 80002a8:	481f      	ldr	r0, [pc, #124]	@ (8000328 <program_loop+0xa>)
	LDRB R0, [R0]
 80002aa:	7800      	ldrb	r0, [r0, #0]
	LDR R1, =cipher_string
 80002ac:	491f      	ldr	r1, [pc, #124]	@ (800032c <program_loop+0xe>)
	PUSH {R0, R1}
 80002ae:	b403      	push	{r0, r1}
	BL caesar_cipher
 80002b0:	f7ff ffcf 	bl	8000252 <caesar_cipher>

	LDR R1, =cipher_string_1
 80002b4:	491e      	ldr	r1, [pc, #120]	@ (8000330 <program_loop+0x12>)
	PUSH {R0, R1}
 80002b6:	b403      	push	{r0, r1}
	BL caesar_cipher
 80002b8:	f7ff ffcb 	bl	8000252 <caesar_cipher>

	LDR R1, =cipher_string_2
 80002bc:	491d      	ldr	r1, [pc, #116]	@ (8000334 <program_loop+0x16>)
	PUSH {R0, R1}
 80002be:	b403      	push	{r0, r1}
	BL caesar_cipher
 80002c0:	f7ff ffc7 	bl	8000252 <caesar_cipher>

	// Negative (Decipher) test
	LDR R0, =cipher_key_1
 80002c4:	481c      	ldr	r0, [pc, #112]	@ (8000338 <program_loop+0x1a>)
	LDRSB R0, [R0]
 80002c6:	f990 0000 	ldrsb.w	r0, [r0]
	LDR R1, =cipher_string
 80002ca:	4918      	ldr	r1, [pc, #96]	@ (800032c <program_loop+0xe>)
	PUSH {R0, R1}
 80002cc:	b403      	push	{r0, r1}
	BL caesar_cipher
 80002ce:	f7ff ffc0 	bl	8000252 <caesar_cipher>

	LDR R1, =cipher_string_1
 80002d2:	4917      	ldr	r1, [pc, #92]	@ (8000330 <program_loop+0x12>)
	PUSH {R0, R1}
 80002d4:	b403      	push	{r0, r1}
	BL caesar_cipher
 80002d6:	f7ff ffbc 	bl	8000252 <caesar_cipher>

	LDR R1, =cipher_string_2
 80002da:	4916      	ldr	r1, [pc, #88]	@ (8000334 <program_loop+0x16>)
	PUSH {R0, R1}
 80002dc:	b403      	push	{r0, r1}
	BL caesar_cipher
 80002de:	f7ff ffb8 	bl	8000252 <caesar_cipher>

	// Overflow test
	LDR R0, =cipher_key_2
 80002e2:	4816      	ldr	r0, [pc, #88]	@ (800033c <program_loop+0x1e>)
	LDRSB R0, [R0]
 80002e4:	f990 0000 	ldrsb.w	r0, [r0]
	LDR R1, =cipher_string
 80002e8:	4910      	ldr	r1, [pc, #64]	@ (800032c <program_loop+0xe>)
	PUSH {R0, R1}
 80002ea:	b403      	push	{r0, r1}
	BL caesar_cipher
 80002ec:	f7ff ffb1 	bl	8000252 <caesar_cipher>

	LDR R1, =cipher_string_1
 80002f0:	490f      	ldr	r1, [pc, #60]	@ (8000330 <program_loop+0x12>)
	PUSH {R0, R1}
 80002f2:	b403      	push	{r0, r1}
	BL caesar_cipher
 80002f4:	f7ff ffad 	bl	8000252 <caesar_cipher>

	LDR R1, =cipher_string_2
 80002f8:	490e      	ldr	r1, [pc, #56]	@ (8000334 <program_loop+0x16>)
	PUSH {R0, R1}
 80002fa:	b403      	push	{r0, r1}
	BL caesar_cipher
 80002fc:	f7ff ffa9 	bl	8000252 <caesar_cipher>

	// Negative overflow (decipher) test
	LDR R0, =cipher_key_3
 8000300:	480f      	ldr	r0, [pc, #60]	@ (8000340 <program_loop+0x22>)
	LDRSB R0, [R0]
 8000302:	f990 0000 	ldrsb.w	r0, [r0]
	LDR R1, =cipher_string
 8000306:	4909      	ldr	r1, [pc, #36]	@ (800032c <program_loop+0xe>)
	PUSH {R0, R1}
 8000308:	b403      	push	{r0, r1}
	BL caesar_cipher
 800030a:	f7ff ffa2 	bl	8000252 <caesar_cipher>

	LDR R1, =cipher_string_1
 800030e:	4908      	ldr	r1, [pc, #32]	@ (8000330 <program_loop+0x12>)
	PUSH {R0, R1}
 8000310:	b403      	push	{r0, r1}
	BL caesar_cipher
 8000312:	f7ff ff9e 	bl	8000252 <caesar_cipher>

	LDR R1, =cipher_string_2
 8000316:	4907      	ldr	r1, [pc, #28]	@ (8000334 <program_loop+0x16>)
	PUSH {R0, R1}
 8000318:	b403      	push	{r0, r1}
	BL caesar_cipher
 800031a:	f7ff ff9a 	bl	8000252 <caesar_cipher>

0800031e <program_loop>:

program_loop:
	B program_loop
 800031e:	e7fe      	b.n	800031e <program_loop>
    LDR   R1, =ascii_string
 8000320:	20000000 	.word	0x20000000
    LDR   R2, =string_buffer
 8000324:	20000006 	.word	0x20000006
	LDR R0, =cipher_key
 8000328:	20000024 	.word	0x20000024
	LDR R1, =cipher_string
 800032c:	20000028 	.word	0x20000028
	LDR R1, =cipher_string_1
 8000330:	2000002c 	.word	0x2000002c
	LDR R1, =cipher_string_2
 8000334:	20000033 	.word	0x20000033
	LDR R0, =cipher_key_1
 8000338:	20000025 	.word	0x20000025
	LDR R0, =cipher_key_2
 800033c:	20000026 	.word	0x20000026
	LDR R0, =cipher_key_3
 8000340:	20000027 	.word	0x20000027

08000344 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000344:	480d      	ldr	r0, [pc, #52]	@ (800037c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000346:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000348:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800034c:	480c      	ldr	r0, [pc, #48]	@ (8000380 <LoopForever+0x6>)
  ldr r1, =_edata
 800034e:	490d      	ldr	r1, [pc, #52]	@ (8000384 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000350:	4a0d      	ldr	r2, [pc, #52]	@ (8000388 <LoopForever+0xe>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000354:	e002      	b.n	800035c <LoopCopyDataInit>

08000356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800035a:	3304      	adds	r3, #4

0800035c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800035c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800035e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000360:	d3f9      	bcc.n	8000356 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000362:	4a0a      	ldr	r2, [pc, #40]	@ (800038c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000364:	4c0a      	ldr	r4, [pc, #40]	@ (8000390 <LoopForever+0x16>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000368:	e001      	b.n	800036e <LoopFillZerobss>

0800036a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800036a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800036c:	3204      	adds	r2, #4

0800036e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800036e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000370:	d3fb      	bcc.n	800036a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000372:	f000 f811 	bl	8000398 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000376:	f7ff ff97 	bl	80002a8 <main>

0800037a <LoopForever>:

LoopForever:
  b LoopForever
 800037a:	e7fe      	b.n	800037a <LoopForever>
  ldr   r0, =_estack
 800037c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000384:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8000388:	08000400 	.word	0x08000400
  ldr r2, =_sbss
 800038c:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8000390:	20000058 	.word	0x20000058

08000394 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000394:	e7fe      	b.n	8000394 <ADC1_2_IRQHandler>
	...

08000398 <__libc_init_array>:
 8000398:	b570      	push	{r4, r5, r6, lr}
 800039a:	4d0d      	ldr	r5, [pc, #52]	@ (80003d0 <__libc_init_array+0x38>)
 800039c:	4c0d      	ldr	r4, [pc, #52]	@ (80003d4 <__libc_init_array+0x3c>)
 800039e:	1b64      	subs	r4, r4, r5
 80003a0:	10a4      	asrs	r4, r4, #2
 80003a2:	2600      	movs	r6, #0
 80003a4:	42a6      	cmp	r6, r4
 80003a6:	d109      	bne.n	80003bc <__libc_init_array+0x24>
 80003a8:	4d0b      	ldr	r5, [pc, #44]	@ (80003d8 <__libc_init_array+0x40>)
 80003aa:	4c0c      	ldr	r4, [pc, #48]	@ (80003dc <__libc_init_array+0x44>)
 80003ac:	f000 f818 	bl	80003e0 <_init>
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	10a4      	asrs	r4, r4, #2
 80003b4:	2600      	movs	r6, #0
 80003b6:	42a6      	cmp	r6, r4
 80003b8:	d105      	bne.n	80003c6 <__libc_init_array+0x2e>
 80003ba:	bd70      	pop	{r4, r5, r6, pc}
 80003bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c0:	4798      	blx	r3
 80003c2:	3601      	adds	r6, #1
 80003c4:	e7ee      	b.n	80003a4 <__libc_init_array+0xc>
 80003c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ca:	4798      	blx	r3
 80003cc:	3601      	adds	r6, #1
 80003ce:	e7f2      	b.n	80003b6 <__libc_init_array+0x1e>
 80003d0:	080003f8 	.word	0x080003f8
 80003d4:	080003f8 	.word	0x080003f8
 80003d8:	080003f8 	.word	0x080003f8
 80003dc:	080003fc 	.word	0x080003fc

080003e0 <_init>:
 80003e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e2:	bf00      	nop
 80003e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e6:	bc08      	pop	{r3}
 80003e8:	469e      	mov	lr, r3
 80003ea:	4770      	bx	lr

080003ec <_fini>:
 80003ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ee:	bf00      	nop
 80003f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f2:	bc08      	pop	{r3}
 80003f4:	469e      	mov	lr, r3
 80003f6:	4770      	bx	lr
