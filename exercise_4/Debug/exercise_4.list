
exercise_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000029c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000430  08000438  00001438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000430  08000430  00001438  2**0
                  CONTENTS
  4 .ARM          00000000  08000430  08000430  00001438  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000430  08000438  00001438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000430  08000430  00001430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000434  08000434  00001434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001438  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY
 13 .debug_line   00000178  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 000000b3  00000000  00000000  000015e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000055  00000000  00000000  00001693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  00001720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000092  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  000017fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  00001814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000418 	.word	0x08000418

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000418 	.word	0x08000418

080001d4 <enable_timer2_clock>:
#include "definitions.s"
.text
@ Define code
enable_timer2_clock:

	LDR R0, =RCC	             @ Load the base address for the timer
 80001d4:	4866      	ldr	r0, [pc, #408]	@ (8000370 <main+0x4>)
	LDR R1, [R0, APB1ENR] 	     @ Load the peripheral clock control register
 80001d6:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << TIM2EN          @ Store a 1 in bit for the TIM2 enable flag
 80001d8:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, APB1ENR]        @ Enable the timer
 80001dc:	61c1      	str	r1, [r0, #28]
	BX LR                        @ Return
 80001de:	4770      	bx	lr

080001e0 <enable_peripheral_clocks>:
@ Function to enable the clocks for the peripherals we are using (A, C and E)
enable_peripheral_clocks:
	LDR R0, =RCC                 @ Load the address of the RCC address boundary (for enabling the IO clock)
 80001e0:	4863      	ldr	r0, [pc, #396]	@ (8000370 <main+0x4>)
	LDR R1, [R0, #AHBENR]        @ Load the current value of the peripheral clock registers
 80001e2:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << 21 | 1 << 19 | 1 << 17  @ 21st bit is enable GPIOE clock, 19 is GPIOC, 17 is GPIOA clock
 80001e4:	f441 1128 	orr.w	r1, r1, #2752512	@ 0x2a0000
	STR R1, [R0, #AHBENR]        @ Store the modified register back to the submodule
 80001e8:	6141      	str	r1, [r0, #20]
	BX LR                        @ Return
 80001ea:	4770      	bx	lr

080001ec <initialise_discovery_board>:
@ Initialise the discovery board I/O (just outputs: inputs are selected by default)
initialise_discovery_board:
	LDR R0, =GPIOE 	             @ Load the address of the GPIOE register into R0
 80001ec:	4861      	ldr	r0, [pc, #388]	@ (8000374 <main+0x8>)
	LDR R1, =0x5555              @ Load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 80001ee:	f245 5155 	movw	r1, #21845	@ 0x5555
					             @ As 0x5555 = 01010101 01010101
	STRH R1, [R0, #MODER + 2]    @ Store the new register values in the top half word representing
 80001f2:	8041      	strh	r1, [r0, #2]
								 @ The MODER settings for pe8-15
	BX LR                        @ Return from function call
 80001f4:	4770      	bx	lr

080001f6 <trigger_prescaler>:
@ occurs to make the prescaler take effect.
@ you should use a different approach to this !
@ In your code, you should be using the ARR register to
@ set the maximum count for the timer
@ store a value for the prescaler
	LDR R0, =TIM2	             @ Load the base address for the timer
 80001f6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
	LDR R1, =0x1                 @ Make the timer overflow after counting to only 1
 80001fa:	f04f 0101 	mov.w	r1, #1
	STR R1, [R0, TIM_ARR]        @ Set the ARR register
 80001fe:	62c1      	str	r1, [r0, #44]	@ 0x2c
	LDR R8, =0x00
 8000200:	f04f 0800 	mov.w	r8, #0
	STR R8, [R0, TIM_CNT]        @ Reset the clock
 8000204:	f8c0 8024 	str.w	r8, [r0, #36]	@ 0x24
	NOP
 8000208:	bf00      	nop
	NOP
 800020a:	bf00      	nop
	LDR R1, =0xffffffff          @ Set the ARR back to the default value
 800020c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
	STR R1, [R0, TIM_ARR]        @ Set the ARR register
 8000210:	62c1      	str	r1, [r0, #44]	@ 0x2c
	BX LR
 8000212:	4770      	bx	lr

08000214 <trigger_prescaler_partc>:
@ occurs to make the prescaler take effect.
@ you should use a different approach to this !
@ In your code, you should be using the ARR register to
@ set the maximum count for the timer
@ store a value for the prescaler
	LDR R0, =TIM2	             @ Load the base address for the timer
 8000214:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
	LDR R1, =1000000             @ Make the timer overflow after counting to only 1
 8000218:	4957      	ldr	r1, [pc, #348]	@ (8000378 <main+0xc>)
	STR R1, [R0, TIM_ARR]        @ Set the ARR register
 800021a:	62c1      	str	r1, [r0, #44]	@ 0x2c
	LDR R8, =0x00
 800021c:	f04f 0800 	mov.w	r8, #0
	STR R8, [R0, TIM_CNT]        @ Reset the clock
 8000220:	f8c0 8024 	str.w	r8, [r0, #36]	@ 0x24
	NOP
 8000224:	bf00      	nop
	NOP
 8000226:	bf00      	nop
	BX LR
 8000228:	4770      	bx	lr

0800022a <enable_arpe>:

@ The setting of ARPE ensures that the value of ARR can be counted reasonably.
@ Prevent the cycle from not completing due to the second rewrite ARR and start a new timer directly.
enable_arpe:
    LDR R0, =TIM2
 800022a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
    LDR R1, [R0, #TIM_CR1]
 800022e:	6801      	ldr	r1, [r0, #0]
    ORR R1, R1, #(1 << 7 | 1 << 0)  @ bit7: ARPE, bit0: CEN
 8000230:	f041 0181 	orr.w	r1, r1, #129	@ 0x81
    STR R1, [R0, #TIM_CR1]
 8000234:	6001      	str	r1, [r0, #0]
    BX LR
 8000236:	4770      	bx	lr

08000238 <delay_4a>:

.text

delay_4a:
@ The initialization Settings enable and initialize some of the functions on the STM32 board
    BL enable_timer2_clock        	@ Initializes and enables the TIM2
 8000238:	f7ff ffcc 	bl	80001d4 <enable_timer2_clock>
    BL enable_peripheral_clocks   	@ Initializes and peripheral clocks
 800023c:	f7ff ffd0 	bl	80001e0 <enable_peripheral_clocks>
    BL initialise_discovery_board 	@ Initialize the board
 8000240:	f7ff ffd4 	bl	80001ec <initialise_discovery_board>

@ Start the counter running
	LDR R0, =TIM2	              	@ Load the base address for the timer
 8000244:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
	MOV R1, #0b1                  	@ Store a 1 in bit zero for the CEN flag
 8000248:	f04f 0101 	mov.w	r1, #1
	STR R1, [R0, TIM_CR1]         	@ Enable the timer
 800024c:	6001      	str	r1, [r0, #0]

@ Store a value for the prescaler 	@ Use prescale to calculate the count frequency.
@ The counter clock frequency = fck_PSC/(PSC[15:0]+1)——8Mhz/(1+7)=1Mhz.
	LDR R0, =TIM2	              	@ Load the base address for the timer
 800024e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
	MOV R1, #0x07                 	@ Setting and putting a prescaler value 7 in R1
 8000252:	f04f 0107 	mov.w	r1, #7
	STR R1, [R0, TIM_PSC]         	@ Set the prescaler register
 8000256:	6281      	str	r1, [r0, #40]	@ 0x28

@ Setting the trigger_prescaler function
	BL trigger_prescaler
 8000258:	f7ff ffcd 	bl	80001f6 <trigger_prescaler>

0800025c <Delay_Loop_Function>:
@ The main loop logic of the delay equation operates as follows: first, the system
@ sets the delay parameters, then executes the delay. When the system detects the
@ specified delay time, it triggers the LED control. The LED's blinking frequency
@ serves as an indicator of whether the delay function is working correctly.
Delay_Loop_Function:
    BL Delay_Parameter_Setting_function
 800025c:	f000 f806 	bl	800026c <Delay_Parameter_Setting_function>
    BL LED_on
 8000260:	f000 f80e 	bl	8000280 <LED_on>
    BL Delay_Parameter_Setting_function
 8000264:	f000 f802 	bl	800026c <Delay_Parameter_Setting_function>
    BL LED_off
 8000268:	f000 f812 	bl	8000290 <LED_off>

0800026c <Delay_Parameter_Setting_function>:

@ Set delay function
Delay_Parameter_Setting_function:
    LDR R1, =1000000              	@ Load delay value into R1,Set the delay time to 2s
 800026c:	4942      	ldr	r1, [pc, #264]	@ (8000378 <main+0xc>)
    LDR R0, =TIM2
 800026e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
    MOV R2, #0
 8000272:	f04f 0200 	mov.w	r2, #0
    STR R2, [R0,TIM_CNT]          	@ Reset TIM2 counter to 0
 8000276:	6242      	str	r2, [r0, #36]	@ 0x24

08000278 <Delay_Function>:

@ Loop comparison checks the delay time.
Delay_Function:
    LDR R3, [R0,TIM_CNT]          	@ Load current value of TIM2 counter into R3
 8000278:	6a43      	ldr	r3, [r0, #36]	@ 0x24
    CMP R3, R1                    	@ Compare the delay value
 800027a:	428b      	cmp	r3, r1
    BCC Delay_Function            	@ When the current value < Delay value,return to Delay_Function and wait
 800027c:	d3fc      	bcc.n	8000278 <Delay_Function>
    BX LR
 800027e:	4770      	bx	lr

08000280 <LED_on>:


@Set the LEDon function
LED_on:
    LDR R4, =0xFF           	  	@ Turn on all LEDs
 8000280:	f04f 04ff 	mov.w	r4, #255	@ 0xff
    LDR R0, =GPIOE
 8000284:	483b      	ldr	r0, [pc, #236]	@ (8000374 <main+0x8>)
    STR R4, [R0,#ODR + 1]
 8000286:	f8c0 4015 	str.w	r4, [r0, #21]
    BL Delay_Parameter_Setting_function
 800028a:	f7ff ffef 	bl	800026c <Delay_Parameter_Setting_function>
	B LED_off                     	@ Jump to the LED_off function
 800028e:	e7ff      	b.n	8000290 <LED_off>

08000290 <LED_off>:

@Set the LEDoff function
LED_off:
    MOV R4, #0          		  	@ Turn off all LEDs
 8000290:	f04f 0400 	mov.w	r4, #0
    LDR R0, =GPIOE
 8000294:	4837      	ldr	r0, [pc, #220]	@ (8000374 <main+0x8>)
    STR R4, [R0,#ODR + 1]
 8000296:	f8c0 4015 	str.w	r4, [r0, #21]
    BL Delay_Parameter_Setting_function
 800029a:	f7ff ffe7 	bl	800026c <Delay_Parameter_Setting_function>
	B LED_on                      	@ Jump to the LED_on function
 800029e:	e7ef      	b.n	8000280 <LED_on>

080002a0 <delay_4b>:

.text

delay_4b:
@ The initialization Settings enable and initialize some of the functions on the STM32 board
    BL enable_timer2_clock        	@ Initializes and enables the TIM2
 80002a0:	f7ff ff98 	bl	80001d4 <enable_timer2_clock>
    BL enable_peripheral_clocks   	@ Initializes and peripheral clocks
 80002a4:	f7ff ff9c 	bl	80001e0 <enable_peripheral_clocks>
    BL initialise_discovery_board 	@ Initialize the board
 80002a8:	f7ff ffa0 	bl	80001ec <initialise_discovery_board>

@ Start the counter running
	LDR R0, =TIM2	              	@ Load the base address for the timer
 80002ac:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
	MOV R1, #0b1                  	@ Store a 1 in bit zero for the CEN flag
 80002b0:	f04f 0101 	mov.w	r1, #1
	STR R1, [R0, TIM_CR1]         	@ Enable the timer
 80002b4:	6001      	str	r1, [r0, #0]
@ To determine the appropriate prescaler value for setting the counter period, we need to adjust the
@ timer's counting frequency.In the STM32 system, the initial clock frequency is 8 MHz.
@ The counter clock frequency can be calculated using the formula:counter clock frequency =8MHz/(1+prescale).
@ In this case, the required delay period is 0.1 ms. To achieve this, we set the prescaler value to 799,
@ resulting in a counter clock frequency of 10 kHz. Using the formula T=1/f,we can get 1/10kHz = 0.1ms
	LDR R0, =TIM2	              	@ Load the base address for the timer
 80002b6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
	MOV R1, #0x31F                 	@ Setting and putting a prescaler value 799 in R1
 80002ba:	f240 311f 	movw	r1, #799	@ 0x31f
	STR R1, [R0, TIM_PSC]         	@ Set the prescaler register
 80002be:	6281      	str	r1, [r0, #40]	@ 0x28

@ Setting the trigger_prescaler function
	BL trigger_prescaler
 80002c0:	f7ff ff99 	bl	80001f6 <trigger_prescaler>

080002c4 <Delay_Loop_Function_b>:
@ The main loop logic of the delay equation operates as follows: first, the system
@ sets the delay parameters, then executes the delay. When the system detects the
@ specified delay time, it triggers the LED control. The LED's blinking frequency
@ serves as an indicator of whether the delay function is working correctly.
Delay_Loop_Function_b:
    BL Delay_Parameter_Setting_function_b
 80002c4:	f000 f806 	bl	80002d4 <Delay_Parameter_Setting_function_b>
    BL LED_on_b
 80002c8:	f000 f80f 	bl	80002ea <LED_on_b>
    BL Delay_Parameter_Setting_function_b
 80002cc:	f000 f802 	bl	80002d4 <Delay_Parameter_Setting_function_b>
    BL LED_off_b
 80002d0:	f000 f813 	bl	80002fa <LED_off_b>

080002d4 <Delay_Parameter_Setting_function_b>:

@ Set delay function
Delay_Parameter_Setting_function_b:
    LDR R1, =10000              	@ Load delay value into R1,Set the delay time to 1s
 80002d4:	f242 7110 	movw	r1, #10000	@ 0x2710
    LDR R0, =TIM2
 80002d8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
    MOV R2, #0
 80002dc:	f04f 0200 	mov.w	r2, #0
    STR R2, [R0,TIM_CNT]          	@ Reset TIM2 counter to 0
 80002e0:	6242      	str	r2, [r0, #36]	@ 0x24

080002e2 <Delay_Function_b>:

@ Loop comparison checks the delay time.
Delay_Function_b:
    LDR R3, [R0,TIM_CNT]          	@ Load current value of TIM2 counter into R3
 80002e2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
    CMP R3, R1                    	@ Compare the delay value
 80002e4:	428b      	cmp	r3, r1
    BCC Delay_Function_b            	@ When the current value < Delay value,return to Delay_Function and wait
 80002e6:	d3fc      	bcc.n	80002e2 <Delay_Function_b>
    BX LR
 80002e8:	4770      	bx	lr

080002ea <LED_on_b>:



@Set the LEDon function
LED_on_b:
    LDR R4, =0xFF           	  	@ Turn on all LEDs
 80002ea:	f04f 04ff 	mov.w	r4, #255	@ 0xff
    LDR R0, =GPIOE
 80002ee:	4821      	ldr	r0, [pc, #132]	@ (8000374 <main+0x8>)
    STR R4, [R0,#ODR + 1]
 80002f0:	f8c0 4015 	str.w	r4, [r0, #21]
    BL Delay_Parameter_Setting_function_b
 80002f4:	f7ff ffee 	bl	80002d4 <Delay_Parameter_Setting_function_b>
	B LED_off_b                     	@ Jump to the LED_off function
 80002f8:	e7ff      	b.n	80002fa <LED_off_b>

080002fa <LED_off_b>:

@Set the LEDoff function
LED_off_b:
    MOV R4, #0          		  	@ Turn off all LEDs
 80002fa:	f04f 0400 	mov.w	r4, #0
    LDR R0, =GPIOE
 80002fe:	481d      	ldr	r0, [pc, #116]	@ (8000374 <main+0x8>)
    STR R4, [R0,#ODR + 1]
 8000300:	f8c0 4015 	str.w	r4, [r0, #21]
    BL Delay_Parameter_Setting_function_b
 8000304:	f7ff ffe6 	bl	80002d4 <Delay_Parameter_Setting_function_b>
	B LED_on_b                      	@ Jump to the LED_on function
 8000308:	e7ef      	b.n	80002ea <LED_on_b>

0800030a <delay_4c>:

.text

delay_4c:
@ The initialization Settings enable and initialize some of the functions on the STM32 board
    BL enable_timer2_clock        	@ Initializes and enables the TIM2
 800030a:	f7ff ff63 	bl	80001d4 <enable_timer2_clock>
    BL enable_peripheral_clocks   	@ Initializes and peripheral clocks
 800030e:	f7ff ff67 	bl	80001e0 <enable_peripheral_clocks>
    BL initialise_discovery_board 	@ Initialize the board
 8000312:	f7ff ff6b 	bl	80001ec <initialise_discovery_board>

@ To determine the appropriate prescaler value for setting the counter period
	LDR R0, =TIM2	              	@ Load the base address for the timer
 8000316:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
	MOV R1, #0x07                 	@ Setting and putting a prescaler value 7 in R1
 800031a:	f04f 0107 	mov.w	r1, #7
	STR R1, [R0, TIM_PSC]         	@ Set the prescaler register
 800031e:	6281      	str	r1, [r0, #40]	@ 0x28

@ Setting the trigger_prescaler function
	BL trigger_prescaler_partc
 8000320:	f7ff ff78 	bl	8000214 <trigger_prescaler_partc>

@ Main logic function
    BL enable_arpe
 8000324:	f7ff ff81 	bl	800022a <enable_arpe>
    BL delayfunction
 8000328:	f000 f816 	bl	8000358 <delayfunction>
    BL LED_on_c
 800032c:	f000 f804 	bl	8000338 <LED_on_c>
    BL delayfunction
 8000330:	f000 f812 	bl	8000358 <delayfunction>
    BL LED_off_c
 8000334:	f000 f808 	bl	8000348 <LED_off_c>

08000338 <LED_on_c>:

@ Set the LEDon function
LED_on_c:
    LDR R4, =0b11111111           	@ Load bitmask value into R4 and turn on all LEDs
 8000338:	f04f 04ff 	mov.w	r4, #255	@ 0xff
    LDR R0, =GPIOE                	@ Load the address of the GPIOE register into R0
 800033c:	480d      	ldr	r0, [pc, #52]	@ (8000374 <main+0x8>)
    STR R4, [R0, #ODR + 1]        	@ Store this to the second byte of the ODR (bits 8-15)
 800033e:	f8c0 4015 	str.w	r4, [r0, #21]
    BL delayfunction              	@ Return to the delayfunction
 8000342:	f000 f809 	bl	8000358 <delayfunction>
	B LED_off
 8000346:	e7a3      	b.n	8000290 <LED_off>

08000348 <LED_off_c>:

@ Set the LEDoff function
LED_off_c:
    LDR R4, =0b00000000           	@ Load bitmask value into R4 and turn off all LEDs
 8000348:	f04f 0400 	mov.w	r4, #0
    LDR R0, =GPIOE                	@ Load the address of the GPIOE register into R0
 800034c:	4809      	ldr	r0, [pc, #36]	@ (8000374 <main+0x8>)
    STR R4, [R0, #ODR + 1]        	@ Store this to the second byte of the ODR (bits 8-15)
 800034e:	f8c0 4015 	str.w	r4, [r0, #21]
    BL delayfunction              	@ Return to the delayfunction
 8000352:	f000 f801 	bl	8000358 <delayfunction>
	B LED_on
 8000356:	e793      	b.n	8000280 <LED_on>

08000358 <delayfunction>:

@ Delay equation
delayfunction:
    LDR R0, =TIM2                 	@ Loads the base address of the Timer2 to R0
 8000358:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000

0800035c <wait_loop>:
wait_loop:
    LDR R1, [R0, #TIM_SR]         	@ Load the Timer 2 Status Register (TIM_SR) into R1
 800035c:	6901      	ldr	r1, [r0, #16]
    TST R1, #1                    	@ Test if the Update Interrupt Flag (UIF) is set
 800035e:	f011 0f01 	tst.w	r1, #1
    BEQ wait_loop                 	@ Continue to wait
 8000362:	d0fb      	beq.n	800035c <wait_loop>
    MOV R2, #0                    	@ Clear the value of the UIF flag
 8000364:	f04f 0200 	mov.w	r2, #0
    STR R2, [R0, #TIM_SR]
 8000368:	6102      	str	r2, [r0, #16]
    BX LR
 800036a:	4770      	bx	lr

0800036c <main>:

	// Test 4b
	//B delay_4b

	// Test 4c
	B delay_4c
 800036c:	e7cd      	b.n	800030a <delay_4c>
 800036e:	0000      	.short	0x0000
	LDR R0, =RCC	             @ Load the base address for the timer
 8000370:	40021000 	.word	0x40021000
	LDR R0, =GPIOE 	             @ Load the address of the GPIOE register into R0
 8000374:	48001000 	.word	0x48001000
	LDR R1, =1000000             @ Make the timer overflow after counting to only 1
 8000378:	000f4240 	.word	0x000f4240

0800037c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800037c:	480d      	ldr	r0, [pc, #52]	@ (80003b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800037e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000380:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000384:	480c      	ldr	r0, [pc, #48]	@ (80003b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000386:	490d      	ldr	r1, [pc, #52]	@ (80003bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000388:	4a0d      	ldr	r2, [pc, #52]	@ (80003c0 <LoopForever+0xe>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800038c:	e002      	b.n	8000394 <LoopCopyDataInit>

0800038e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000392:	3304      	adds	r3, #4

08000394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000398:	d3f9      	bcc.n	800038e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800039a:	4a0a      	ldr	r2, [pc, #40]	@ (80003c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800039c:	4c0a      	ldr	r4, [pc, #40]	@ (80003c8 <LoopForever+0x16>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a0:	e001      	b.n	80003a6 <LoopFillZerobss>

080003a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a4:	3204      	adds	r2, #4

080003a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a8:	d3fb      	bcc.n	80003a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003aa:	f000 f811 	bl	80003d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ae:	f7ff ffdd 	bl	800036c <main>

080003b2 <LoopForever>:

LoopForever:
  b LoopForever
 80003b2:	e7fe      	b.n	80003b2 <LoopForever>
  ldr   r0, =_estack
 80003b4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80003b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003bc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003c0:	08000438 	.word	0x08000438
  ldr r2, =_sbss
 80003c4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003c8:	2000001c 	.word	0x2000001c

080003cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003cc:	e7fe      	b.n	80003cc <ADC1_2_IRQHandler>
	...

080003d0 <__libc_init_array>:
 80003d0:	b570      	push	{r4, r5, r6, lr}
 80003d2:	4d0d      	ldr	r5, [pc, #52]	@ (8000408 <__libc_init_array+0x38>)
 80003d4:	4c0d      	ldr	r4, [pc, #52]	@ (800040c <__libc_init_array+0x3c>)
 80003d6:	1b64      	subs	r4, r4, r5
 80003d8:	10a4      	asrs	r4, r4, #2
 80003da:	2600      	movs	r6, #0
 80003dc:	42a6      	cmp	r6, r4
 80003de:	d109      	bne.n	80003f4 <__libc_init_array+0x24>
 80003e0:	4d0b      	ldr	r5, [pc, #44]	@ (8000410 <__libc_init_array+0x40>)
 80003e2:	4c0c      	ldr	r4, [pc, #48]	@ (8000414 <__libc_init_array+0x44>)
 80003e4:	f000 f818 	bl	8000418 <_init>
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	10a4      	asrs	r4, r4, #2
 80003ec:	2600      	movs	r6, #0
 80003ee:	42a6      	cmp	r6, r4
 80003f0:	d105      	bne.n	80003fe <__libc_init_array+0x2e>
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f8:	4798      	blx	r3
 80003fa:	3601      	adds	r6, #1
 80003fc:	e7ee      	b.n	80003dc <__libc_init_array+0xc>
 80003fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000402:	4798      	blx	r3
 8000404:	3601      	adds	r6, #1
 8000406:	e7f2      	b.n	80003ee <__libc_init_array+0x1e>
 8000408:	08000430 	.word	0x08000430
 800040c:	08000430 	.word	0x08000430
 8000410:	08000430 	.word	0x08000430
 8000414:	08000434 	.word	0x08000434

08000418 <_init>:
 8000418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041a:	bf00      	nop
 800041c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041e:	bc08      	pop	{r3}
 8000420:	469e      	mov	lr, r3
 8000422:	4770      	bx	lr

08000424 <_fini>:
 8000424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000426:	bf00      	nop
 8000428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042a:	bc08      	pop	{r3}
 800042c:	469e      	mov	lr, r3
 800042e:	4770      	bx	lr
