
parta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000130  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002c4  080002cc  000012cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002c4  080002c4  000012cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080002c4  080002c4  000012cc  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080002c4  080002cc  000012cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002c4  080002c4  000012c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080002c8  080002c8  000012c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000012cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000012cc  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000012cc  2**0
                  CONTENTS, READONLY
 13 .debug_line   000000e2  00000000  00000000  000012fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000079  00000000  00000000  000013de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000054  00000000  00000000  00001457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  000014ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  000014e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000008a  00000000  00000000  00001530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  000015ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  000015d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080002ac 	.word	0x080002ac

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080002ac 	.word	0x080002ac

080001d4 <enable_peripheral_clocks>:

#include "definitions.s"


enable_peripheral_clocks:
	LDR R0, = RCC @ load the address of the RCC address boundary (for enabling the IO clock)
 80001d4:	480c      	ldr	r0, [pc, #48]	@ (8000208 <Set_LED_state+0xc>)
	LDR R1, [R0, #AHBENR]	@ load the current value of the peripheral clock registers
 80001d6:	6941      	ldr	r1, [r0, #20]
	MOV R2, 1 << GPIOA_ENABLE | 1 << GPIOE_ENABLE	@ 21st bit is enable GPIOE clock, 17 is GPIOA clock
 80001d8:	f44f 1208 	mov.w	r2, #2228224	@ 0x220000
	ORR R1, R2	@Set the values of these two clocks on
 80001dc:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, #AHBENR]	@Store the modified register back to the submodule
 80001e0:	6141      	str	r1, [r0, #20]
	BX LR	@return from function call
 80001e2:	4770      	bx	lr

080001e4 <initialise_discovery_board>:


@ initialise the discovery board I/O (just outputs: inputs are selected by default)
initialise_discovery_board:
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80001e4:	4809      	ldr	r0, [pc, #36]	@ (800020c <Set_LED_state+0x10>)
	LDRH R1, [R0, #MODER + 2]	@Load the high half-word in the MODER Register
 80001e6:	8841      	ldrh	r1, [r0, #2]
	LDR R2, =0x5555		@Load the binary value of 01 ( OUTPUT ) for each port up to 2 bytes as 0x5555 = 0x0101 0101 0101 0101
 80001e8:	f245 5255 	movw	r2, #21845	@ 0x5555
	STRH R2, [R0, #MODER + 2]	@Store the new register values in the top half word presenting
 80001ec:	8042      	strh	r2, [r0, #2]

	BX LR @ return from function call
 80001ee:	4770      	bx	lr

080001f0 <main>:

@ this is the entry function called from the startup file
main:

	@ Branch with link to set the clocks for the I/O and UART
	BL enable_peripheral_clocks
 80001f0:	f7ff fff0 	bl	80001d4 <enable_peripheral_clocks>

	@ Once the clocks are started, need to initialise the discovery board I/O
	BL initialise_discovery_board
 80001f4:	f7ff fff6 	bl	80001e4 <initialise_discovery_board>

	BL Set_LED_state
 80001f8:	f000 f800 	bl	80001fc <Set_LED_state>

080001fc <Set_LED_state>:



Set_LED_state:
	LDR R0, =GPIOE	@Load the address of the GPIOE register into R0
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <Set_LED_state+0x10>)
	LDRB R1, =START @ load a pattern for the set of LEDs (every second one is on)
 80001fe:	f04f 01aa 	mov.w	r1, #170	@ 0xaa
	STRB R1, [R0, #ODR + 1]
 8000202:	7541      	strb	r1, [r0, #21]

	BX LR
 8000204:	4770      	bx	lr
 8000206:	0000      	.short	0x0000
	LDR R0, = RCC @ load the address of the RCC address boundary (for enabling the IO clock)
 8000208:	40021000 	.word	0x40021000
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 800020c:	48001000 	.word	0x48001000

08000210 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000210:	480d      	ldr	r0, [pc, #52]	@ (8000248 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000212:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000214:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000218:	480c      	ldr	r0, [pc, #48]	@ (800024c <LoopForever+0x6>)
  ldr r1, =_edata
 800021a:	490d      	ldr	r1, [pc, #52]	@ (8000250 <LoopForever+0xa>)
  ldr r2, =_sidata
 800021c:	4a0d      	ldr	r2, [pc, #52]	@ (8000254 <LoopForever+0xe>)
  movs r3, #0
 800021e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000220:	e002      	b.n	8000228 <LoopCopyDataInit>

08000222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000226:	3304      	adds	r3, #4

08000228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800022a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800022c:	d3f9      	bcc.n	8000222 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800022e:	4a0a      	ldr	r2, [pc, #40]	@ (8000258 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000230:	4c0a      	ldr	r4, [pc, #40]	@ (800025c <LoopForever+0x16>)
  movs r3, #0
 8000232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000234:	e001      	b.n	800023a <LoopFillZerobss>

08000236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000238:	3204      	adds	r2, #4

0800023a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800023a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800023c:	d3fb      	bcc.n	8000236 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800023e:	f000 f811 	bl	8000264 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000242:	f7ff ffd5 	bl	80001f0 <main>

08000246 <LoopForever>:

LoopForever:
  b LoopForever
 8000246:	e7fe      	b.n	8000246 <LoopForever>
  ldr   r0, =_estack
 8000248:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800024c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000250:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000254:	080002cc 	.word	0x080002cc
  ldr r2, =_sbss
 8000258:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800025c:	2000001c 	.word	0x2000001c

08000260 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000260:	e7fe      	b.n	8000260 <ADC1_2_IRQHandler>
	...

08000264 <__libc_init_array>:
 8000264:	b570      	push	{r4, r5, r6, lr}
 8000266:	4d0d      	ldr	r5, [pc, #52]	@ (800029c <__libc_init_array+0x38>)
 8000268:	4c0d      	ldr	r4, [pc, #52]	@ (80002a0 <__libc_init_array+0x3c>)
 800026a:	1b64      	subs	r4, r4, r5
 800026c:	10a4      	asrs	r4, r4, #2
 800026e:	2600      	movs	r6, #0
 8000270:	42a6      	cmp	r6, r4
 8000272:	d109      	bne.n	8000288 <__libc_init_array+0x24>
 8000274:	4d0b      	ldr	r5, [pc, #44]	@ (80002a4 <__libc_init_array+0x40>)
 8000276:	4c0c      	ldr	r4, [pc, #48]	@ (80002a8 <__libc_init_array+0x44>)
 8000278:	f000 f818 	bl	80002ac <_init>
 800027c:	1b64      	subs	r4, r4, r5
 800027e:	10a4      	asrs	r4, r4, #2
 8000280:	2600      	movs	r6, #0
 8000282:	42a6      	cmp	r6, r4
 8000284:	d105      	bne.n	8000292 <__libc_init_array+0x2e>
 8000286:	bd70      	pop	{r4, r5, r6, pc}
 8000288:	f855 3b04 	ldr.w	r3, [r5], #4
 800028c:	4798      	blx	r3
 800028e:	3601      	adds	r6, #1
 8000290:	e7ee      	b.n	8000270 <__libc_init_array+0xc>
 8000292:	f855 3b04 	ldr.w	r3, [r5], #4
 8000296:	4798      	blx	r3
 8000298:	3601      	adds	r6, #1
 800029a:	e7f2      	b.n	8000282 <__libc_init_array+0x1e>
 800029c:	080002c4 	.word	0x080002c4
 80002a0:	080002c4 	.word	0x080002c4
 80002a4:	080002c4 	.word	0x080002c4
 80002a8:	080002c8 	.word	0x080002c8

080002ac <_init>:
 80002ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ae:	bf00      	nop
 80002b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002b2:	bc08      	pop	{r3}
 80002b4:	469e      	mov	lr, r3
 80002b6:	4770      	bx	lr

080002b8 <_fini>:
 80002b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ba:	bf00      	nop
 80002bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002be:	bc08      	pop	{r3}
 80002c0:	469e      	mov	lr, r3
 80002c2:	4770      	bx	lr
