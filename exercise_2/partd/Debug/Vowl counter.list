
Vowl counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001cc  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000360  08000360  00002018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000360  08000360  00002018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000360  08000360  00002018  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000360  08000360  00002018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000360  08000360  00001360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000364  08000364  00001364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08000368  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002018  2**0
                  CONTENTS
 10 .bss          0000001c  20000018  20000018  00002018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000034  20000034  00002018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY
 13 .debug_line   00000125  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000007f  00000000  00000000  0000216d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000055  00000000  00000000  000021ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  00002241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  00002280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000093  00000000  00000000  000022c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  0000235b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  00002374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000348 	.word	0x08000348

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	08000348 	.word	0x08000348

080001d4 <enable_peripheral_clocks>:

#include "definitions.s"


enable_peripheral_clocks:
	LDR R0, = RCC @ load the address of the RCC address boundary (for enabling the IO clock)
 80001d4:	4832      	ldr	r0, [pc, #200]	@ (80002a0 <Set_Cons_LED+0x6>)
	LDR R1, [R0, #AHBENR]	@ load the current value of the peripheral clock registers
 80001d6:	6941      	ldr	r1, [r0, #20]
	MOV R2, 1 << GPIOA_ENABLE | 1 << GPIOE_ENABLE	@ 21st bit is enable GPIOE clock, 17 is GPIOA clock
 80001d8:	f44f 1208 	mov.w	r2, #2228224	@ 0x220000
	ORR R1, R2	@Set the values of these two clocks on
 80001dc:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, #AHBENR]	@Store the modified register back to the submodule
 80001e0:	6141      	str	r1, [r0, #20]
	BX LR	@return from function call
 80001e2:	4770      	bx	lr

080001e4 <Set_LED_to_output>:


@ initialise the discovery board I/O (just outputs: inputs are selected by default)
Set_LED_to_output:
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80001e4:	482f      	ldr	r0, [pc, #188]	@ (80002a4 <Set_Cons_LED+0xa>)
	LDRH R1, [R0, #MODER + 2]	@Load the high half-word in the MODER Register
 80001e6:	8841      	ldrh	r1, [r0, #2]
	LDR R2, =0x5555		@Load the binary value of 01 ( OUTPUT ) for each port up to 2 bytes as 0x5555 = 0x0101 0101 0101 0101
 80001e8:	f245 5255 	movw	r2, #21845	@ 0x5555
	STRH R2, [R0, #MODER + 2]	@Store the new register values in the top half word presenting
 80001ec:	8042      	strh	r2, [r0, #2]

	BX LR @ return from function call
 80001ee:	4770      	bx	lr

080001f0 <Set_button_input>:

Set_button_input:
	LDR R0, = GPIOA
 80001f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	LDRB R1, [R0, #MODER]
 80001f4:	7801      	ldrb	r1, [r0, #0]
	AND R1, #0b11111100
 80001f6:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
	STRB R1, [R0, #MODER]
 80001fa:	7001      	strb	r1, [r0, #0]
	BX LR
 80001fc:	4770      	bx	lr

080001fe <main>:

.text

@ this is the entry function called from the startup file
main:
	BL enable_peripheral_clocks
 80001fe:	f7ff ffe9 	bl	80001d4 <enable_peripheral_clocks>
	BL Set_LED_to_output
 8000202:	f7ff ffef 	bl	80001e4 <Set_LED_to_output>
	BL Set_button_input
 8000206:	f7ff fff3 	bl	80001f0 <Set_button_input>

	LDR R0, =string
 800020a:	4827      	ldr	r0, [pc, #156]	@ (80002a8 <Set_Cons_LED+0xe>)
	LDR R1, =0b0 //Letters
 800020c:	f04f 0100 	mov.w	r1, #0
	LDR R3, =0b0 //vowels
 8000210:	f04f 0300 	mov.w	r3, #0
	LDR R5, =0b0 //Switch Vowel/cons
 8000214:	f04f 0500 	mov.w	r5, #0

08000218 <count_letters>:


count_letters:
	LDRB R2, [R0], #1    // After loading byte pointer is incremented by 1
 8000218:	f810 2b01 	ldrb.w	r2, [r0], #1
    CMP R2, #0           // Check if reached the end of the string
 800021c:	2a00      	cmp	r2, #0
    BEQ continue
 800021e:	d002      	beq.n	8000226 <continue>
    ADD R1, #0b1
 8000220:	f101 0101 	add.w	r1, r1, #1
    B count_letters
 8000224:	e7f8      	b.n	8000218 <count_letters>

08000226 <continue>:

	continue:
    	LDR R0, =string
 8000226:	4820      	ldr	r0, [pc, #128]	@ (80002a8 <Set_Cons_LED+0xe>)
    	B lowercase
 8000228:	e7ff      	b.n	800022a <lowercase>

0800022a <lowercase>:

    lowercase:
        LDRB R4, [R0], #1    // After loading byte pointer is incremented by 1
 800022a:	f810 4b01 	ldrb.w	r4, [r0], #1
        CMP R4, #0           // Check if reached the end of the string
 800022e:	2c00      	cmp	r4, #0
        BEQ end_lowercase
 8000230:	d009      	beq.n	8000246 <end_lowercase>
        CMP R4, #'A'
 8000232:	2c41      	cmp	r4, #65	@ 0x41
        BLT lowercase       // If less than 'A', it's not an uppercase letter
 8000234:	dbf9      	blt.n	800022a <lowercase>
        CMP R4, #'Z'
 8000236:	2c5a      	cmp	r4, #90	@ 0x5a
        BGT lowercase       // If greater than 'Z', it's not an uppercase letter
 8000238:	dcf7      	bgt.n	800022a <lowercase>
        ADD R4, #32
 800023a:	f104 0420 	add.w	r4, r4, #32
        SUB R0, #1     // Convert to lowercase by adding 32 (as shown in the ASCII table this converts to lowercase)
 800023e:	f1a0 0001 	sub.w	r0, r0, #1
        STRB R4, [R0]   // Store the modified character at the point it was found
 8000242:	7004      	strb	r4, [r0, #0]
        B lowercase
 8000244:	e7f1      	b.n	800022a <lowercase>

08000246 <end_lowercase>:

	end_lowercase:
		LDR R0, =string
 8000246:	4818      	ldr	r0, [pc, #96]	@ (80002a8 <Set_Cons_LED+0xe>)
    	B count_vowels
 8000248:	e7ff      	b.n	800024a <count_vowels>

0800024a <count_vowels>:

    count_vowels:
    	LDRB R2, [R0], #1
 800024a:	f810 2b01 	ldrb.w	r2, [r0], #1
    	CMP R2, 'e'
 800024e:	2a65      	cmp	r2, #101	@ 0x65
    	BEQ add_vowel
 8000250:	d00a      	beq.n	8000268 <add_vowel>
    	CMP R2, 'i'
 8000252:	2a69      	cmp	r2, #105	@ 0x69
    	BEQ add_vowel
 8000254:	d008      	beq.n	8000268 <add_vowel>
    	CMP R2, 'o'
 8000256:	2a6f      	cmp	r2, #111	@ 0x6f
    	BEQ add_vowel
 8000258:	d006      	beq.n	8000268 <add_vowel>
    	CMP R2, 'u'
 800025a:	2a75      	cmp	r2, #117	@ 0x75
    	BEQ add_vowel
 800025c:	d004      	beq.n	8000268 <add_vowel>
    	CMP R2, 'a'
 800025e:	2a61      	cmp	r2, #97	@ 0x61
    	BEQ add_vowel
 8000260:	d002      	beq.n	8000268 <add_vowel>
    	CMP R2, #0
 8000262:	2a00      	cmp	r2, #0
    	BEQ end
 8000264:	d003      	beq.n	800026e <end>
    	B count_vowels
 8000266:	e7f0      	b.n	800024a <count_vowels>

08000268 <add_vowel>:

    add_vowel:
    	ADD R3, #0b1
 8000268:	f103 0301 	add.w	r3, r3, #1
    	B count_vowels
 800026c:	e7ed      	b.n	800024a <count_vowels>

0800026e <end>:
    end:
    	SUB R1, R3
 800026e:	eba1 0103 	sub.w	r1, r1, r3
    	B Set_Vowel_LED
 8000272:	e00f      	b.n	8000294 <Set_Vowel_LED>

08000274 <button_press>:

    button_press:
	LDR R0, = GPIOA
 8000274:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	LDRB R4, [R0, #IDR]
 8000278:	7c04      	ldrb	r4, [r0, #16]
	TST R4, #0x01
 800027a:	f014 0f01 	tst.w	r4, #1
	BEQ button_press
 800027e:	d0f9      	beq.n	8000274 <button_press>

08000280 <wait>:

	wait:
	LDR R4, [R0, #IDR]
 8000280:	6904      	ldr	r4, [r0, #16]
	TST R4, #0x1
 8000282:	f014 0f01 	tst.w	r4, #1
	BNE wait
 8000286:	d1fb      	bne.n	8000280 <wait>

08000288 <toggle>:

	toggle:
	EOR R5, #0b1
 8000288:	f085 0501 	eor.w	r5, r5, #1
	CMP R5, #0b0
 800028c:	2d00      	cmp	r5, #0
	BEQ Set_Vowel_LED
 800028e:	d001      	beq.n	8000294 <Set_Vowel_LED>
	CMP R5, #0b1
 8000290:	2d01      	cmp	r5, #1
	BEQ Set_Cons_LED
 8000292:	d002      	beq.n	800029a <Set_Cons_LED>

08000294 <Set_Vowel_LED>:

    Set_Vowel_LED:
	LDR R0, =GPIOE	@Load the address of the GPIOE register into R0
 8000294:	4803      	ldr	r0, [pc, #12]	@ (80002a4 <Set_Cons_LED+0xa>)
	STRB R3, [R0, #ODR + 1]
 8000296:	7543      	strb	r3, [r0, #21]
	B button_press
 8000298:	e7ec      	b.n	8000274 <button_press>

0800029a <Set_Cons_LED>:

	Set_Cons_LED:
	LDR R0, =GPIOE	@Load the address of the GPIOE register into R0
 800029a:	4802      	ldr	r0, [pc, #8]	@ (80002a4 <Set_Cons_LED+0xa>)
	STRB R1, [R0, #ODR + 1]
 800029c:	7541      	strb	r1, [r0, #21]
	B button_press
 800029e:	e7e9      	b.n	8000274 <button_press>
	LDR R0, = RCC @ load the address of the RCC address boundary (for enabling the IO clock)
 80002a0:	40021000 	.word	0x40021000
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80002a4:	48001000 	.word	0x48001000
	LDR R0, =string
 80002a8:	20000000 	.word	0x20000000

080002ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002ac:	480d      	ldr	r0, [pc, #52]	@ (80002e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b4:	480c      	ldr	r0, [pc, #48]	@ (80002e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b6:	490d      	ldr	r1, [pc, #52]	@ (80002ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b8:	4a0d      	ldr	r2, [pc, #52]	@ (80002f0 <LoopForever+0xe>)
  movs r3, #0
 80002ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002bc:	e002      	b.n	80002c4 <LoopCopyDataInit>

080002be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c2:	3304      	adds	r3, #4

080002c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c8:	d3f9      	bcc.n	80002be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ca:	4a0a      	ldr	r2, [pc, #40]	@ (80002f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002cc:	4c0a      	ldr	r4, [pc, #40]	@ (80002f8 <LoopForever+0x16>)
  movs r3, #0
 80002ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d0:	e001      	b.n	80002d6 <LoopFillZerobss>

080002d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d4:	3204      	adds	r2, #4

080002d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d8:	d3fb      	bcc.n	80002d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002da:	f000 f811 	bl	8000300 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002de:	f7ff ff8e 	bl	80001fe <main>

080002e2 <LoopForever>:

LoopForever:
  b LoopForever
 80002e2:	e7fe      	b.n	80002e2 <LoopForever>
  ldr   r0, =_estack
 80002e4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80002e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002ec:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80002f0:	08000368 	.word	0x08000368
  ldr r2, =_sbss
 80002f4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80002f8:	20000034 	.word	0x20000034

080002fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002fc:	e7fe      	b.n	80002fc <ADC1_2_IRQHandler>
	...

08000300 <__libc_init_array>:
 8000300:	b570      	push	{r4, r5, r6, lr}
 8000302:	4d0d      	ldr	r5, [pc, #52]	@ (8000338 <__libc_init_array+0x38>)
 8000304:	4c0d      	ldr	r4, [pc, #52]	@ (800033c <__libc_init_array+0x3c>)
 8000306:	1b64      	subs	r4, r4, r5
 8000308:	10a4      	asrs	r4, r4, #2
 800030a:	2600      	movs	r6, #0
 800030c:	42a6      	cmp	r6, r4
 800030e:	d109      	bne.n	8000324 <__libc_init_array+0x24>
 8000310:	4d0b      	ldr	r5, [pc, #44]	@ (8000340 <__libc_init_array+0x40>)
 8000312:	4c0c      	ldr	r4, [pc, #48]	@ (8000344 <__libc_init_array+0x44>)
 8000314:	f000 f818 	bl	8000348 <_init>
 8000318:	1b64      	subs	r4, r4, r5
 800031a:	10a4      	asrs	r4, r4, #2
 800031c:	2600      	movs	r6, #0
 800031e:	42a6      	cmp	r6, r4
 8000320:	d105      	bne.n	800032e <__libc_init_array+0x2e>
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f855 3b04 	ldr.w	r3, [r5], #4
 8000328:	4798      	blx	r3
 800032a:	3601      	adds	r6, #1
 800032c:	e7ee      	b.n	800030c <__libc_init_array+0xc>
 800032e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000332:	4798      	blx	r3
 8000334:	3601      	adds	r6, #1
 8000336:	e7f2      	b.n	800031e <__libc_init_array+0x1e>
 8000338:	08000360 	.word	0x08000360
 800033c:	08000360 	.word	0x08000360
 8000340:	08000360 	.word	0x08000360
 8000344:	08000364 	.word	0x08000364

08000348 <_init>:
 8000348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034a:	bf00      	nop
 800034c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034e:	bc08      	pop	{r3}
 8000350:	469e      	mov	lr, r3
 8000352:	4770      	bx	lr

08000354 <_fini>:
 8000354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000356:	bf00      	nop
 8000358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035a:	bc08      	pop	{r3}
 800035c:	469e      	mov	lr, r3
 800035e:	4770      	bx	lr
