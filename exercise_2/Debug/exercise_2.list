
exercise_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000268  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003fc  080003fc  00002018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003fc  080003fc  00002018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080003fc  080003fc  00002018  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080003fc  080003fc  00002018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003fc  080003fc  000013fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000400  08000400  00001400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08000404  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002018  2**0
                  CONTENTS
 10 .bss          0000001c  20000018  20000018  00002018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000034  20000034  00002018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY
 13 .debug_line   00000188  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 000000c8  00000000  00000000  000021d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000055  00000000  00000000  00002298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  000022ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  00002328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000096  00000000  00000000  00002370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  00002406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  00002420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003e4 	.word	0x080003e4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	080003e4 	.word	0x080003e4

080001d4 <enable_peripheral_clocks>:

#include "definitions.s"


enable_peripheral_clocks:
	LDR R0, = RCC @ load the address of the RCC address boundary (for enabling the IO clock)
 80001d4:	4858      	ldr	r0, [pc, #352]	@ (8000338 <main+0x10>)
	LDR R1, [R0, #AHBENR]	@ load the current value of the peripheral clock registers
 80001d6:	6941      	ldr	r1, [r0, #20]
	MOV R2, 1 << GPIOA_ENABLE | 1 << GPIOE_ENABLE	@ 21st bit is enable GPIOE clock, 17 is GPIOA clock
 80001d8:	f44f 1208 	mov.w	r2, #2228224	@ 0x220000
	ORR R1, R2	@Set the values of these two clocks on
 80001dc:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, #AHBENR]	@Store the modified register back to the submodule
 80001e0:	6141      	str	r1, [r0, #20]
	BX LR	@return from function call
 80001e2:	4770      	bx	lr

080001e4 <Set_LED_to_output>:


@ initialise the discovery board I/O (just outputs: inputs are selected by default)
Set_LED_to_output:
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80001e4:	4855      	ldr	r0, [pc, #340]	@ (800033c <main+0x14>)
	LDRH R1, [R0, #MODER + 2]	@Load the high half-word in the MODER Register
 80001e6:	8841      	ldrh	r1, [r0, #2]
	LDR R2, =0x5555		@Load the binary value of 01 ( OUTPUT ) for each port up to 2 bytes as 0x5555 = 0x0101 0101 0101 0101
 80001e8:	f245 5255 	movw	r2, #21845	@ 0x5555
	STRH R2, [R0, #MODER + 2]	@Store the new register values in the top half word presenting
 80001ec:	8042      	strh	r2, [r0, #2]

	BX LR @ return from function call
 80001ee:	4770      	bx	lr

080001f0 <Set_button_input>:

Set_button_input:
	LDR R0, = GPIOA
 80001f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	LDRB R1, [R0, #MODER]
 80001f4:	7801      	ldrb	r1, [r0, #0]
	AND R1, #0b11111100
 80001f6:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
	STRB R1, [R0, #MODER]
 80001fa:	7001      	strb	r1, [r0, #0]
	BX LR
 80001fc:	4770      	bx	lr

080001fe <Set_LED_state>:

#include "definitions.s"

.text
Set_LED_state:
	LDR R0, =GPIOE	            @ Load the address of the GPIOE register into R0
 80001fe:	484f      	ldr	r0, [pc, #316]	@ (800033c <main+0x14>)
	LDRB R1, =START 		    @ load a pattern for the set of LEDs (every second one is on)
 8000200:	f04f 01aa 	mov.w	r1, #170	@ 0xaa
	STRB R1, [R0, #ODR + 1]     @ ODR GPIO Output register
 8000204:	7541      	strb	r1, [r0, #21]

	BX LR
 8000206:	4770      	bx	lr

08000208 <entry_2b>:

#include "definitions.s"

.text
entry_2b:
	LDR R4, =0b00000000 @ Clear bitmask
 8000208:	f04f 0400 	mov.w	r4, #0

0800020c <program_loop_2b>:
	
program_loop_2b:
	LDR R0, =GPIOE		@Load the address of the GPIOE register into R0
 800020c:	484b      	ldr	r0, [pc, #300]	@ (800033c <main+0x14>)
	STRB R4, [R0, #ODR + 1]		@Store this to the second byte of the ODR (bits 8 - 15)
 800020e:	7544      	strb	r4, [r0, #21]

	LDR R0, =GPIOA		@Setup port for input as button
 8000210:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	LDR R1, [R0, IDR]	@Load the byte from input data register to port A
 8000214:	6901      	ldr	r1, [r0, #16]

	@Check if button is pressed
	TST R1, #1			@check the state of button
 8000216:	f011 0f01 	tst.w	r1, #1
	BEQ program_loop_2b
 800021a:	d0f7      	beq.n	800020c <program_loop_2b>

0800021c <pressed>:

pressed:
	LDR R1, [R0, IDR]	@Load the byte from input data register to port A
 800021c:	6901      	ldr	r1, [r0, #16]
	TST R1, #1			@Check the state of button
 800021e:	f011 0f01 	tst.w	r1, #1
	BNE pressed
 8000222:	d1fb      	bne.n	800021c <pressed>

08000224 <full_on>:

full_on:
	@Check if all LEDs are on

	CMP R4, #0b11111111	@full-on bitmask
 8000224:	2cff      	cmp	r4, #255	@ 0xff
	BEQ reset
 8000226:	d004      	beq.n	8000232 <reset>

08000228 <turn_on_LED>:

turn_on_LED:
	@Increment
	LSL R4, R4, #1		@Left shift by 1
 8000228:	ea4f 0444 	mov.w	r4, r4, lsl #1
	ORR R4, R4, #1		@Set last bit to 1
 800022c:	f044 0401 	orr.w	r4, r4, #1

	B program_loop_2b	@return to program_loop
 8000230:	e7ec      	b.n	800020c <program_loop_2b>

08000232 <reset>:

reset:
	MOV R4, #0		@Change bitmask to all off
 8000232:	f04f 0400 	mov.w	r4, #0
	B program_loop_2b
 8000236:	e7e9      	b.n	800020c <program_loop_2b>

08000238 <set_led_state>:
.text
// Sets the LEDs from the bitmask stored in R3
// Bitmask is anticlockwise from West LED
set_led_state:
	// Replace GPIOE ODR with R3 bitmask
	LDR R1, =GPIOE
 8000238:	4940      	ldr	r1, [pc, #256]	@ (800033c <main+0x14>)
	STRB R3, [R1, #ODR + 1]
 800023a:	754b      	strb	r3, [r1, #21]

	BX LR
 800023c:	4770      	bx	lr

0800023e <start_user_led_ripple>:

start_user_led_ripple:
	LDR R3, =initial_led_state
 800023e:	4b40      	ldr	r3, [pc, #256]	@ (8000340 <main+0x18>)
	LDR R4, =0x1
 8000240:	f04f 0401 	mov.w	r4, #1

08000244 <user_led_ripple>:

// LEDs count up on button presses until they all light up
// They then count down until they are all off
user_led_ripple:
	// Await button press
	LDR R0, =GPIOA
 8000244:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	LDR R1, [R0, #IDR]
 8000248:	6901      	ldr	r1, [r0, #16]
	TST R1, #0x1
 800024a:	f011 0f01 	tst.w	r1, #1
	BEQ user_led_ripple
 800024e:	d0f9      	beq.n	8000244 <user_led_ripple>

08000250 <wait_for_button_release>:

	// Await button release
	wait_for_button_release:
	LDR R1, [R0, #IDR]
 8000250:	6901      	ldr	r1, [r0, #16]
	TST R1, #0x1
 8000252:	f011 0f01 	tst.w	r1, #1
	BNE wait_for_button_release
 8000256:	d1fb      	bne.n	8000250 <wait_for_button_release>

	// Shift LED bitmask and perform an OR with current state
	LSL R3, R3, #0x1
 8000258:	ea4f 0343 	mov.w	r3, r3, lsl #1
	ORR R3, R3, R4
 800025c:	ea43 0304 	orr.w	r3, r3, r4

08000260 <check_state>:

	// If all LEDs are on/off change state
	check_state:
	AND R3, R3, #0b11111111   // Clear bits left-shifted past bit 8
 8000260:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
	CMP R3, #0b00000000
 8000264:	2b00      	cmp	r3, #0
	BEQ state_switch_increasing
 8000266:	d002      	beq.n	800026e <state_switch_increasing>
	CMP R3, #0b11111111
 8000268:	2bff      	cmp	r3, #255	@ 0xff
	BEQ state_switch_depleting
 800026a:	d003      	beq.n	8000274 <state_switch_depleting>
	B state_endif
 800026c:	e005      	b.n	800027a <state_endif>

0800026e <state_switch_increasing>:

	state_switch_increasing:  // Increasing state
	MOV R4, #0x1
 800026e:	f04f 0401 	mov.w	r4, #1
	B state_endif
 8000272:	e002      	b.n	800027a <state_endif>

08000274 <state_switch_depleting>:

	state_switch_depleting:   // Depleting state
	MOV R4, #0x0
 8000274:	f04f 0400 	mov.w	r4, #0
	B state_endif
 8000278:	e7ff      	b.n	800027a <state_endif>

0800027a <state_endif>:

	state_endif:

	// Set LEDs and loop
	BL set_led_state
 800027a:	f7ff ffdd 	bl	8000238 <set_led_state>
	B user_led_ripple
 800027e:	e7e1      	b.n	8000244 <user_led_ripple>

08000280 <Vowels>:

.data

.text
Vowels:
	LDR R1, =0b0 //Count Letters
 8000280:	f04f 0100 	mov.w	r1, #0
	LDR R3, =0b0 //Count vowels
 8000284:	f04f 0300 	mov.w	r3, #0
	LDR R5, =0b0 //Switch Vowel/Cons
 8000288:	f04f 0500 	mov.w	r5, #0

0800028c <count_letters>:

count_letters:
	LDRB R2, [R0], #1    // After loading byte pointer is incremented by 1
 800028c:	f810 2b01 	ldrb.w	r2, [r0], #1
    CMP R2, #0           // Check if reached the end of the string
 8000290:	2a00      	cmp	r2, #0
    BEQ continue
 8000292:	d00c      	beq.n	80002ae <continue>
	B Checkif_letter
 8000294:	e7ff      	b.n	8000296 <Checkif_letter>

08000296 <Checkif_letter>:

Checkif_letter:
//If character is less than 'A' it is not a letter
	CMP   R2, #'A'
 8000296:	2a41      	cmp	r2, #65	@ 0x41
    BLT count_letters
 8000298:	dbf8      	blt.n	800028c <count_letters>
//If character is greater than 'Z' could not be a letter
    CMP   R2, #'Z'
 800029a:	2a5a      	cmp	r2, #90	@ 0x5a
    BGT Check_lowercase
 800029c:	dcff      	bgt.n	800029e <Check_lowercase>

0800029e <Check_lowercase>:

Check_lowercase:
//If character is less than 'a' and greater than 'Z' it is not a letter
	CMP R2, #'a'
 800029e:	2a61      	cmp	r2, #97	@ 0x61
	BLT count_letters
 80002a0:	dbf4      	blt.n	800028c <count_letters>
//If character is greater than 'z' it is not a letter
	CMP R2, #'z'
 80002a2:	2a7a      	cmp	r2, #122	@ 0x7a
	BGT count_letters
 80002a4:	dcf2      	bgt.n	800028c <count_letters>
	B Add_letter
 80002a6:	e7ff      	b.n	80002a8 <Add_letter>

080002a8 <Add_letter>:

Add_letter:
	ADD R1, #0b1        // Add 1 to the letters counter
 80002a8:	f101 0101 	add.w	r1, r1, #1
	B count_letters
 80002ac:	e7ee      	b.n	800028c <count_letters>

080002ae <continue>:

	continue:
    	LDR R0, =test_string // Reload the string from the start
 80002ae:	4825      	ldr	r0, [pc, #148]	@ (8000344 <main+0x1c>)
    	B lowercase
 80002b0:	e7ff      	b.n	80002b2 <lowercase>

080002b2 <lowercase>:

    lowercase:
        LDRB R4, [R0], #1    // After loading byte pointer is incremented by 1
 80002b2:	f810 4b01 	ldrb.w	r4, [r0], #1
        CMP R4, #0           // Check if reached the end of the string
 80002b6:	2c00      	cmp	r4, #0
        BEQ end_lowercase
 80002b8:	d009      	beq.n	80002ce <end_lowercase>
       // If less than 'A', it's not an uppercase letter
        CMP R4, #'A'
 80002ba:	2c41      	cmp	r4, #65	@ 0x41
        BLT lowercase
 80002bc:	dbf9      	blt.n	80002b2 <lowercase>
        // If greater than 'Z', it's not an uppercase letter
        CMP R4, #'Z'
 80002be:	2c5a      	cmp	r4, #90	@ 0x5a
        BGT lowercase
 80002c0:	dcf7      	bgt.n	80002b2 <lowercase>
        ADD R4, #32		// Convert to lowercase by adding 32 (as shown in the ASCII table this converts to lowercase)
 80002c2:	f104 0420 	add.w	r4, r4, #32
        SUB R0, #1
 80002c6:	f1a0 0001 	sub.w	r0, r0, #1
        STRB R4, [R0]   // Store the modified character at the point it was found
 80002ca:	7004      	strb	r4, [r0, #0]
        B lowercase
 80002cc:	e7f1      	b.n	80002b2 <lowercase>

080002ce <end_lowercase>:

	end_lowercase:
		LDR R0, =test_string //Reload the string from the start
 80002ce:	481d      	ldr	r0, [pc, #116]	@ (8000344 <main+0x1c>)
    	B count_vowels
 80002d0:	e7ff      	b.n	80002d2 <count_vowels>

080002d2 <count_vowels>:

    count_vowels:
    	LDRB R2, [R0], #1	// After loading byte pointer is incremented by 1
 80002d2:	f810 2b01 	ldrb.w	r2, [r0], #1
    	//Check if the loaded byte is equal to a vowel, if so add 1 to R3 (vowel counter)
    	CMP R2, 'e'
 80002d6:	2a65      	cmp	r2, #101	@ 0x65
    	BEQ add_vowel
 80002d8:	d00a      	beq.n	80002f0 <add_vowel>
    	CMP R2, 'i'
 80002da:	2a69      	cmp	r2, #105	@ 0x69
    	BEQ add_vowel
 80002dc:	d008      	beq.n	80002f0 <add_vowel>
    	CMP R2, 'o'
 80002de:	2a6f      	cmp	r2, #111	@ 0x6f
    	BEQ add_vowel
 80002e0:	d006      	beq.n	80002f0 <add_vowel>
    	CMP R2, 'u'
 80002e2:	2a75      	cmp	r2, #117	@ 0x75
    	BEQ add_vowel
 80002e4:	d004      	beq.n	80002f0 <add_vowel>
    	CMP R2, 'a'
 80002e6:	2a61      	cmp	r2, #97	@ 0x61
    	BEQ add_vowel
 80002e8:	d002      	beq.n	80002f0 <add_vowel>
    	//Loop until end of the string (null terminator)
    	CMP R2, #0
 80002ea:	2a00      	cmp	r2, #0
    	BEQ end
 80002ec:	d003      	beq.n	80002f6 <end>
    	B count_vowels
 80002ee:	e7f0      	b.n	80002d2 <count_vowels>

080002f0 <add_vowel>:

    add_vowel:
    	ADD R3, #0b1
 80002f0:	f103 0301 	add.w	r3, r3, #1
    	B count_vowels
 80002f4:	e7ed      	b.n	80002d2 <count_vowels>

080002f6 <end>:
    end:
    	//Subtract vowles from letters to get consonants count
    	SUB R1, R3
 80002f6:	eba1 0103 	sub.w	r1, r1, r3
    	//Set vowel LEDs first
    	B Set_Vowel_LED
 80002fa:	e00f      	b.n	800031c <Set_Vowel_LED>

080002fc <button_press>:

	//When button is pressed wait for it to be released before changing LEDs
    button_press:
	LDR R0, = GPIOA
 80002fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	LDRB R4, [R0, #IDR]
 8000300:	7c04      	ldrb	r4, [r0, #16]
	TST R4, #0x01
 8000302:	f014 0f01 	tst.w	r4, #1
	BEQ button_press
 8000306:	d0f9      	beq.n	80002fc <button_press>

08000308 <wait>:

	wait:
	LDR R4, [R0, #IDR]
 8000308:	6904      	ldr	r4, [r0, #16]
	TST R4, #0x1
 800030a:	f014 0f01 	tst.w	r4, #1
	BNE wait
 800030e:	d1fb      	bne.n	8000308 <wait>

08000310 <toggle>:

	toggle:
	//When button is pressed toggle R5 to register either showing Vowels or Consonants
	EOR R5, #0b1
 8000310:	f085 0501 	eor.w	r5, r5, #1
	CMP R5, #0b0
 8000314:	2d00      	cmp	r5, #0
	BEQ Set_Vowel_LED
 8000316:	d001      	beq.n	800031c <Set_Vowel_LED>
	CMP R5, #0b1
 8000318:	2d01      	cmp	r5, #1
	BEQ Set_Cons_LED
 800031a:	d002      	beq.n	8000322 <Set_Cons_LED>

0800031c <Set_Vowel_LED>:

    Set_Vowel_LED:
	LDR R0, =GPIOE	//Load the address of the GPIOE register into R0
 800031c:	4807      	ldr	r0, [pc, #28]	@ (800033c <main+0x14>)
	STRB R3, [R0, #ODR + 1] //store the binary count of vowles in the LED output
 800031e:	7543      	strb	r3, [r0, #21]
	B button_press
 8000320:	e7ec      	b.n	80002fc <button_press>

08000322 <Set_Cons_LED>:

	Set_Cons_LED:
	LDR R0, =GPIOE	//Load the address of the GPIOE register into R0
 8000322:	4806      	ldr	r0, [pc, #24]	@ (800033c <main+0x14>)
	STRB R1, [R0, #ODR + 1] //Store the binary count of consonants in the LED output
 8000324:	7541      	strb	r1, [r0, #21]
	B button_press
 8000326:	e7e9      	b.n	80002fc <button_press>

08000328 <main>:
//4 vowels 13 consonants

.text
main:
    // Initialise GPIO registers
	BL enable_peripheral_clocks // Branch with link to set the clocks for the I/O and UART
 8000328:	f7ff ff54 	bl	80001d4 <enable_peripheral_clocks>
	BL Set_LED_to_output        // Once the clocks are started, need to initialise the discovery board I/O
 800032c:	f7ff ff5a 	bl	80001e4 <Set_LED_to_output>

    // Test 2a
	BL Set_LED_state
 8000330:	f7ff ff65 	bl	80001fe <Set_LED_state>

    // Test 2c (infinite loop)
    //B start_user_led_ripple

    // Test 2d (infinite loop)
    LDR R0, =test_string
 8000334:	4803      	ldr	r0, [pc, #12]	@ (8000344 <main+0x1c>)
    B Vowels
 8000336:	e7a3      	b.n	8000280 <Vowels>
	LDR R0, = RCC @ load the address of the RCC address boundary (for enabling the IO clock)
 8000338:	40021000 	.word	0x40021000
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 800033c:	48001000 	.word	0x48001000
	LDR R3, =initial_led_state
 8000340:	20000000 	.word	0x20000000
    	LDR R0, =test_string // Reload the string from the start
 8000344:	20000001 	.word	0x20000001

08000348 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000348:	480d      	ldr	r0, [pc, #52]	@ (8000380 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800034a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800034c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000350:	480c      	ldr	r0, [pc, #48]	@ (8000384 <LoopForever+0x6>)
  ldr r1, =_edata
 8000352:	490d      	ldr	r1, [pc, #52]	@ (8000388 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000354:	4a0d      	ldr	r2, [pc, #52]	@ (800038c <LoopForever+0xe>)
  movs r3, #0
 8000356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000358:	e002      	b.n	8000360 <LoopCopyDataInit>

0800035a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800035a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800035c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800035e:	3304      	adds	r3, #4

08000360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000364:	d3f9      	bcc.n	800035a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000366:	4a0a      	ldr	r2, [pc, #40]	@ (8000390 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000368:	4c0a      	ldr	r4, [pc, #40]	@ (8000394 <LoopForever+0x16>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800036c:	e001      	b.n	8000372 <LoopFillZerobss>

0800036e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800036e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000370:	3204      	adds	r2, #4

08000372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000374:	d3fb      	bcc.n	800036e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000376:	f000 f811 	bl	800039c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800037a:	f7ff ffd5 	bl	8000328 <main>

0800037e <LoopForever>:

LoopForever:
  b LoopForever
 800037e:	e7fe      	b.n	800037e <LoopForever>
  ldr   r0, =_estack
 8000380:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000388:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800038c:	08000404 	.word	0x08000404
  ldr r2, =_sbss
 8000390:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000394:	20000034 	.word	0x20000034

08000398 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000398:	e7fe      	b.n	8000398 <ADC1_2_IRQHandler>
	...

0800039c <__libc_init_array>:
 800039c:	b570      	push	{r4, r5, r6, lr}
 800039e:	4d0d      	ldr	r5, [pc, #52]	@ (80003d4 <__libc_init_array+0x38>)
 80003a0:	4c0d      	ldr	r4, [pc, #52]	@ (80003d8 <__libc_init_array+0x3c>)
 80003a2:	1b64      	subs	r4, r4, r5
 80003a4:	10a4      	asrs	r4, r4, #2
 80003a6:	2600      	movs	r6, #0
 80003a8:	42a6      	cmp	r6, r4
 80003aa:	d109      	bne.n	80003c0 <__libc_init_array+0x24>
 80003ac:	4d0b      	ldr	r5, [pc, #44]	@ (80003dc <__libc_init_array+0x40>)
 80003ae:	4c0c      	ldr	r4, [pc, #48]	@ (80003e0 <__libc_init_array+0x44>)
 80003b0:	f000 f818 	bl	80003e4 <_init>
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	10a4      	asrs	r4, r4, #2
 80003b8:	2600      	movs	r6, #0
 80003ba:	42a6      	cmp	r6, r4
 80003bc:	d105      	bne.n	80003ca <__libc_init_array+0x2e>
 80003be:	bd70      	pop	{r4, r5, r6, pc}
 80003c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c4:	4798      	blx	r3
 80003c6:	3601      	adds	r6, #1
 80003c8:	e7ee      	b.n	80003a8 <__libc_init_array+0xc>
 80003ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ce:	4798      	blx	r3
 80003d0:	3601      	adds	r6, #1
 80003d2:	e7f2      	b.n	80003ba <__libc_init_array+0x1e>
 80003d4:	080003fc 	.word	0x080003fc
 80003d8:	080003fc 	.word	0x080003fc
 80003dc:	080003fc 	.word	0x080003fc
 80003e0:	08000400 	.word	0x08000400

080003e4 <_init>:
 80003e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e6:	bf00      	nop
 80003e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ea:	bc08      	pop	{r3}
 80003ec:	469e      	mov	lr, r3
 80003ee:	4770      	bx	lr

080003f0 <_fini>:
 80003f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f2:	bf00      	nop
 80003f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f6:	bc08      	pop	{r3}
 80003f8:	469e      	mov	lr, r3
 80003fa:	4770      	bx	lr
