
Exercise 5 Integration B1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800045c  0800045c  00002064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800045c  0800045c  00002064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800045c  0800045c  00002064  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800045c  0800045c  00002064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800045c  0800045c  0000145c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000460  08000460  00001460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08000464  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002064  2**0
                  CONTENTS
 10 .bss          0000001c  20000064  20000064  00002064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000080  20000080  00002064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002064  2**0
                  CONTENTS, READONLY
 13 .debug_line   00000195  00000000  00000000  00002094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000097  00000000  00000000  00002229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000055  00000000  00000000  000022c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  00002315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  00002350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000009d  00000000  00000000  00002398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  00002435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  00002450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000064 	.word	0x20000064
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000444 	.word	0x08000444

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000068 	.word	0x20000068
 80001d0:	08000444 	.word	0x08000444

080001d4 <enable_peripheral_clocks>:
#include "definitions.s"


enable_peripheral_clocks:
	@ load the address of the RCC address boundary (for enabling the IO clock)
	LDR R0, =RCC
 80001d4:	486a      	ldr	r0, [pc, #424]	@ (8000380 <palindrome_fail+0x6>)
	@ enable all of the GPIO peripherals in AHBENR
	LDR R1, [R0, #AHBENR]
 80001d6:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOE_ENABLE | 1 << GPIOD_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOB_ENABLE | 1 << GPIOA_ENABLE  @ enable GPIO
 80001d8:	f441 1178 	orr.w	r1, r1, #4063232	@ 0x3e0000
	STR R1, [R0, #AHBENR]
 80001dc:	6141      	str	r1, [r0, #20]
	BX LR @ return
 80001de:	4770      	bx	lr

080001e0 <initialise_discovery_board>:


@ initialise the discovery board I/O (just outputs: inputs are selected by default)
initialise_discovery_board:
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80001e0:	4868      	ldr	r0, [pc, #416]	@ (8000384 <palindrome_fail+0xa>)
	LDR R1, =0x5555  @ load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 80001e2:	f245 5155 	movw	r1, #21845	@ 0x5555
					 @ as 0x5555 = 01010101 01010101
	STRH R1, [R0, #MODER + 2]   @ store the new register values in the top half word representing
 80001e6:	8041      	strh	r1, [r0, #2]
								@ the MODER settings for pe8-15
	BX LR @ return from function call
 80001e8:	4770      	bx	lr

080001ea <enable_uart>:

enable_uart:

	@make a note about the different ways that we set specific bits in this configuration section
	@ select which UART you want to enable
	LDR R0, =GPIOC
 80001ea:	4867      	ldr	r0, [pc, #412]	@ (8000388 <palindrome_fail+0xe>)
	@ set the alternate function for the UART pins (what ever you have selected)
	LDR R1, =0x77
 80001ec:	f04f 0177 	mov.w	r1, #119	@ 0x77
	STRB R1, [R0, AFRL + 2]
 80001f0:	f880 1022 	strb.w	r1, [r0, #34]	@ 0x22
	@ modify the mode of the GPIO pins you want to use to enable 'alternate function mode'
	LDR R1, [R0, GPIO_MODER]
 80001f4:	6801      	ldr	r1, [r0, #0]
	ORR R1, 0xA00 @ Mask for pins to change to 'alternate function mode'
 80001f6:	f441 6120 	orr.w	r1, r1, #2560	@ 0xa00
	STR R1, [R0, GPIO_MODER]
 80001fa:	6001      	str	r1, [r0, #0]
	@ modify the speed of the GPIO pins you want to use to enable 'high speed'
	LDR R1, [R0, GPIO_OSPEEDR]
 80001fc:	6881      	ldr	r1, [r0, #8]
	ORR R1, 0xF00 @ Mask for pins to be set as high speed
 80001fe:	f441 6170 	orr.w	r1, r1, #3840	@ 0xf00
	STR R1, [R0, GPIO_OSPEEDR]
 8000202:	6081      	str	r1, [r0, #8]
	@ Set the enable bit for the specific UART you want to use
	@ Note: this might be in APB1ENR or APB2ENR
	@ you can find this out by looking in the datasheet
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 8000204:	485e      	ldr	r0, [pc, #376]	@ (8000380 <palindrome_fail+0x6>)
	LDR R1, [R0, #APB2ENR] @ load the original value from the enable register
 8000206:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << UART_EN  @ apply the bit mask to the previous values of the enable the UART
 8000208:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
	STR R1, [R0, #APB2ENR] @ store the modified enable register values back to RCC
 800020c:	6181      	str	r1, [r0, #24]
	@ this is the baud rate
	MOV R1, #0x46 @ from our earlier calculations (for 8MHz), store this in register R1
 800020e:	f04f 0146 	mov.w	r1, #70	@ 0x46
	LDR R0, =UART @ the base address for the register to turn clocks on/off
 8000212:	485e      	ldr	r0, [pc, #376]	@ (800038c <palindrome_fail+0x12>)
	STRH R1, [R0, #USART_BRR] @ store this value directly in the first half word (16 bits) of
 8000214:	8181      	strh	r1, [r0, #12]
							  	 @ the baud rate register
	@ we want to set a few things here, lets define their bit positions to make it more readable
	LDR R0, =UART @ the base address for the register to set up the specified UART
 8000216:	485d      	ldr	r0, [pc, #372]	@ (800038c <palindrome_fail+0x12>)
	LDR R1, [R0, #USART_CR1] @ load the original value from the enable register
 8000218:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE @ make a bit mask with a '1' for the bits to enable,
 800021a:	f041 010d 	orr.w	r1, r1, #13
													   @ apply the bit mask to the previous values of the enable register
	STR R1, [R0, #USART_CR1] @ store the modified enable register values back to RCC
 800021e:	6001      	str	r1, [r0, #0]

	BX LR @ return
 8000220:	4770      	bx	lr

08000222 <initialise_power>:

initialise_power:
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 8000222:	4857      	ldr	r0, [pc, #348]	@ (8000380 <palindrome_fail+0x6>)
	@ enable clock power in APB1ENR
	LDR R1, [R0, #APB1ENR]
 8000224:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << PWREN @ apply the bit mask for power enable
 8000226:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
	STR R1, [R0, #APB1ENR]
 800022a:	61c1      	str	r1, [r0, #28]
	@ enable clock config in APB2ENR
	LDR R1, [R0, #APB2ENR]
 800022c:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << SYSCFGEN @ apply the bit mask to allow clock configuration
 800022e:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, #APB2ENR]
 8000232:	6181      	str	r1, [r0, #24]

	BX LR @ return
 8000234:	4770      	bx	lr

08000236 <caesar_cipher>:
// R3: 'A' or 'a' to indicate if cipher is upper/lower
// R4: Result of division required for modulo operator
// R5: Modulo divisor
caesar_cipher:
	// Register setup
	POP {R0, R1} // Pop the cipher key and string from the stack
 8000236:	bc03      	pop	{r0, r1}
	SUB R1, #1   // Start before the string (because pre-increment loop)
 8000238:	f1a1 0101 	sub.w	r1, r1, #1
	MOV R5, #26
 800023c:	f04f 051a 	mov.w	r5, #26

	// Convert cipher key to positive value in range [0, 25]
	SDIV R4, R0, R5
 8000240:	fb90 f4f5 	sdiv	r4, r0, r5
	MUL R4, R5
 8000244:	fb05 f404 	mul.w	r4, r5, r4
	SUB R0, R4
 8000248:	eba0 0004 	sub.w	r0, r0, r4
	CMP R0, #0 // Add 26 to negative values
 800024c:	2800      	cmp	r0, #0
	BGE cipher_next
 800024e:	da00      	bge.n	8000252 <cipher_next>
	ADD R0, R5
 8000250:	4428      	add	r0, r5

08000252 <cipher_next>:

	cipher_next:
		// Iterate string until terminating NULLL
		LDRB R2, [R1, #1]!
 8000252:	f811 2f01 	ldrb.w	r2, [r1, #1]!
		CMP R2, #0
 8000256:	2a00      	cmp	r2, #0
		BEQ cipher_finish
 8000258:	d017      	beq.n	800028a <cipher_finish>

		// Ignore values before and after the alphabet
		CMP R2, #'A'
 800025a:	2a41      	cmp	r2, #65	@ 0x41
		BLT cipher_next
 800025c:	dbf9      	blt.n	8000252 <cipher_next>
		CMP R2, #'z'
 800025e:	2a7a      	cmp	r2, #122	@ 0x7a
		BGT cipher_next
 8000260:	dcf7      	bgt.n	8000252 <cipher_next>

		// Check if uppercase or lower case
		CMP R2, #'Z'
 8000262:	2a5a      	cmp	r2, #90	@ 0x5a
		MOV R3, #'A'
 8000264:	f04f 0341 	mov.w	r3, #65	@ 0x41
		BLE perform_cipher
 8000268:	dd03      	ble.n	8000272 <perform_cipher>

		CMP R2, #'a'
 800026a:	2a61      	cmp	r2, #97	@ 0x61
		MOV R3, #'a'
 800026c:	f04f 0361 	mov.w	r3, #97	@ 0x61
		BGE perform_cipher
 8000270:	daff      	bge.n	8000272 <perform_cipher>

08000272 <perform_cipher>:

	perform_cipher:
		// Convert letter to a number [0, 25] and perform cipher
		SUB R2, R3
 8000272:	eba2 0203 	sub.w	r2, r2, r3
		ADD R2, R0
 8000276:	4402      	add	r2, r0

		// Modulo operation (subtract highest multiple of 26)
		UDIV R4, R2, R5
 8000278:	fbb2 f4f5 	udiv	r4, r2, r5
		MUL R4, R5
 800027c:	fb05 f404 	mul.w	r4, r5, r4
		SUB R2, R4
 8000280:	eba2 0204 	sub.w	r2, r2, r4

		// Convert number back to letter of given case, store in R1
		ADD R2, R3
 8000284:	441a      	add	r2, r3
		STRB R2, [R1]
 8000286:	700a      	strb	r2, [r1, #0]
		B cipher_next
 8000288:	e7e3      	b.n	8000252 <cipher_next>

0800028a <cipher_finish>:

	cipher_finish:
		BX LR
 800028a:	4770      	bx	lr

0800028c <main>:

.text

main:

	BL initialise_power				@ Power on the STM32 board
 800028c:	f7ff ffc9 	bl	8000222 <initialise_power>
	BL enable_peripheral_clocks		@ Initializes and peripheral clocks
 8000290:	f7ff ffa0 	bl	80001d4 <enable_peripheral_clocks>
	BL initialise_discovery_board	@ Initialize the board
 8000294:	f7ff ffa4 	bl	80001e0 <initialise_discovery_board>
	BL enable_uart					@ Initialize the UART
 8000298:	f7ff ffa7 	bl	80001ea <enable_uart>

@ Load the memory addresses of the buffer and counter information
	LDR R6, =incoming_buffer
 800029c:	4e3c      	ldr	r6, [pc, #240]	@ (8000390 <palindrome_fail+0x16>)
	LDR R7, =incoming_counter
 800029e:	4f3d      	ldr	r7, [pc, #244]	@ (8000394 <palindrome_fail+0x1a>)
	LDRB R7, [R7]
 80002a0:	783f      	ldrb	r7, [r7, #0]
	MOV R8, #0x00
 80002a2:	f04f 0800 	mov.w	r8, #0
	MOV R9, #0x00
 80002a6:	f04f 0900 	mov.w	r9, #0

080002aa <loop_forever>:

loop_forever:
    LDR R0,=UART					@ the base address for the register to set up UART
 80002aa:	4838      	ldr	r0, [pc, #224]	@ (800038c <palindrome_fail+0x12>)
    LDR R1,[R0, USART_ISR]			@ load the status of the UART
 80002ac:	69c1      	ldr	r1, [r0, #28]

@ 'AND' the current status with the bit mask that we are interested in
@ NOTE, the ANDS is used so that if the result is '0' the z register flag is set
    TST R1,1 << UART_ORE | 1 << UART_FE
 80002ae:	f011 0f0a 	tst.w	r1, #10
    BNE clear_error
 80002b2:	d115      	bne.n	80002e0 <clear_error>
@ 'AND' the current status with the bit mask that we are interested in
@ NOTE, the ANDS is used so that if the result is '0' the z register flag is set
    TST R1,1 << UART_RXNE
 80002b4:	f011 0f20 	tst.w	r1, #32
    BEQ loop_forever
 80002b8:	d0f7      	beq.n	80002aa <loop_forever>

    LDRB R3,[R0,USART_RDR]      	@ load the lowest byte (RDR bits [0:7] for an 8 bit read)
 80002ba:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
    STRB R3,[R6,R8]             	@ Store in the buffer
 80002be:	f806 3008 	strb.w	r3, [r6, r8]
    ADD R8,#1
 80002c2:	f108 0801 	add.w	r8, r8, #1

	LDR R4,=terminator
 80002c6:	4c34      	ldr	r4, [pc, #208]	@ (8000398 <palindrome_fail+0x1e>)
	LDRB R5,[R4]
 80002c8:	7825      	ldrb	r5, [r4, #0]
	CMP R3,R5              			@ Check whether it is the terminator
 80002ca:	42ab      	cmp	r3, r5
    BEQ found_terminator
 80002cc:	d00d      	beq.n	80002ea <found_terminator>

    CMP R7,R8                    	@ Check whether the buffer is exceeded
 80002ce:	4547      	cmp	r7, r8
    BGT no_reset
 80002d0:	dc01      	bgt.n	80002d6 <no_reset>
    MOV R8,#0
 80002d2:	f04f 0800 	mov.w	r8, #0

080002d6 <no_reset>:

no_reset:
    LDR R1, [R0, USART_RQR]
 80002d6:	6981      	ldr	r1, [r0, #24]
    ORR R1, 1 << UART_RXFRQ
 80002d8:	f041 0108 	orr.w	r1, r1, #8
    STR R1, [R0, USART_RQR]
 80002dc:	6181      	str	r1, [r0, #24]

    B loop_forever
 80002de:	e7e4      	b.n	80002aa <loop_forever>

080002e0 <clear_error>:

clear_error:
    LDR R1, [R0, USART_ICR]
 80002e0:	6a01      	ldr	r1, [r0, #32]
    ORR R1, 1 << UART_ORECF | 1 << UART_FECF
 80002e2:	f041 0108 	orr.w	r1, r1, #8
    STR R1, [R0, USART_ICR]
 80002e6:	6201      	str	r1, [r0, #32]
    B loop_forever
 80002e8:	e7df      	b.n	80002aa <loop_forever>

080002ea <found_terminator>:

@The length of the saved data is used for later saving
found_terminator:
    MOV R9,R8
 80002ea:	46c1      	mov	r9, r8
    PUSH {R6}
 80002ec:	b440      	push	{r6}
    B palindrome
 80002ee:	e022      	b.n	8000336 <palindrome>
    B tx_loop
 80002f0:	e7ff      	b.n	80002f2 <tx_loop>

080002f2 <tx_loop>:

@ The transfer function is used to transfer previously saved data
tx_loop:
    LDR R0,=UART
 80002f2:	4826      	ldr	r0, [pc, #152]	@ (800038c <palindrome_fail+0x12>)
    LDR R3,=incoming_buffer
 80002f4:	4b26      	ldr	r3, [pc, #152]	@ (8000390 <palindrome_fail+0x16>)
    MOV R4,R9
 80002f6:	464c      	mov	r4, r9

080002f8 <tx_uart>:

tx_uart:
    LDR R1,[R0, USART_ISR]
 80002f8:	69c1      	ldr	r1, [r0, #28]
    TST R1,1 << UART_TXE
 80002fa:	f011 0f80 	tst.w	r1, #128	@ 0x80
    BEQ tx_uart
 80002fe:	d0fb      	beq.n	80002f8 <tx_uart>

    LDRB R5,[R3], #1
 8000300:	f813 5b01 	ldrb.w	r5, [r3], #1
    STRB R5,[R0, USART_TDR]
 8000304:	f880 5028 	strb.w	r5, [r0, #40]	@ 0x28
    SUBS R4,#1
 8000308:	3c01      	subs	r4, #1
    BGT tx_uart
 800030a:	dcf5      	bgt.n	80002f8 <tx_uart>
    LDR R3,=success_msg
 800030c:	4b23      	ldr	r3, [pc, #140]	@ (800039c <palindrome_fail+0x22>)

0800030e <tx_success_loop>:

@ Transfer message Success
tx_success_loop:
    LDRB R5,[R3],#1
 800030e:	f813 5b01 	ldrb.w	r5, [r3], #1
    CMP R5,#0
 8000312:	2d00      	cmp	r5, #0
    BEQ restart_loop
 8000314:	d006      	beq.n	8000324 <restart_loop>

08000316 <tx_uart_success>:

tx_uart_success:
    LDR R1,[R0, USART_ISR]
 8000316:	69c1      	ldr	r1, [r0, #28]
    TST R1,1 << UART_TXE
 8000318:	f011 0f80 	tst.w	r1, #128	@ 0x80
    BEQ tx_uart_success
 800031c:	d0fb      	beq.n	8000316 <tx_uart_success>

    STRB R5,[R0, USART_TDR]
 800031e:	f880 5028 	strb.w	r5, [r0, #40]	@ 0x28
    B tx_success_loop
 8000322:	e7f4      	b.n	800030e <tx_success_loop>

08000324 <restart_loop>:

@Empty the counter and wait to return to the next accept and transfer
restart_loop:
    MOV R8, #0
 8000324:	f04f 0800 	mov.w	r8, #0
    B loop_forever
 8000328:	e7bf      	b.n	80002aa <loop_forever>

0800032a <delay_loop>:

delay_loop:
    LDR R9, =0xfffff
 800032a:	f8df 9074 	ldr.w	r9, [pc, #116]	@ 80003a0 <palindrome_fail+0x26>

0800032e <delay_inner>:
delay_inner:
    SUBS R9, #1
 800032e:	f1b9 0901 	subs.w	r9, r9, #1
    BGT delay_inner
 8000332:	dcfc      	bgt.n	800032e <delay_inner>
    BX LR
 8000334:	4770      	bx	lr

08000336 <palindrome>:
 * R0 is used as a backwards iterating pointer
 * Result is stored in R0 (1 is palindrome, 0 is not)
 */
palindrome:
	// Load the address of the string into R0
	LDR R0,=cipher_key
 8000336:	481b      	ldr	r0, [pc, #108]	@ (80003a4 <palindrome_fail+0x2a>)
	LDRB R0, [R0]
 8000338:	7800      	ldrb	r0, [r0, #0]
	POP {R1}
 800033a:	bc02      	pop	{r1}
	PUSH {R0, R1}
 800033c:	b403      	push	{r0, r1}
	MOV R0, R1
 800033e:	4608      	mov	r0, r1

08000340 <palindrome_loop_to_null>:

	// Set R0 pointer to end of string
	palindrome_loop_to_null:
		// Load string value into R2 and compare
		LDRB R2, [R0]
 8000340:	7802      	ldrb	r2, [r0, #0]
		CMP R2, #0x0
 8000342:	2a00      	cmp	r2, #0
		ADD R0, #0x1
 8000344:	f100 0001 	add.w	r0, r0, #1
		BNE palindrome_loop_to_null
 8000348:	d1fa      	bne.n	8000340 <palindrome_loop_to_null>

	// Set pointer to before string NULL terminator
	SUB R0, #0x2
 800034a:	f1a0 0002 	sub.w	r0, r0, #2

0800034e <palindrome_loop_until_tested>:

	// Iterate pointers R1/R0 forward/backwards respectively until they pass
	palindrome_loop_until_tested:
		// Load and compare both characters
		LDRB R2, [R0]
 800034e:	7802      	ldrb	r2, [r0, #0]
		LDRB R3, [R1]
 8000350:	780b      	ldrb	r3, [r1, #0]
		CMP R2, R3
 8000352:	429a      	cmp	r2, r3
		BEQ continue_palindrome
 8000354:	d009      	beq.n	800036a <continue_palindrome>

08000356 <palindrome_check_capital>:

		palindrome_check_capital:
			ADD R2, #32
 8000356:	f102 0220 	add.w	r2, r2, #32
			CMP R2, R3
 800035a:	429a      	cmp	r2, r3
			BEQ continue_palindrome
 800035c:	d005      	beq.n	800036a <continue_palindrome>

0800035e <palindrome_check_capital2>:

		palindrome_check_capital2:
			ADD R3, #32
 800035e:	f103 0320 	add.w	r3, r3, #32
			SUB R2, #32
 8000362:	f1a2 0220 	sub.w	r2, r2, #32
			CMP R2, R3
 8000366:	429a      	cmp	r2, r3
			BNE palindrome_fail
 8000368:	d107      	bne.n	800037a <palindrome_fail>

0800036a <continue_palindrome>:

		// Iterate pointers until they pass
		continue_palindrome:
			SUB R0, #0x1
 800036a:	f1a0 0001 	sub.w	r0, r0, #1
			ADD R1, #0x1
 800036e:	f101 0101 	add.w	r1, r1, #1
			CMP R0, R1
 8000372:	4288      	cmp	r0, r1
			BGT palindrome_loop_until_tested
 8000374:	dceb      	bgt.n	800034e <palindrome_loop_until_tested>

08000376 <palindrome_pass>:

	// Set R0 to 1 if string is a palindrome, else 0
	palindrome_pass:
		BL caesar_cipher
 8000376:	f7ff ff5e 	bl	8000236 <caesar_cipher>

0800037a <palindrome_fail>:

	palindrome_fail:
		LDR R0, =#0x0
 800037a:	f04f 0000 	mov.w	r0, #0
		BX LR
 800037e:	4770      	bx	lr
	LDR R0, =RCC
 8000380:	40021000 	.word	0x40021000
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 8000384:	48001000 	.word	0x48001000
	LDR R0, =GPIOC
 8000388:	48000800 	.word	0x48000800
	LDR R0, =UART @ the base address for the register to turn clocks on/off
 800038c:	40013800 	.word	0x40013800
	LDR R6, =incoming_buffer
 8000390:	20000014 	.word	0x20000014
	LDR R7, =incoming_counter
 8000394:	20000052 	.word	0x20000052
	LDR R4,=terminator
 8000398:	20000053 	.word	0x20000053
    LDR R3,=success_msg
 800039c:	20000055 	.word	0x20000055
    LDR R9, =0xfffff
 80003a0:	000fffff 	.word	0x000fffff
	LDR R0,=cipher_key
 80003a4:	20000009 	.word	0x20000009

080003a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003a8:	480d      	ldr	r0, [pc, #52]	@ (80003e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b0:	480c      	ldr	r0, [pc, #48]	@ (80003e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80003b2:	490d      	ldr	r1, [pc, #52]	@ (80003e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b4:	4a0d      	ldr	r2, [pc, #52]	@ (80003ec <LoopForever+0xe>)
  movs r3, #0
 80003b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b8:	e002      	b.n	80003c0 <LoopCopyDataInit>

080003ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003be:	3304      	adds	r3, #4

080003c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c4:	d3f9      	bcc.n	80003ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003c6:	4a0a      	ldr	r2, [pc, #40]	@ (80003f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003c8:	4c0a      	ldr	r4, [pc, #40]	@ (80003f4 <LoopForever+0x16>)
  movs r3, #0
 80003ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003cc:	e001      	b.n	80003d2 <LoopFillZerobss>

080003ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d0:	3204      	adds	r2, #4

080003d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d4:	d3fb      	bcc.n	80003ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003d6:	f000 f811 	bl	80003fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003da:	f7ff ff57 	bl	800028c <main>

080003de <LoopForever>:

LoopForever:
  b LoopForever
 80003de:	e7fe      	b.n	80003de <LoopForever>
  ldr   r0, =_estack
 80003e0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80003e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80003ec:	08000464 	.word	0x08000464
  ldr r2, =_sbss
 80003f0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80003f4:	20000080 	.word	0x20000080

080003f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003f8:	e7fe      	b.n	80003f8 <ADC1_2_IRQHandler>
	...

080003fc <__libc_init_array>:
 80003fc:	b570      	push	{r4, r5, r6, lr}
 80003fe:	4d0d      	ldr	r5, [pc, #52]	@ (8000434 <__libc_init_array+0x38>)
 8000400:	4c0d      	ldr	r4, [pc, #52]	@ (8000438 <__libc_init_array+0x3c>)
 8000402:	1b64      	subs	r4, r4, r5
 8000404:	10a4      	asrs	r4, r4, #2
 8000406:	2600      	movs	r6, #0
 8000408:	42a6      	cmp	r6, r4
 800040a:	d109      	bne.n	8000420 <__libc_init_array+0x24>
 800040c:	4d0b      	ldr	r5, [pc, #44]	@ (800043c <__libc_init_array+0x40>)
 800040e:	4c0c      	ldr	r4, [pc, #48]	@ (8000440 <__libc_init_array+0x44>)
 8000410:	f000 f818 	bl	8000444 <_init>
 8000414:	1b64      	subs	r4, r4, r5
 8000416:	10a4      	asrs	r4, r4, #2
 8000418:	2600      	movs	r6, #0
 800041a:	42a6      	cmp	r6, r4
 800041c:	d105      	bne.n	800042a <__libc_init_array+0x2e>
 800041e:	bd70      	pop	{r4, r5, r6, pc}
 8000420:	f855 3b04 	ldr.w	r3, [r5], #4
 8000424:	4798      	blx	r3
 8000426:	3601      	adds	r6, #1
 8000428:	e7ee      	b.n	8000408 <__libc_init_array+0xc>
 800042a:	f855 3b04 	ldr.w	r3, [r5], #4
 800042e:	4798      	blx	r3
 8000430:	3601      	adds	r6, #1
 8000432:	e7f2      	b.n	800041a <__libc_init_array+0x1e>
 8000434:	0800045c 	.word	0x0800045c
 8000438:	0800045c 	.word	0x0800045c
 800043c:	0800045c 	.word	0x0800045c
 8000440:	08000460 	.word	0x08000460

08000444 <_init>:
 8000444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000446:	bf00      	nop
 8000448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044a:	bc08      	pop	{r3}
 800044c:	469e      	mov	lr, r3
 800044e:	4770      	bx	lr

08000450 <_fini>:
 8000450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000452:	bf00      	nop
 8000454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000456:	bc08      	pop	{r3}
 8000458:	469e      	mov	lr, r3
 800045a:	4770      	bx	lr
