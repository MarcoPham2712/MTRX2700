
exercise_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000027c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000410  08000410  0000210c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000410  08000410  0000210c  2**0
                  CONTENTS
  4 .ARM          00000000  08000410  08000410  0000210c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000410  08000410  0000210c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000410  08000410  00001410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000414  08000414  00001414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000010c  20000000  08000418  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000210c  2**0
                  CONTENTS
 10 .bss          0000001c  2000010c  2000010c  0000210c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000128  20000128  0000210c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000210c  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000017b  00000000  00000000  0000213c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000094  00000000  00000000  000022b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000055  00000000  00000000  0000234b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  000023a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  000023d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00000092  00000000  00000000  00002420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  000024b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  000024cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000010c 	.word	0x2000010c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003f8 	.word	0x080003f8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000110 	.word	0x20000110
 80001d0:	080003f8 	.word	0x080003f8

080001d4 <enable_peripheral_clocks>:
#include "definitions.s"
@ function to enable the clocks for the peripherals we could be using (A, B, C, D and E)
enable_peripheral_clocks:

	@ load the address of the RCC address boundary (for enabling the IO clock)
	LDR R0, =RCC
 80001d4:	4858      	ldr	r0, [pc, #352]	@ (8000338 <main+0x4>)

	@ enable all of the GPIO peripherals in AHBENR
	LDR R1, [R0, #AHBENR]
 80001d6:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << GPIOE_ENABLE | 1 << GPIOD_ENABLE | 1 << GPIOC_ENABLE | 1 << GPIOB_ENABLE | 1 << GPIOA_ENABLE  @ enable GPIO
 80001d8:	f441 1178 	orr.w	r1, r1, #4063232	@ 0x3e0000
	STR R1, [R0, #AHBENR]
 80001dc:	6141      	str	r1, [r0, #20]

	BX LR @ return
 80001de:	4770      	bx	lr

080001e0 <initialise_discovery_board>:

@ initialise the discovery board I/O (just outputs: inputs are selected by default)
initialise_discovery_board:
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80001e0:	4856      	ldr	r0, [pc, #344]	@ (800033c <main+0x8>)
	LDR R1, =0x5555  @ load the binary value of 01 (OUTPUT) for each port in the upper two bytes
 80001e2:	f245 5155 	movw	r1, #21845	@ 0x5555
					 @ as 0x5555 = 01010101 01010101
	STRH R1, [R0, #MODER + 2]   @ store the new register values in the top half word representing
 80001e6:	8041      	strh	r1, [r0, #2]
								@ the MODER settings for pe8-15
	BX LR @ return from function call
 80001e8:	4770      	bx	lr

080001ea <enable_uart>:
@
@ BAUD rate needs to change depending on whether it is 8MHz (external clock) or 24MHz (our PLL setting)
enable_uart:
	@make a note about the different ways that we set specific bits in this configuration section
	@ select which UART you want to enable
	LDR R0, =GPIOC
 80001ea:	4855      	ldr	r0, [pc, #340]	@ (8000340 <main+0xc>)
	@ set the alternate function for the UART pins (what ever you have selected)
	LDR R1, =0x77
 80001ec:	f04f 0177 	mov.w	r1, #119	@ 0x77
	STRB R1, [R0, AFRL + 2]
 80001f0:	f880 1022 	strb.w	r1, [r0, #34]	@ 0x22
	@ modify the mode of the GPIO pins you want to use to enable 'alternate function mode'
	LDR R1, [R0, GPIO_MODER]
 80001f4:	6801      	ldr	r1, [r0, #0]
	ORR R1, 0xA00 @ Mask for pins to change to 'alternate function mode'
 80001f6:	f441 6120 	orr.w	r1, r1, #2560	@ 0xa00
	STR R1, [R0, GPIO_MODER]
 80001fa:	6001      	str	r1, [r0, #0]
	@ modify the speed of the GPIO pins you want to use to enable 'high speed'
	LDR R1, [R0, GPIO_OSPEEDR]
 80001fc:	6881      	ldr	r1, [r0, #8]
	ORR R1, 0xF00 @ Mask for pins to be set as high speed
 80001fe:	f441 6170 	orr.w	r1, r1, #3840	@ 0xf00
	STR R1, [R0, GPIO_OSPEEDR]
 8000202:	6081      	str	r1, [r0, #8]
	@ Set the enable bit for the specific UART you want to use
	@ Note: this might be in APB1ENR or APB2ENR
	@ you can find this out by looking in the datasheet
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 8000204:	484c      	ldr	r0, [pc, #304]	@ (8000338 <main+0x4>)
	LDR R1, [R0, #APB2ENR] @ load the original value from the enable register
 8000206:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << UART_EN  @ apply the bit mask to the previous values of the enable the UART
 8000208:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
	STR R1, [R0, #APB2ENR] @ store the modified enable register values back to RCC
 800020c:	6181      	str	r1, [r0, #24]
	@ this is the baud rate
	MOV R1, #0x46 @ from our earlier calculations (for 8MHz), store this in register R1
 800020e:	f04f 0146 	mov.w	r1, #70	@ 0x46
	LDR R0, =UART @ the base address for the register to turn clocks on/off
 8000212:	484c      	ldr	r0, [pc, #304]	@ (8000344 <main+0x10>)
	STRH R1, [R0, #USART_BRR] @ store this value directly in the first half word (16 bits) of
 8000214:	8181      	strh	r1, [r0, #12]
							  	 @ the baud rate register
	@ we want to set a few things here, lets define their bit positions to make it more readable
	LDR R0, =UART @ the base address for the register to set up the specified UART
 8000216:	484b      	ldr	r0, [pc, #300]	@ (8000344 <main+0x10>)
	LDR R1, [R0, #USART_CR1] @ load the original value from the enable register
 8000218:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE @ make a bit mask with a '1' for the bits to enable,
 800021a:	f041 010d 	orr.w	r1, r1, #13
 @ apply the bit mask to the previous values of the enable register
	STR R1, [R0, #USART_CR1] @ store the modified enable register values back to RCC
 800021e:	6001      	str	r1, [r0, #0]
	BX LR @ return
 8000220:	4770      	bx	lr

08000222 <change_clock_speed>:

@ set the PLL (clocks are described in page 125 of the large manual)
change_clock_speed:
@ step 1, set clock to HSE (the external clock)
	@ enable HSE (and wait for complete)
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 8000222:	4845      	ldr	r0, [pc, #276]	@ (8000338 <main+0x4>)
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 8000224:	6801      	ldr	r1, [r0, #0]
	LDR R2, =1 << HSEBYP | 1 << HSEON @ make a bit mask with a '1' in the 0th bit position
 8000226:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
	ORR R1, R2 @ apply the bit mask to the previous values of the enable register
 800022a:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, #RCC_CR] @ store the modified enable register values back to RCC
 800022e:	6001      	str	r1, [r0, #0]

08000230 <wait_for_HSERDY>:
	@ wait for the changes to be completed
wait_for_HSERDY:
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 8000230:	6801      	ldr	r1, [r0, #0]
	TST R1, 1 << HSERDY @ Test the HSERDY bit (check if it is 1)
 8000232:	f411 3f00 	tst.w	r1, #131072	@ 0x20000
	BEQ wait_for_HSERDY
 8000236:	d0fb      	beq.n	8000230 <wait_for_HSERDY>

@ step 2, now the clock is HSE, we are allowed to switch to PLL
	@ clock is set to External clock (external crystal) - 8MHz, can enable the PLL now
	LDR R1, [R0, #RCC_CFGR] @ load the original value from the enable register
 8000238:	6841      	ldr	r1, [r0, #4]
	LDR R2, =1 << 20 | 1 << PLLSRC | 1 << 22 @ the last term is for the USB prescaler to be 1
 800023a:	f44f 02a2 	mov.w	r2, #5308416	@ 0x510000
	ORR R1, R2  @ set PLLSRC (use PLL) and PLLMUL to 0100 - bit 20 is 1 (set speed as 6x faster)
 800023e:	ea41 0102 	orr.w	r1, r1, r2
				@ see page 140 of the large manual for options
				@ NOTE: cannot go faster than 72MHz)
	STR R1, [R0, #RCC_CFGR] @ store the modified enable register values back to RCC
 8000242:	6041      	str	r1, [r0, #4]
	@ enable PLL (and wait for complete)
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 8000244:	483c      	ldr	r0, [pc, #240]	@ (8000338 <main+0x4>)
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 8000246:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << PLLON @ apply the bit mask to turn on the PLL
 8000248:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
	STR R1, [R0, #RCC_CR] @ store the modified enable register values back to RCC
 800024c:	6001      	str	r1, [r0, #0]

0800024e <wait_for_PLLRDY>:
wait_for_PLLRDY:
	LDR R1, [R0, #RCC_CR] @ load the original value from the enable register
 800024e:	6801      	ldr	r1, [r0, #0]
	TST R1, 1 << PLLRDY @ Test the HSERDY bit (check if it is 1)
 8000250:	f011 7f00 	tst.w	r1, #33554432	@ 0x2000000
	BEQ wait_for_PLLRDY
 8000254:	d0fb      	beq.n	800024e <wait_for_PLLRDY>

@ step 3, PLL is ready, switch over the system clock to PLL
	LDR R0, =RCC  @ load the address of the RCC address boundary (for enabling the IO clock)
 8000256:	4838      	ldr	r0, [pc, #224]	@ (8000338 <main+0x4>)
	LDR R1, [R0, #RCC_CFGR]  @ load the current value of the peripheral clock registers
 8000258:	6841      	ldr	r1, [r0, #4]
	MOV R2, 1 << 10 | 1 << 1  @ some more settings - bit 1 (SW = 10)  - PLL set as system clock
 800025a:	f240 4202 	movw	r2, #1026	@ 0x402
@ bit 10 (HCLK=100) divided by 2 (clock is faster, need to prescale for peripherals)
	ORR R1, R2	@ Set the values of these two clocks (turn them on)
 800025e:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, #RCC_CFGR]  @ store the modified register back to the submodule
 8000262:	6041      	str	r1, [r0, #4]
	LDR R1, [R0, #RCC_CFGR]  @ load the current value of the peripheral clock registers
 8000264:	6841      	ldr	r1, [r0, #4]
	ORR R1, 1 << USBPRE	@ Set the USB prescaler (when PLL is on for the USB)
 8000266:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
	STR R1, [R0, #RCC_CFGR]  @ store the modified register back to the submodule
 800026a:	6041      	str	r1, [r0, #4]
	BX LR @ return
 800026c:	4770      	bx	lr

0800026e <initialise_power>:

@ initialise the power systems on the microcontroller
@ PWREN (enable power to the clock), SYSCFGEN system clock enable
initialise_power:
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 800026e:	4832      	ldr	r0, [pc, #200]	@ (8000338 <main+0x4>)
	@ enable clock power in APB1ENR
	LDR R1, [R0, #APB1ENR]
 8000270:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << PWREN @ apply the bit mask for power enable
 8000272:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
	STR R1, [R0, #APB1ENR]
 8000276:	61c1      	str	r1, [r0, #28]
	@ enable clock config in APB2ENR
	LDR R1, [R0, #APB2ENR]
 8000278:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << SYSCFGEN @ apply the bit mask to allow clock configuration
 800027a:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, #APB2ENR]
 800027e:	6181      	str	r1, [r0, #24]
	BX LR @ return
 8000280:	4770      	bx	lr

08000282 <receive_main>:

terminator: .byte '*'

.text
receive_main:
	BL initialise_power				@ Power on the STM32 board
 8000282:	f7ff fff4 	bl	800026e <initialise_power>
	BL enable_peripheral_clocks		@ Initializes and peripheral clocks
 8000286:	f7ff ffa5 	bl	80001d4 <enable_peripheral_clocks>
	BL initialise_discovery_board	@ Initialize the board
 800028a:	f7ff ffa9 	bl	80001e0 <initialise_discovery_board>
	BL enable_uart					@ Initialize the UART
 800028e:	f7ff ffac 	bl	80001ea <enable_uart>

	// Setup and call the receive string function
	LDR R0, =incoming_buffer
 8000292:	482d      	ldr	r0, [pc, #180]	@ (8000348 <main+0x14>)
	LDR R1, =incoming_counter
 8000294:	492d      	ldr	r1, [pc, #180]	@ (800034c <main+0x18>)
	LDRB R1, [R1]
 8000296:	7809      	ldrb	r1, [r1, #0]
	LDR R2, =terminator
 8000298:	4a2d      	ldr	r2, [pc, #180]	@ (8000350 <main+0x1c>)
	LDRB R2, [R2]
 800029a:	7812      	ldrb	r2, [r2, #0]
	PUSH {R0, R1, R2}
 800029c:	b407      	push	{r0, r1, r2}
	BL receive_string
 800029e:	f000 f805 	bl	80002ac <receive_string>

	// Append a NULL terminator to the end of the used buffer space
	LDR R3, =incoming_buffer
 80002a2:	4b29      	ldr	r3, [pc, #164]	@ (8000348 <main+0x14>)
	MOV R4, #0
 80002a4:	f04f 0400 	mov.w	r4, #0
	STRB R4, [R3, R0]
 80002a8:	541c      	strb	r4, [r3, r0]

	B tx_loop
 80002aa:	e021      	b.n	80002f0 <tx_loop>

080002ac <receive_string>:
// reached.
// The terminating character is not read. No null terminator is provided after
// the received bytes.
// Returns the index after the final character read into the buffer
receive_string:
	POP {R6}
 80002ac:	bc40      	pop	{r6}
	POP {R7}
 80002ae:	bc80      	pop	{r7}
	POP {R4}
 80002b0:	bc10      	pop	{r4}
	// POP {R6, R7, R4}
	MOV R5, #0
 80002b2:	f04f 0500 	mov.w	r5, #0

080002b6 <receive_until_terminator>:

	receive_until_terminator:
		// Load USART Interrupt and Status Register (ISR)
		LDR R0, =UART
 80002b6:	4823      	ldr	r0, [pc, #140]	@ (8000344 <main+0x10>)
		LDR R1, [R0, USART_ISR]
 80002b8:	69c1      	ldr	r1, [r0, #28]

		// Clear errors from overrun and receive enable flags
		TST R1, 1 << UART_ORE | 1 << UART_FE
 80002ba:	f011 0f0a 	tst.w	r1, #10
		BNE clear_error
 80002be:	d112      	bne.n	80002e6 <clear_error>

		// Check if the receive buffer has changed (not equal)
		TST R1, 1 << UART_RXNE
 80002c0:	f011 0f20 	tst.w	r1, #32
		BEQ receive_until_terminator
 80002c4:	d0f7      	beq.n	80002b6 <receive_until_terminator>

		// Load received byte from receive data register
		LDRB R3, [R0, USART_RDR]
 80002c6:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24

		// Check if the terminator is reached
		CMP R3, R4
 80002ca:	42a3      	cmp	r3, r4
		BEQ terminator_reached
 80002cc:	d005      	beq.n	80002da <terminator_reached>

		// Store byte in buffer and increment pointer
		STRB R3, [R6, R5]
 80002ce:	5573      	strb	r3, [r6, r5]
		ADD R5, #1
 80002d0:	f105 0501 	add.w	r5, r5, #1

		// Check that buffer is not full
		CMP R5, R7
 80002d4:	42bd      	cmp	r5, r7
		BGE buffer_full
 80002d6:	da04      	bge.n	80002e2 <buffer_full>

		B receive_until_terminator
 80002d8:	e7ed      	b.n	80002b6 <receive_until_terminator>

080002da <terminator_reached>:

	terminator_reached:
		ADD R5, #1
 80002da:	f105 0501 	add.w	r5, r5, #1
		MOV R0, R5
 80002de:	4628      	mov	r0, r5
		BX LR
 80002e0:	4770      	bx	lr

080002e2 <buffer_full>:

	buffer_full:
		MOV R0, R5
 80002e2:	4628      	mov	r0, r5
		BX LR
 80002e4:	4770      	bx	lr

080002e6 <clear_error>:

	// Clear the overrun/frame error flags using the Interrupt flag Clear Register
	clear_error:
   		LDR R1, [R0, USART_ICR]
 80002e6:	6a01      	ldr	r1, [r0, #32]
    	ORR R1, 1 << UART_ORECF | 1 << UART_FECF
 80002e8:	f041 0108 	orr.w	r1, r1, #8
    	STR R1, [R0, USART_ICR]
 80002ec:	6201      	str	r1, [r0, #32]
    	B receive_until_terminator
 80002ee:	e7e2      	b.n	80002b6 <receive_until_terminator>

080002f0 <tx_loop>:


@ The transfer function is used to transfer previously saved data
tx_loop:
    LDR R0,=UART
 80002f0:	4814      	ldr	r0, [pc, #80]	@ (8000344 <main+0x10>)
    LDR R3,=incoming_buffer
 80002f2:	4b15      	ldr	r3, [pc, #84]	@ (8000348 <main+0x14>)
    MOV R4,R9
 80002f4:	464c      	mov	r4, r9

080002f6 <tx_uart>:

tx_uart:
    LDR R1,[R0, USART_ISR]
 80002f6:	69c1      	ldr	r1, [r0, #28]
    TST R1,1 << UART_TXE
 80002f8:	f011 0f80 	tst.w	r1, #128	@ 0x80
    BEQ tx_uart
 80002fc:	d0fb      	beq.n	80002f6 <tx_uart>

    LDRB R5,[R3], #1
 80002fe:	f813 5b01 	ldrb.w	r5, [r3], #1
    STRB R5,[R0, USART_TDR]
 8000302:	f880 5028 	strb.w	r5, [r0, #40]	@ 0x28
    SUBS R4,#1
 8000306:	3c01      	subs	r4, #1
    BGT tx_uart
 8000308:	dcf5      	bgt.n	80002f6 <tx_uart>
    LDR R3,=success_msg
 800030a:	4b12      	ldr	r3, [pc, #72]	@ (8000354 <main+0x20>)

0800030c <tx_success_loop>:

@ Transfer message Success
tx_success_loop:
    LDRB R5,[R3],#1
 800030c:	f813 5b01 	ldrb.w	r5, [r3], #1
    CMP R5,#0
 8000310:	2d00      	cmp	r5, #0
    BEQ restart_loop
 8000312:	d006      	beq.n	8000322 <restart_loop>

08000314 <tx_uart_success>:

tx_uart_success:
    LDR R1,[R0, USART_ISR]
 8000314:	69c1      	ldr	r1, [r0, #28]
    TST R1,1 << UART_TXE
 8000316:	f011 0f80 	tst.w	r1, #128	@ 0x80
    BEQ tx_uart_success
 800031a:	d0fb      	beq.n	8000314 <tx_uart_success>

    STRB R5,[R0, USART_TDR]
 800031c:	f880 5028 	strb.w	r5, [r0, #40]	@ 0x28
    B tx_success_loop
 8000320:	e7f4      	b.n	800030c <tx_success_loop>

08000322 <restart_loop>:

@Empty the counter and wait to return to the next accept and transfer
restart_loop:
    MOV R8, #0
 8000322:	f04f 0800 	mov.w	r8, #0
    B receive_main
 8000326:	e7ac      	b.n	8000282 <receive_main>

08000328 <delay_loop>:

delay_loop:
    LDR R9, =0xfffff
 8000328:	f8df 902c 	ldr.w	r9, [pc, #44]	@ 8000358 <main+0x24>

0800032c <delay_inner>:
delay_inner:
    SUBS R9, #1
 800032c:	f1b9 0901 	subs.w	r9, r9, #1
    BGT delay_inner
 8000330:	dcfc      	bgt.n	800032c <delay_inner>
    BX LR
 8000332:	4770      	bx	lr

08000334 <main>:
@ define text


@ this is the entry function called from the c file
main:
	B receive_main
 8000334:	e7a5      	b.n	8000282 <receive_main>
 8000336:	0000      	.short	0x0000
	LDR R0, =RCC
 8000338:	40021000 	.word	0x40021000
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 800033c:	48001000 	.word	0x48001000
	LDR R0, =GPIOC
 8000340:	48000800 	.word	0x48000800
	LDR R0, =UART @ the base address for the register to turn clocks on/off
 8000344:	40013800 	.word	0x40013800
	LDR R0, =incoming_buffer
 8000348:	20000000 	.word	0x20000000
	LDR R1, =incoming_counter
 800034c:	20000100 	.word	0x20000100
	LDR R2, =terminator
 8000350:	2000010b 	.word	0x2000010b
    LDR R3,=success_msg
 8000354:	20000101 	.word	0x20000101
    LDR R9, =0xfffff
 8000358:	000fffff 	.word	0x000fffff

0800035c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800035c:	480d      	ldr	r0, [pc, #52]	@ (8000394 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000360:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000364:	480c      	ldr	r0, [pc, #48]	@ (8000398 <LoopForever+0x6>)
  ldr r1, =_edata
 8000366:	490d      	ldr	r1, [pc, #52]	@ (800039c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000368:	4a0d      	ldr	r2, [pc, #52]	@ (80003a0 <LoopForever+0xe>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800036c:	e002      	b.n	8000374 <LoopCopyDataInit>

0800036e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000372:	3304      	adds	r3, #4

08000374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000378:	d3f9      	bcc.n	800036e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037a:	4a0a      	ldr	r2, [pc, #40]	@ (80003a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800037c:	4c0a      	ldr	r4, [pc, #40]	@ (80003a8 <LoopForever+0x16>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000380:	e001      	b.n	8000386 <LoopFillZerobss>

08000382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000384:	3204      	adds	r2, #4

08000386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000388:	d3fb      	bcc.n	8000382 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038a:	f000 f811 	bl	80003b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038e:	f7ff ffd1 	bl	8000334 <main>

08000392 <LoopForever>:

LoopForever:
  b LoopForever
 8000392:	e7fe      	b.n	8000392 <LoopForever>
  ldr   r0, =_estack
 8000394:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800039c:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 80003a0:	08000418 	.word	0x08000418
  ldr r2, =_sbss
 80003a4:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 80003a8:	20000128 	.word	0x20000128

080003ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ac:	e7fe      	b.n	80003ac <ADC1_2_IRQHandler>
	...

080003b0 <__libc_init_array>:
 80003b0:	b570      	push	{r4, r5, r6, lr}
 80003b2:	4d0d      	ldr	r5, [pc, #52]	@ (80003e8 <__libc_init_array+0x38>)
 80003b4:	4c0d      	ldr	r4, [pc, #52]	@ (80003ec <__libc_init_array+0x3c>)
 80003b6:	1b64      	subs	r4, r4, r5
 80003b8:	10a4      	asrs	r4, r4, #2
 80003ba:	2600      	movs	r6, #0
 80003bc:	42a6      	cmp	r6, r4
 80003be:	d109      	bne.n	80003d4 <__libc_init_array+0x24>
 80003c0:	4d0b      	ldr	r5, [pc, #44]	@ (80003f0 <__libc_init_array+0x40>)
 80003c2:	4c0c      	ldr	r4, [pc, #48]	@ (80003f4 <__libc_init_array+0x44>)
 80003c4:	f000 f818 	bl	80003f8 <_init>
 80003c8:	1b64      	subs	r4, r4, r5
 80003ca:	10a4      	asrs	r4, r4, #2
 80003cc:	2600      	movs	r6, #0
 80003ce:	42a6      	cmp	r6, r4
 80003d0:	d105      	bne.n	80003de <__libc_init_array+0x2e>
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d8:	4798      	blx	r3
 80003da:	3601      	adds	r6, #1
 80003dc:	e7ee      	b.n	80003bc <__libc_init_array+0xc>
 80003de:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e2:	4798      	blx	r3
 80003e4:	3601      	adds	r6, #1
 80003e6:	e7f2      	b.n	80003ce <__libc_init_array+0x1e>
 80003e8:	08000410 	.word	0x08000410
 80003ec:	08000410 	.word	0x08000410
 80003f0:	08000410 	.word	0x08000410
 80003f4:	08000414 	.word	0x08000414

080003f8 <_init>:
 80003f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fa:	bf00      	nop
 80003fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fe:	bc08      	pop	{r3}
 8000400:	469e      	mov	lr, r3
 8000402:	4770      	bx	lr

08000404 <_fini>:
 8000404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000406:	bf00      	nop
 8000408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040a:	bc08      	pop	{r3}
 800040c:	469e      	mov	lr, r3
 800040e:	4770      	bx	lr
