
Exercise 5 Integration B2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003b8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800054c  0800054c  00002274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800054c  0800054c  00002274  2**0
                  CONTENTS
  4 .ARM          00000000  0800054c  0800054c  00002274  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800054c  0800054c  00002274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800054c  0800054c  0000154c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000550  08000550  00001550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000274  20000000  08000554  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002274  2**0
                  CONTENTS
 10 .bss          0000001c  20000274  20000274  00002274  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000290  20000290  00002274  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002274  2**0
                  CONTENTS, READONLY
 13 .debug_line   00000217  00000000  00000000  000022a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 000000cb  00000000  00000000  000024bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000055  00000000  00000000  00002586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  000025db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  00002618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000000a1  00000000  00000000  00002660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  00002701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  0000271c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000274 	.word	0x20000274
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000534 	.word	0x08000534

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000278 	.word	0x20000278
 80001d0:	08000534 	.word	0x08000534

080001d4 <enable_timer2_clock>:
.thumb

#include "definitions.s"

enable_timer2_clock:
	LDR R0, =RCC	             @ Load the base address for the timer
 80001d4:	48a6      	ldr	r0, [pc, #664]	@ (8000470 <display_loop+0x18>)
	LDR R1, [R0, APB1ENR] 	     @ Load the peripheral clock control register
 80001d6:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << TIM2EN          @ Store a 1 in bit for the TIM2 enable flag
 80001d8:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, APB1ENR]        @ Enable the timer
 80001dc:	61c1      	str	r1, [r0, #28]
	BX LR                        @ Return
 80001de:	4770      	bx	lr

080001e0 <timer_enable_peripheral_clocks>:
@ Function to enable the clocks for the peripherals we are using (A, C and E)
timer_enable_peripheral_clocks:
	LDR R0, =RCC                 @ Load the address of the RCC address boundary (for enabling the IO clock)
 80001e0:	48a3      	ldr	r0, [pc, #652]	@ (8000470 <display_loop+0x18>)
	LDR R1, [R0, #AHBENR]        @ Load the current value of the peripheral clock registers
 80001e2:	6941      	ldr	r1, [r0, #20]
	ORR R1, 1 << 21 | 1 << 19 | 1 << 17  @ 21st bit is enable GPIOE clock, 19 is GPIOC, 17 is GPIOA clock
 80001e4:	f441 1128 	orr.w	r1, r1, #2752512	@ 0x2a0000
	STR R1, [R0, #AHBENR]        @ Store the modified register back to the submodule
 80001e8:	6141      	str	r1, [r0, #20]
	BX LR                        @ Return
 80001ea:	4770      	bx	lr

080001ec <trigger_prescaler_partc>:
@ occurs to make the prescaler take effect.
@ you should use a different approach to this !
@ In your code, you should be using the ARR register to
@ set the maximum count for the timer
@ store a value for the prescaler
	LDR R0, =TIM2	             @ Load the base address for the timer
 80001ec:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
	LDR R1, =4000000             @ Make the timer overflow after counting to only 1
 80001f0:	49a0      	ldr	r1, [pc, #640]	@ (8000474 <display_loop+0x1c>)
								 // (500ms = 1 / 2 s = 4M / 8M s)
	STR R1, [R0, TIM_ARR]        @ Set the ARR register
 80001f2:	62c1      	str	r1, [r0, #44]	@ 0x2c
	LDR R8, =0x00
 80001f4:	f04f 0800 	mov.w	r8, #0
	STR R8, [R0, TIM_CNT]        @ Reset the clock
 80001f8:	f8c0 8024 	str.w	r8, [r0, #36]	@ 0x24
	NOP
 80001fc:	bf00      	nop
	NOP
 80001fe:	bf00      	nop
	BX LR
 8000200:	4770      	bx	lr

08000202 <enable_arpe>:
@ The setting of ARPE ensures that the value of ARR can be counted reasonably.
@ Prevent the cycle from not completing due to the second rewrite ARR and start a new timer directly.
enable_arpe:
    LDR R0, =TIM2
 8000202:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
    LDR R1, [R0, #TIM_CR1]
 8000206:	6801      	ldr	r1, [r0, #0]
    ORR R1, R1, #(1 << 7 | 1 << 0)  @ bit7: ARPE, bit0: CEN
 8000208:	f041 0181 	orr.w	r1, r1, #129	@ 0x81
    STR R1, [R0, #TIM_CR1]
 800020c:	6001      	str	r1, [r0, #0]
    BX LR
 800020e:	4770      	bx	lr

08000210 <initialise_power>:
@ initialise the power systems on the microcontroller
@ PWREN (enable power to the clock), SYSCFGEN system clock enable
initialise_power:
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 8000210:	4897      	ldr	r0, [pc, #604]	@ (8000470 <display_loop+0x18>)
	@ enable clock power in APB1ENR
	LDR R1, [R0, #APB1ENR]
 8000212:	69c1      	ldr	r1, [r0, #28]
	ORR R1, 1 << PWREN @ apply the bit mask for power enable
 8000214:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
	STR R1, [R0, #APB1ENR]
 8000218:	61c1      	str	r1, [r0, #28]
	@ enable clock config in APB2ENR
	LDR R1, [R0, #APB2ENR]
 800021a:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << SYSCFGEN @ apply the bit mask to allow clock configuration
 800021c:	f041 0101 	orr.w	r1, r1, #1
	STR R1, [R0, #APB2ENR]
 8000220:	6181      	str	r1, [r0, #24]
	BX LR @ return
 8000222:	4770      	bx	lr

08000224 <enable_uart>:
@
@ BAUD rate needs to change depending on whether it is 8MHz (external clock) or 24MHz (our PLL setting)
enable_uart:
	@make a note about the different ways that we set specific bits in this configuration section
	@ select which UART you want to enable
	LDR R0, =GPIOC
 8000224:	4894      	ldr	r0, [pc, #592]	@ (8000478 <display_loop+0x20>)
	@ set the alternate function for the UART pins (what ever you have selected)
	LDR R1, =0x77
 8000226:	f04f 0177 	mov.w	r1, #119	@ 0x77
	STRB R1, [R0, AFRL + 2]
 800022a:	f880 1022 	strb.w	r1, [r0, #34]	@ 0x22
	@ modify the mode of the GPIO pins you want to use to enable 'alternate function mode'
	LDR R1, [R0, GPIO_MODER]
 800022e:	6801      	ldr	r1, [r0, #0]
	ORR R1, 0xA00 @ Mask for pins to change to 'alternate function mode'
 8000230:	f441 6120 	orr.w	r1, r1, #2560	@ 0xa00
	STR R1, [R0, GPIO_MODER]
 8000234:	6001      	str	r1, [r0, #0]
	@ modify the speed of the GPIO pins you want to use to enable 'high speed'
	LDR R1, [R0, GPIO_OSPEEDR]
 8000236:	6881      	ldr	r1, [r0, #8]
	ORR R1, 0xF00 @ Mask for pins to be set as high speed
 8000238:	f441 6170 	orr.w	r1, r1, #3840	@ 0xf00
	STR R1, [R0, GPIO_OSPEEDR]
 800023c:	6081      	str	r1, [r0, #8]
	@ Set the enable bit for the specific UART you want to use
	@ Note: this might be in APB1ENR or APB2ENR
	@ you can find this out by looking in the datasheet
	LDR R0, =RCC @ the base address for the register to turn clocks on/off
 800023e:	488c      	ldr	r0, [pc, #560]	@ (8000470 <display_loop+0x18>)
	LDR R1, [R0, #APB2ENR] @ load the original value from the enable register
 8000240:	6981      	ldr	r1, [r0, #24]
	ORR R1, 1 << UART_EN  @ apply the bit mask to the previous values of the enable the UART
 8000242:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
	STR R1, [R0, #APB2ENR] @ store the modified enable register values back to RCC
 8000246:	6181      	str	r1, [r0, #24]
	@ this is the baud rate
	MOV R1, #0x46 @ from our earlier calculations (for 8MHz), store this in register R1
 8000248:	f04f 0146 	mov.w	r1, #70	@ 0x46
	LDR R0, =UART @ the base address for the register to turn clocks on/off
 800024c:	488b      	ldr	r0, [pc, #556]	@ (800047c <display_loop+0x24>)
	STRH R1, [R0, #USART_BRR] @ store this value directly in the first half word (16 bits) of
 800024e:	8181      	strh	r1, [r0, #12]
							  	 @ the baud rate register
	@ we want to set a few things here, lets define their bit positions to make it more readable
	LDR R0, =UART @ the base address for the register to set up the specified UART
 8000250:	488a      	ldr	r0, [pc, #552]	@ (800047c <display_loop+0x24>)
	LDR R1, [R0, #USART_CR1] @ load the original value from the enable register
 8000252:	6801      	ldr	r1, [r0, #0]
	ORR R1, 1 << UART_TE | 1 << UART_RE | 1 << UART_UE @ make a bit mask with a '1' for the bits to enable,
 8000254:	f041 010d 	orr.w	r1, r1, #13
 @ apply the bit mask to the previous values of the enable register
	STR R1, [R0, #USART_CR1] @ store the modified enable register values back to RCC
 8000258:	6001      	str	r1, [r0, #0]
	BX LR @ return
 800025a:	4770      	bx	lr

0800025c <enable_peripheral_clocks>:


enable_peripheral_clocks:
	LDR R0, = RCC @ load the address of the RCC address boundary (for enabling the IO clock)
 800025c:	4884      	ldr	r0, [pc, #528]	@ (8000470 <display_loop+0x18>)
	LDR R1, [R0, #AHBENR]	@ load the current value of the peripheral clock registers
 800025e:	6941      	ldr	r1, [r0, #20]
	MOV R2, 1 << GPIOA_ENABLE | 1 << GPIOE_ENABLE	@ 21st bit is enable GPIOE clock, 17 is GPIOA clock
 8000260:	f44f 1208 	mov.w	r2, #2228224	@ 0x220000
	ORR R1, R2	@Set the values of these two clocks on
 8000264:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, #AHBENR]	@Store the modified register back to the submodule
 8000268:	6141      	str	r1, [r0, #20]
	BX LR	@return from function call
 800026a:	4770      	bx	lr

0800026c <Set_LED_to_output>:


@ initialise the discovery board I/O (just outputs: inputs are selected by default)
Set_LED_to_output:
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 800026c:	4884      	ldr	r0, [pc, #528]	@ (8000480 <display_loop+0x28>)
	LDRH R1, [R0, #MODER + 2]	@Load the high half-word in the MODER Register
 800026e:	8841      	ldrh	r1, [r0, #2]
	LDR R2, =0x5555		@Load the binary value of 01 ( OUTPUT ) for each port up to 2 bytes as 0x5555 = 0x0101 0101 0101 0101
 8000270:	f245 5255 	movw	r2, #21845	@ 0x5555
	STRH R2, [R0, #MODER + 2]	@Store the new register values in the top half word presenting
 8000274:	8042      	strh	r2, [r0, #2]

	BX LR @ return from function call
 8000276:	4770      	bx	lr

08000278 <Set_button_input>:

Set_button_input:
	LDR R0, = GPIOA
 8000278:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	LDRB R1, [R0, #MODER]
 800027c:	7801      	ldrb	r1, [r0, #0]
	AND R1, #0b11111100
 800027e:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
	STRB R1, [R0, #MODER]
 8000282:	7001      	strb	r1, [r0, #0]
	BX LR
 8000284:	4770      	bx	lr

08000286 <caesar_cipher>:
// R3: 'A' or 'a' to indicate if cipher is upper/lower
// R4: Result of division required for modulo operator
// R5: Modulo divisor
caesar_cipher:
	// Register setup
	POP {R0, R1} // Pop the cipher key and string from the stack
 8000286:	bc03      	pop	{r0, r1}
	SUB R1, #1   // Start before the string (because pre-increment loop)
 8000288:	f1a1 0101 	sub.w	r1, r1, #1
	MOV R5, #26
 800028c:	f04f 051a 	mov.w	r5, #26

	// Convert cipher key to positive value in range [0, 25]
	SDIV R4, R0, R5
 8000290:	fb90 f4f5 	sdiv	r4, r0, r5
	MUL R4, R5
 8000294:	fb05 f404 	mul.w	r4, r5, r4
	SUB R0, R4
 8000298:	eba0 0004 	sub.w	r0, r0, r4
	CMP R0, #0 // Add 26 to negative values
 800029c:	2800      	cmp	r0, #0
	BGE cipher_next
 800029e:	da00      	bge.n	80002a2 <cipher_next>
	ADD R0, R5
 80002a0:	4428      	add	r0, r5

080002a2 <cipher_next>:

	cipher_next:
		// Iterate string until terminating NULLL
		LDRB R2, [R1, #1]!
 80002a2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
		CMP R2, #0
 80002a6:	2a00      	cmp	r2, #0
		BEQ cipher_finish
 80002a8:	d017      	beq.n	80002da <cipher_finish>

		// Ignore values before and after the alphabet
		CMP R2, #'A'
 80002aa:	2a41      	cmp	r2, #65	@ 0x41
		BLT cipher_next
 80002ac:	dbf9      	blt.n	80002a2 <cipher_next>
		CMP R2, #'z'
 80002ae:	2a7a      	cmp	r2, #122	@ 0x7a
		BGT cipher_next
 80002b0:	dcf7      	bgt.n	80002a2 <cipher_next>

		// Check if uppercase or lower case
		CMP R2, #'Z'
 80002b2:	2a5a      	cmp	r2, #90	@ 0x5a
		MOV R3, #'A'
 80002b4:	f04f 0341 	mov.w	r3, #65	@ 0x41
		BLE perform_cipher
 80002b8:	dd03      	ble.n	80002c2 <perform_cipher>

		CMP R2, #'a'
 80002ba:	2a61      	cmp	r2, #97	@ 0x61
		MOV R3, #'a'
 80002bc:	f04f 0361 	mov.w	r3, #97	@ 0x61
		BGE perform_cipher
 80002c0:	daff      	bge.n	80002c2 <perform_cipher>

080002c2 <perform_cipher>:

	perform_cipher:
		// Convert letter to a number [0, 25] and perform cipher
		SUB R2, R3
 80002c2:	eba2 0203 	sub.w	r2, r2, r3
		ADD R2, R0
 80002c6:	4402      	add	r2, r0

		// Modulo operation (subtract highest multiple of 26)
		UDIV R4, R2, R5
 80002c8:	fbb2 f4f5 	udiv	r4, r2, r5
		MUL R4, R5
 80002cc:	fb05 f404 	mul.w	r4, r5, r4
		SUB R2, R4
 80002d0:	eba2 0204 	sub.w	r2, r2, r4

		// Convert number back to letter of given case, store in R1
		ADD R2, R3
 80002d4:	441a      	add	r2, r3
		STRB R2, [R1]
 80002d6:	700a      	strb	r2, [r1, #0]
		B cipher_next
 80002d8:	e7e3      	b.n	80002a2 <cipher_next>

080002da <cipher_finish>:

	cipher_finish:
		BX LR
 80002da:	4770      	bx	lr

080002dc <palindrome>:
// R0 is used as a backwards iterating pointer and then to return the result
// R2 is used to test the character in R0
// R3 is used to test the character in R1
// Result is stored in R0 (1 is palindrome, 0 is not)
palindrome:
	MOV R0, R1 // Load string from R1 into R0
 80002dc:	4608      	mov	r0, r1

080002de <palindrome_loop_to_null>:

	// Set R0 pointer to end of string
	palindrome_loop_to_null:
		// Load string value into R2 and compare
		LDRB R2, [R0]
 80002de:	7802      	ldrb	r2, [r0, #0]
		CMP R2, #0
 80002e0:	2a00      	cmp	r2, #0
		ADD R0, #1
 80002e2:	f100 0001 	add.w	r0, r0, #1
		BNE palindrome_loop_to_null
 80002e6:	d1fa      	bne.n	80002de <palindrome_loop_to_null>

	// Set pointer to before string NULL terminator
	SUB R0, #0x2
 80002e8:	f1a0 0002 	sub.w	r0, r0, #2

080002ec <palindrome_loop_until_tested>:

	// Iterate pointers R1/R0 forward/backwards respectively until they pass
	palindrome_loop_until_tested:
		// Load and compare both characters
		LDRB R2, [R0]
 80002ec:	7802      	ldrb	r2, [r0, #0]
		LDRB R3, [R1]
 80002ee:	780b      	ldrb	r3, [r1, #0]
		CMP R2, R3
 80002f0:	429a      	cmp	r2, r3
		BEQ continue_palindrome
 80002f2:	d009      	beq.n	8000308 <continue_palindrome>

080002f4 <palindrome_check_capital>:

		palindrome_check_capital:
			ADD R2, #32
 80002f4:	f102 0220 	add.w	r2, r2, #32
			CMP R2, R3
 80002f8:	429a      	cmp	r2, r3
			BEQ continue_palindrome
 80002fa:	d005      	beq.n	8000308 <continue_palindrome>

080002fc <palindrome_check_capital2>:

		palindrome_check_capital2:
			ADD R3, #32
 80002fc:	f103 0320 	add.w	r3, r3, #32
			SUB R2, #32
 8000300:	f1a2 0220 	sub.w	r2, r2, #32
			CMP R2, R3
 8000304:	429a      	cmp	r2, r3
			BNE palindrome_fail
 8000306:	d108      	bne.n	800031a <palindrome_fail>

08000308 <continue_palindrome>:

		// Iterate pointers until they pass
		continue_palindrome:
			SUB R0, #0x1
 8000308:	f1a0 0001 	sub.w	r0, r0, #1
			ADD R1, #0x1
 800030c:	f101 0101 	add.w	r1, r1, #1
			CMP R0, R1
 8000310:	4288      	cmp	r0, r1
			BGT palindrome_loop_until_tested
 8000312:	dceb      	bgt.n	80002ec <palindrome_loop_until_tested>

08000314 <palindrome_pass>:

	// Return 1 if string is a palindrome, else 0
	palindrome_pass:
		MOV R0, #1
 8000314:	f04f 0001 	mov.w	r0, #1
		BX LR
 8000318:	4770      	bx	lr

0800031a <palindrome_fail>:

	palindrome_fail:
		MOV R0, #0
 800031a:	f04f 0000 	mov.w	r0, #0
		BX LR
 800031e:	4770      	bx	lr

08000320 <receive_main>:
terminator: .byte '*'

.text
// Example on how to use the receive string function
receive_main:
	BL initialise_power				@ Power on the STM32 board
 8000320:	f7ff ff76 	bl	8000210 <initialise_power>
	BL enable_peripheral_clocks		@ Initializes and peripheral clocks
 8000324:	f7ff ff9a 	bl	800025c <enable_peripheral_clocks>
	BL Set_LED_to_output			@ Initialize the board
 8000328:	f7ff ffa0 	bl	800026c <Set_LED_to_output>
	BL enable_uart					@ Initialize the UART
 800032c:	f7ff ff7a 	bl	8000224 <enable_uart>

	// Setup and call the receive string function
	LDR R0, =incoming_buffer
 8000330:	4854      	ldr	r0, [pc, #336]	@ (8000484 <display_loop+0x2c>)
	LDR R1, =incoming_counter
 8000332:	4955      	ldr	r1, [pc, #340]	@ (8000488 <display_loop+0x30>)
	LDRB R1, [R1]
 8000334:	7809      	ldrb	r1, [r1, #0]
	LDR R2, =terminator
 8000336:	4a55      	ldr	r2, [pc, #340]	@ (800048c <display_loop+0x34>)
	LDRB R2, [R2]
 8000338:	7812      	ldrb	r2, [r2, #0]
	PUSH {R0, R1, R2}
 800033a:	b407      	push	{r0, r1, r2}
	BL receive_string
 800033c:	f000 f804 	bl	8000348 <receive_string>

	// Append a NULL terminator to the end of the used buffer space
	LDR R1, =incoming_buffer
 8000340:	4950      	ldr	r1, [pc, #320]	@ (8000484 <display_loop+0x2c>)
	MOV R2, #0
 8000342:	f04f 0200 	mov.w	r2, #0
	STRB R2, [R1, R0]
 8000346:	540a      	strb	r2, [r1, r0]

08000348 <receive_string>:
// R2: Recieved byte
// R3: Buffer index
// R4 to R6: Arguments
// Returns the index after the final character read into the buffer
receive_string:
	POP {R4, R5, R6}
 8000348:	bc70      	pop	{r4, r5, r6}
	LDR R0, =UART
 800034a:	484c      	ldr	r0, [pc, #304]	@ (800047c <display_loop+0x24>)
	MOV R3, #0
 800034c:	f04f 0300 	mov.w	r3, #0

08000350 <receive_until_terminator>:

	receive_until_terminator:
		// Check USART Interrupt and Status Register for overrun and frame
		// errors and check if RX buffer has changed (Not Equal)
		LDR R1, [R0, USART_ISR]
 8000350:	69c1      	ldr	r1, [r0, #28]
		TST R1, 1 << UART_ORE | 1 << UART_FE
 8000352:	f011 0f0a 	tst.w	r1, #10
		BNE clear_error
 8000356:	d112      	bne.n	800037e <clear_error>
		TST R1, 1 << UART_RXNE
 8000358:	f011 0f20 	tst.w	r1, #32
		BEQ receive_until_terminator
 800035c:	d0f8      	beq.n	8000350 <receive_until_terminator>

		// Load received byte from receive data register and check for terminator
		LDRB R2, [R0, USART_RDR]
 800035e:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
		CMP R2, R6
 8000362:	42b2      	cmp	r2, r6
		BEQ terminator_reached
 8000364:	d005      	beq.n	8000372 <terminator_reached>

		// Store byte in buffer and increment pointer
		STRB R2, [R4, R3]
 8000366:	54e2      	strb	r2, [r4, r3]
		ADD R3, #1
 8000368:	f103 0301 	add.w	r3, r3, #1

		// Check that buffer is not full and continue loop
		CMP R3, R5
 800036c:	42ab      	cmp	r3, r5
		BGE buffer_full
 800036e:	da04      	bge.n	800037a <buffer_full>
		B receive_until_terminator
 8000370:	e7ee      	b.n	8000350 <receive_until_terminator>

08000372 <terminator_reached>:

	terminator_reached:
		ADD R3, #1
 8000372:	f103 0301 	add.w	r3, r3, #1
		MOV R0, R3
 8000376:	4618      	mov	r0, r3
		BX LR
 8000378:	4770      	bx	lr

0800037a <buffer_full>:

	buffer_full:
		MOV R0, R3
 800037a:	4618      	mov	r0, r3
		BX LR
 800037c:	4770      	bx	lr

0800037e <clear_error>:

	// Clear the overrun/frame error flags using the Interrupt Clear Flag Register
	clear_error:
   		LDR R1, [R0, USART_ICR]
 800037e:	6a01      	ldr	r1, [r0, #32]
    	ORR R1, 1 << UART_ORECF | 1 << UART_FECF
 8000380:	f041 0108 	orr.w	r1, r1, #8
    	STR R1, [R0, USART_ICR]
 8000384:	6201      	str	r1, [r0, #32]
    	B receive_until_terminator
 8000386:	e7e3      	b.n	8000350 <receive_until_terminator>

08000388 <Vowels>:
.syntax unified
.thumb

.text
Vowels:
	LDR R1, =0b0 //Count Letters
 8000388:	f04f 0100 	mov.w	r1, #0
	LDR R3, =0b0 //Count vowels
 800038c:	f04f 0300 	mov.w	r3, #0
	LDR R5, =0b0 //Switch Vowel/Cons
 8000390:	f04f 0500 	mov.w	r5, #0

08000394 <count_letters>:

count_letters:
	LDRB R2, [R0], #1    // After loading byte pointer is incremented by 1
 8000394:	f810 2b01 	ldrb.w	r2, [r0], #1
    CMP R2, #0           // Check if reached the end of the string
 8000398:	2a00      	cmp	r2, #0
    BEQ continue
 800039a:	d00c      	beq.n	80003b6 <continue>
	B Checkif_letter
 800039c:	e7ff      	b.n	800039e <Checkif_letter>

0800039e <Checkif_letter>:

Checkif_letter:
//If character is less than 'A' it is not a letter
	CMP   R2, #'A'
 800039e:	2a41      	cmp	r2, #65	@ 0x41
    BLT count_letters
 80003a0:	dbf8      	blt.n	8000394 <count_letters>
//If character is greater than 'Z' could not be a letter
    CMP   R2, #'Z'
 80003a2:	2a5a      	cmp	r2, #90	@ 0x5a
    BGT Check_lowercase
 80003a4:	dcff      	bgt.n	80003a6 <Check_lowercase>

080003a6 <Check_lowercase>:

Check_lowercase:
//If character is less than 'a' and greater than 'Z' it is not a letter
	CMP R2, #'a'
 80003a6:	2a61      	cmp	r2, #97	@ 0x61
	BLT count_letters
 80003a8:	dbf4      	blt.n	8000394 <count_letters>
//If character is greater than 'z' it is not a letter
	CMP R2, #'z'
 80003aa:	2a7a      	cmp	r2, #122	@ 0x7a
	BGT count_letters
 80003ac:	dcf2      	bgt.n	8000394 <count_letters>
	B Add_letter
 80003ae:	e7ff      	b.n	80003b0 <Add_letter>

080003b0 <Add_letter>:

Add_letter:
	ADD R1, #0b1        // Add 1 to the letters counter
 80003b0:	f101 0101 	add.w	r1, r1, #1
	B count_letters
 80003b4:	e7ee      	b.n	8000394 <count_letters>

080003b6 <continue>:

	continue:
    	LDR R0, =test_string // Reload the string from the start
 80003b6:	4836      	ldr	r0, [pc, #216]	@ (8000490 <display_loop+0x38>)
    	B vowel_lowercase
 80003b8:	e7ff      	b.n	80003ba <vowel_lowercase>

080003ba <vowel_lowercase>:

    vowel_lowercase:
        LDRB R4, [R0], #1    // After loading byte pointer is incremented by 1
 80003ba:	f810 4b01 	ldrb.w	r4, [r0], #1
        CMP R4, #0           // Check if reached the end of the string
 80003be:	2c00      	cmp	r4, #0
        BEQ end_lowercase
 80003c0:	d009      	beq.n	80003d6 <end_lowercase>
       // If less than 'A', it's not an uppercase letter
        CMP R4, #'A'
 80003c2:	2c41      	cmp	r4, #65	@ 0x41
        BLT vowel_lowercase
 80003c4:	dbf9      	blt.n	80003ba <vowel_lowercase>
        // If greater than 'Z', it's not an uppercase letter
        CMP R4, #'Z'
 80003c6:	2c5a      	cmp	r4, #90	@ 0x5a
        BGT vowel_lowercase
 80003c8:	dcf7      	bgt.n	80003ba <vowel_lowercase>
        ADD R4, #32		// Convert to lowercase by adding 32 (as shown in the ASCII table this converts to lowercase)
 80003ca:	f104 0420 	add.w	r4, r4, #32
        SUB R0, #1
 80003ce:	f1a0 0001 	sub.w	r0, r0, #1
        STRB R4, [R0]   // Store the modified character at the point it was found
 80003d2:	7004      	strb	r4, [r0, #0]
        B vowel_lowercase
 80003d4:	e7f1      	b.n	80003ba <vowel_lowercase>

080003d6 <end_lowercase>:

	end_lowercase:
		LDR R0, =test_string //Reload the string from the start
 80003d6:	482e      	ldr	r0, [pc, #184]	@ (8000490 <display_loop+0x38>)
    	B count_vowels
 80003d8:	e7ff      	b.n	80003da <count_vowels>

080003da <count_vowels>:

    count_vowels:
    	LDRB R2, [R0], #1	// After loading byte pointer is incremented by 1
 80003da:	f810 2b01 	ldrb.w	r2, [r0], #1
    	//Check if the loaded byte is equal to a vowel, if so add 1 to R3 (vowel counter)
    	CMP R2, 'e'
 80003de:	2a65      	cmp	r2, #101	@ 0x65
    	BEQ add_vowel
 80003e0:	d00a      	beq.n	80003f8 <add_vowel>
    	CMP R2, 'i'
 80003e2:	2a69      	cmp	r2, #105	@ 0x69
    	BEQ add_vowel
 80003e4:	d008      	beq.n	80003f8 <add_vowel>
    	CMP R2, 'o'
 80003e6:	2a6f      	cmp	r2, #111	@ 0x6f
    	BEQ add_vowel
 80003e8:	d006      	beq.n	80003f8 <add_vowel>
    	CMP R2, 'u'
 80003ea:	2a75      	cmp	r2, #117	@ 0x75
    	BEQ add_vowel
 80003ec:	d004      	beq.n	80003f8 <add_vowel>
    	CMP R2, 'a'
 80003ee:	2a61      	cmp	r2, #97	@ 0x61
    	BEQ add_vowel
 80003f0:	d002      	beq.n	80003f8 <add_vowel>
    	//Loop until end of the string (null terminator)
    	CMP R2, #0
 80003f2:	2a00      	cmp	r2, #0
    	BEQ end
 80003f4:	d003      	beq.n	80003fe <end>
    	B count_vowels
 80003f6:	e7f0      	b.n	80003da <count_vowels>

080003f8 <add_vowel>:

    add_vowel:
    	ADD R3, #0b1
 80003f8:	f103 0301 	add.w	r3, r3, #1
    	B count_vowels
 80003fc:	e7ed      	b.n	80003da <count_vowels>

080003fe <end>:
    end:
    	//Subtract vowles from letters to get consonants count
    	SUB R1, R3
 80003fe:	eba1 0103 	sub.w	r1, r1, r3
    	BX LR
 8000402:	4770      	bx	lr

08000404 <set_led_state>:

.text
// Utility functions
set_led_state:
	// Replace GPIOE ODR with R3 bitmask
	LDR R1, =GPIOE
 8000404:	491e      	ldr	r1, [pc, #120]	@ (8000480 <display_loop+0x28>)
	STRB R3, [R1, #ODR + 1]
 8000406:	754b      	strb	r3, [r1, #21]
	BX LR
 8000408:	4770      	bx	lr

0800040a <delayfunction>:

delayfunction:
    LDR R0, =TIM2                 	@ Loads the base address of the Timer2 to R0
 800040a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000

0800040e <wait_loop>:
wait_loop:
    LDR R1, [R0, #TIM_SR]         	@ Load the Timer 2 Status Register (TIM_SR) into R1
 800040e:	6901      	ldr	r1, [r0, #16]
    TST R1, #1                    	@ Test if the Update Interrupt Flag (UIF) is set
 8000410:	f011 0f01 	tst.w	r1, #1
    BEQ wait_loop                 	@ Continue to wait
 8000414:	d0fb      	beq.n	800040e <wait_loop>

    MOV R2, #0                    	@ Clear the value of the UIF flag
 8000416:	f04f 0200 	mov.w	r2, #0
    STR R2, [R0, #TIM_SR]
 800041a:	6102      	str	r2, [r0, #16]
    BX LR
 800041c:	4770      	bx	lr

0800041e <main>:

main:
    // Initialise GPIO registers
	BL enable_peripheral_clocks // Branch with link to set the clocks for the I/O and UART
 800041e:	f7ff ff1d 	bl	800025c <enable_peripheral_clocks>
	BL Set_LED_to_output        // Once the clocks are started, need to initialise the discovery board I/O
 8000422:	f7ff ff23 	bl	800026c <Set_LED_to_output>
	BL enable_timer2_clock
 8000426:	f7ff fed5 	bl	80001d4 <enable_timer2_clock>
	BL timer_enable_peripheral_clocks
 800042a:	f7ff fed9 	bl	80001e0 <timer_enable_peripheral_clocks>
	BL trigger_prescaler_partc
 800042e:	f7ff fedd 	bl	80001ec <trigger_prescaler_partc>
	BL enable_arpe
 8000432:	f7ff fee6 	bl	8000202 <enable_arpe>

08000436 <check_palindrome>:
	*/


	// Check if message is a palindrome
	check_palindrome:
		LDR R1, =test_string ///////////////////
 8000436:	4916      	ldr	r1, [pc, #88]	@ (8000490 <display_loop+0x38>)
		BL palindrome
 8000438:	f7ff ff50 	bl	80002dc <palindrome>

		// Decipher palindrome messages (R0 is 1 if palindrome, otherwise 0)
		CMP R0, #1
 800043c:	2801      	cmp	r0, #1
		BEQ decipher
 800043e:	d000      	beq.n	8000442 <decipher>
		B display_message_info // Go straight to display if not a palindrome
 8000440:	e005      	b.n	800044e <display_message_info>

08000442 <decipher>:

	decipher:
		// Setup and run cipher
		LDR R0, =decipher_key
 8000442:	4814      	ldr	r0, [pc, #80]	@ (8000494 <display_loop+0x3c>)
		LDR R0, [R0]
 8000444:	6800      	ldr	r0, [r0, #0]
		LDR R1, =test_string
 8000446:	4912      	ldr	r1, [pc, #72]	@ (8000490 <display_loop+0x38>)
		PUSH {R0, R1}
 8000448:	b403      	push	{r0, r1}
		BL caesar_cipher
 800044a:	f7ff ff1c 	bl	8000286 <caesar_cipher>

0800044e <display_message_info>:

	display_message_info:
		// String input for vowels function is R0
		MOV R0, R1
 800044e:	4608      	mov	r0, r1

		// Count vowels and consonants in R6 and R7 respectively (from R3, R1 respectively)
		BL Vowels
 8000450:	f7ff ff9a 	bl	8000388 <Vowels>
		MOV R6, R3
 8000454:	461e      	mov	r6, r3
		MOV R7, R1
 8000456:	460f      	mov	r7, r1

08000458 <display_loop>:

	display_loop:
		// Show vowels count
		MOV R3, R6
 8000458:	4633      	mov	r3, r6
		BL set_led_state
 800045a:	f7ff ffd3 	bl	8000404 <set_led_state>

		// Delay
		BL delayfunction
 800045e:	f7ff ffd4 	bl	800040a <delayfunction>

		// Show consonants
		MOV R3, R7
 8000462:	463b      	mov	r3, r7
		BL set_led_state
 8000464:	f7ff ffce 	bl	8000404 <set_led_state>

		// Delay
		BL delayfunction
 8000468:	f7ff ffcf 	bl	800040a <delayfunction>

		B display_loop
 800046c:	e7f4      	b.n	8000458 <display_loop>
 800046e:	0000      	.short	0x0000
	LDR R0, =RCC	             @ Load the base address for the timer
 8000470:	40021000 	.word	0x40021000
	LDR R1, =4000000             @ Make the timer overflow after counting to only 1
 8000474:	003d0900 	.word	0x003d0900
	LDR R0, =GPIOC
 8000478:	48000800 	.word	0x48000800
	LDR R0, =UART @ the base address for the register to turn clocks on/off
 800047c:	40013800 	.word	0x40013800
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 8000480:	48001000 	.word	0x48001000
	LDR R0, =incoming_buffer
 8000484:	20000000 	.word	0x20000000
	LDR R1, =incoming_counter
 8000488:	20000100 	.word	0x20000100
	LDR R2, =terminator
 800048c:	20000101 	.word	0x20000101
    	LDR R0, =test_string // Reload the string from the start
 8000490:	20000106 	.word	0x20000106
		LDR R0, =decipher_key
 8000494:	20000102 	.word	0x20000102

08000498 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000498:	480d      	ldr	r0, [pc, #52]	@ (80004d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800049a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800049c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004a0:	480c      	ldr	r0, [pc, #48]	@ (80004d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80004a2:	490d      	ldr	r1, [pc, #52]	@ (80004d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004a4:	4a0d      	ldr	r2, [pc, #52]	@ (80004dc <LoopForever+0xe>)
  movs r3, #0
 80004a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004a8:	e002      	b.n	80004b0 <LoopCopyDataInit>

080004aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ae:	3304      	adds	r3, #4

080004b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004b4:	d3f9      	bcc.n	80004aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004b6:	4a0a      	ldr	r2, [pc, #40]	@ (80004e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004b8:	4c0a      	ldr	r4, [pc, #40]	@ (80004e4 <LoopForever+0x16>)
  movs r3, #0
 80004ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004bc:	e001      	b.n	80004c2 <LoopFillZerobss>

080004be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004c0:	3204      	adds	r2, #4

080004c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004c4:	d3fb      	bcc.n	80004be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004c6:	f000 f811 	bl	80004ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ca:	f7ff ffa8 	bl	800041e <main>

080004ce <LoopForever>:

LoopForever:
  b LoopForever
 80004ce:	e7fe      	b.n	80004ce <LoopForever>
  ldr   r0, =_estack
 80004d0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80004d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004d8:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 80004dc:	08000554 	.word	0x08000554
  ldr r2, =_sbss
 80004e0:	20000274 	.word	0x20000274
  ldr r4, =_ebss
 80004e4:	20000290 	.word	0x20000290

080004e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004e8:	e7fe      	b.n	80004e8 <ADC1_2_IRQHandler>
	...

080004ec <__libc_init_array>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	4d0d      	ldr	r5, [pc, #52]	@ (8000524 <__libc_init_array+0x38>)
 80004f0:	4c0d      	ldr	r4, [pc, #52]	@ (8000528 <__libc_init_array+0x3c>)
 80004f2:	1b64      	subs	r4, r4, r5
 80004f4:	10a4      	asrs	r4, r4, #2
 80004f6:	2600      	movs	r6, #0
 80004f8:	42a6      	cmp	r6, r4
 80004fa:	d109      	bne.n	8000510 <__libc_init_array+0x24>
 80004fc:	4d0b      	ldr	r5, [pc, #44]	@ (800052c <__libc_init_array+0x40>)
 80004fe:	4c0c      	ldr	r4, [pc, #48]	@ (8000530 <__libc_init_array+0x44>)
 8000500:	f000 f818 	bl	8000534 <_init>
 8000504:	1b64      	subs	r4, r4, r5
 8000506:	10a4      	asrs	r4, r4, #2
 8000508:	2600      	movs	r6, #0
 800050a:	42a6      	cmp	r6, r4
 800050c:	d105      	bne.n	800051a <__libc_init_array+0x2e>
 800050e:	bd70      	pop	{r4, r5, r6, pc}
 8000510:	f855 3b04 	ldr.w	r3, [r5], #4
 8000514:	4798      	blx	r3
 8000516:	3601      	adds	r6, #1
 8000518:	e7ee      	b.n	80004f8 <__libc_init_array+0xc>
 800051a:	f855 3b04 	ldr.w	r3, [r5], #4
 800051e:	4798      	blx	r3
 8000520:	3601      	adds	r6, #1
 8000522:	e7f2      	b.n	800050a <__libc_init_array+0x1e>
 8000524:	0800054c 	.word	0x0800054c
 8000528:	0800054c 	.word	0x0800054c
 800052c:	0800054c 	.word	0x0800054c
 8000530:	08000550 	.word	0x08000550

08000534 <_init>:
 8000534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000536:	bf00      	nop
 8000538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800053a:	bc08      	pop	{r3}
 800053c:	469e      	mov	lr, r3
 800053e:	4770      	bx	lr

08000540 <_fini>:
 8000540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000542:	bf00      	nop
 8000544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000546:	bc08      	pop	{r3}
 8000548:	469e      	mov	lr, r3
 800054a:	4770      	bx	lr
