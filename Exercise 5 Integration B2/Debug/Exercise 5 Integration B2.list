
Exercise 5 Integration B2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002b0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000444  08000444  00002054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000444  08000444  00002054  2**0
                  CONTENTS
  4 .ARM          00000000  08000444  08000444  00002054  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000444  08000444  00002054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000444  08000444  00001444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000448  08000448  00001448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  0800044c  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002054  2**0
                  CONTENTS
 10 .bss          0000001c  20000054  20000054  00002054  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000070  20000070  00002054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002054  2**0
                  CONTENTS, READONLY
 13 .debug_line   000001a1  00000000  00000000  00002084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 000000b4  00000000  00000000  00002225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000055  00000000  00000000  000022d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  0000232e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  00002368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000000a1  00000000  00000000  000023b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  00002451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  0000246c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000054 	.word	0x20000054
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800042c 	.word	0x0800042c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000058 	.word	0x20000058
 80001d0:	0800042c 	.word	0x0800042c

080001d4 <enable_peripheral_clocks>:

#include "definitions.s"


enable_peripheral_clocks:
	LDR R0, = RCC @ load the address of the RCC address boundary (for enabling the IO clock)
 80001d4:	4866      	ldr	r0, [pc, #408]	@ (8000370 <display_loop+0xe>)
	LDR R1, [R0, #AHBENR]	@ load the current value of the peripheral clock registers
 80001d6:	6941      	ldr	r1, [r0, #20]
	MOV R2, 1 << GPIOA_ENABLE | 1 << GPIOE_ENABLE	@ 21st bit is enable GPIOE clock, 17 is GPIOA clock
 80001d8:	f44f 1208 	mov.w	r2, #2228224	@ 0x220000
	ORR R1, R2	@Set the values of these two clocks on
 80001dc:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, #AHBENR]	@Store the modified register back to the submodule
 80001e0:	6141      	str	r1, [r0, #20]
	BX LR	@return from function call
 80001e2:	4770      	bx	lr

080001e4 <Set_LED_to_output>:


@ initialise the discovery board I/O (just outputs: inputs are selected by default)
Set_LED_to_output:
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80001e4:	4863      	ldr	r0, [pc, #396]	@ (8000374 <display_loop+0x12>)
	LDRH R1, [R0, #MODER + 2]	@Load the high half-word in the MODER Register
 80001e6:	8841      	ldrh	r1, [r0, #2]
	LDR R2, =0x5555		@Load the binary value of 01 ( OUTPUT ) for each port up to 2 bytes as 0x5555 = 0x0101 0101 0101 0101
 80001e8:	f245 5255 	movw	r2, #21845	@ 0x5555
	STRH R2, [R0, #MODER + 2]	@Store the new register values in the top half word presenting
 80001ec:	8042      	strh	r2, [r0, #2]

	BX LR @ return from function call
 80001ee:	4770      	bx	lr

080001f0 <Set_button_input>:

Set_button_input:
	LDR R0, = GPIOA
 80001f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	LDRB R1, [R0, #MODER]
 80001f4:	7801      	ldrb	r1, [r0, #0]
	AND R1, #0b11111100
 80001f6:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
	STRB R1, [R0, #MODER]
 80001fa:	7001      	strb	r1, [r0, #0]
	BX LR
 80001fc:	4770      	bx	lr

080001fe <start_caesar_cipher>:
asciii_string: .asciz "ABcd\0"
string_bufferr: .space 10          @ Destination buffer (10 bytes)

.text
start_caesar_cipher:
    LDR R0,=3            	@ Caesar cipher shift (could be 3 or -3)
 80001fe:	f04f 0003 	mov.w	r0, #3
    LDR R1,=asciii_string
 8000202:	495d      	ldr	r1, [pc, #372]	@ (8000378 <display_loop+0x16>)
    LDR R2,=string_bufferr
 8000204:	4a5d      	ldr	r2, [pc, #372]	@ (800037c <display_loop+0x1a>)
    LDR R3,=0x00         	@ R3 is the index (starting at 0)
 8000206:	f04f 0300 	mov.w	r3, #0

0800020a <caesar_cipher>:

caesar_cipher:
    LDRB R4,[R1,R3]     	@ Read one character from the string
 800020a:	5ccc      	ldrb	r4, [r1, r3]
    CMP R4,#0            	@ Check if it is '\0'
 800020c:	2c00      	cmp	r4, #0
    BEQ finished_string
 800020e:	d033      	beq.n	8000278 <finished_string>

    CMP R4,#'A'
 8000210:	2c41      	cmp	r4, #65	@ 0x41
    BLT store_character
 8000212:	db2d      	blt.n	8000270 <store_character>

    CMP R4,#'Z'
 8000214:	2c5a      	cmp	r4, #90	@ 0x5a
    BGT check_lowercase
 8000216:	dc00      	bgt.n	800021a <check_lowercase>

    B uppercase
 8000218:	e004      	b.n	8000224 <uppercase>

0800021a <check_lowercase>:

check_lowercase:
    CMP R4,#'a'
 800021a:	2c61      	cmp	r4, #97	@ 0x61
    BLT store_character
 800021c:	db28      	blt.n	8000270 <store_character>

    CMP R4,#'z'
 800021e:	2c7a      	cmp	r4, #122	@ 0x7a
    BGT store_character
 8000220:	dc26      	bgt.n	8000270 <store_character>

    B lowercase
 8000222:	e012      	b.n	800024a <lowercase>

08000224 <uppercase>:

uppercase:
    MOV R5,#0           	 @ Clear R5
 8000224:	f04f 0500 	mov.w	r5, #0
    SUB R5,R4,#'A'      	@ Find position in the alphabet (0–25)
 8000228:	f1a4 0541 	sub.w	r5, r4, #65	@ 0x41
    ADD R5,R5,R0        	@ Add the shift (R0)
 800022c:	4405      	add	r5, r0

    CMP R5,#0            	@ Check if below 0
 800022e:	2d00      	cmp	r5, #0
    BGE check_upper_26
 8000230:	da01      	bge.n	8000236 <check_upper_26>
    ADD R5,R5,#26       	@ If below 0, wrap around (add 26)
 8000232:	f105 051a 	add.w	r5, r5, #26

08000236 <check_upper_26>:

check_upper_26:
    CMP R5,#26           	@ If 26 or more, we need to wrap
 8000236:	2d1a      	cmp	r5, #26
    BLT normal_case_upper
 8000238:	db04      	blt.n	8000244 <normal_case_upper>
    SUB R5,#26           	@ Subtract 26 to wrap within 0–25
 800023a:	f1a5 051a 	sub.w	r5, r5, #26

    ADD R4,R5,#'A'      	@ Convert back to ASCII
 800023e:	f105 0441 	add.w	r4, r5, #65	@ 0x41
    B store_character
 8000242:	e015      	b.n	8000270 <store_character>

08000244 <normal_case_upper>:

normal_case_upper:
    ADD R4,R5,#'A'      	@ Convert the shifted value back to uppercase
 8000244:	f105 0441 	add.w	r4, r5, #65	@ 0x41
    B store_character
 8000248:	e012      	b.n	8000270 <store_character>

0800024a <lowercase>:

lowercase:
    MOV R5,#0            	@ Clear R5
 800024a:	f04f 0500 	mov.w	r5, #0
    SUB R5,R4,#'a'      	@ Find position in the alphabet (0–25)
 800024e:	f1a4 0561 	sub.w	r5, r4, #97	@ 0x61
    ADD R5,R5,R0        	@ Add the shift (R0)
 8000252:	4405      	add	r5, r0

    CMP R5,#0            	@ Check if below 0
 8000254:	2d00      	cmp	r5, #0
    BGE check_lower_26
 8000256:	da01      	bge.n	800025c <check_lower_26>
    ADD R5,R5,#26       	@ If below 0, wrap around
 8000258:	f105 051a 	add.w	r5, r5, #26

0800025c <check_lower_26>:

check_lower_26:
    CMP R5,#26
 800025c:	2d1a      	cmp	r5, #26
    BLT normal_case_lower
 800025e:	db04      	blt.n	800026a <normal_case_lower>
    SUB R5,#26          	 @ Wrap if >= 26
 8000260:	f1a5 051a 	sub.w	r5, r5, #26
    ADD R4,R5,#'a'      	@ Convert back to ASCII
 8000264:	f105 0461 	add.w	r4, r5, #97	@ 0x61
    B store_character
 8000268:	e002      	b.n	8000270 <store_character>

0800026a <normal_case_lower>:

normal_case_lower:
    ADD R4,R5,#'a'      	@ Convert the shifted value back to lowercase
 800026a:	f105 0461 	add.w	r4, r5, #97	@ 0x61
    B store_character
 800026e:	e7ff      	b.n	8000270 <store_character>

08000270 <store_character>:

store_character:
    STRB R4,[R2, R3]     	@ Store the processed character in the destination
 8000270:	54d4      	strb	r4, [r2, r3]
    ADD R3,R3,#1        	@ Move to the next character
 8000272:	f103 0301 	add.w	r3, r3, #1
    B caesar_cipher       	@ Repeat for the next source character
 8000276:	e7c8      	b.n	800020a <caesar_cipher>

08000278 <finished_string>:

finished_string:
    MOV R4,#0            	@ Load 0 into R4
 8000278:	f04f 0400 	mov.w	r4, #0
    STRB R4,[R2, R3]
 800027c:	54d4      	strb	r4, [r2, r3]
    BX LR
 800027e:	4770      	bx	lr

08000280 <palindrome>:
 * R0 is used as a backwards iterating pointer
 * Result is stored in R0 (1 is palindrome, 0 is not)
 */
palindrome:
	// Load the address of the string into R0
	MOV R0, R1
 8000280:	4608      	mov	r0, r1

08000282 <palindrome_loop_to_null>:

	// Set R0 pointer to end of string
	palindrome_loop_to_null:
		// Load string value into R2 and compare
		LDRB R2, [R0]
 8000282:	7802      	ldrb	r2, [r0, #0]
		CMP R2, #0x0
 8000284:	2a00      	cmp	r2, #0
		ADD R0, #0x1
 8000286:	f100 0001 	add.w	r0, r0, #1
		BNE palindrome_loop_to_null
 800028a:	d1fa      	bne.n	8000282 <palindrome_loop_to_null>

	// Set pointer to before string NULL terminator
	SUB R0, #0x2
 800028c:	f1a0 0002 	sub.w	r0, r0, #2

08000290 <palindrome_loop_until_tested>:

	// Iterate pointers R1/R0 forward/backwards respectively until they pass
	palindrome_loop_until_tested:
		// Load and compare both characters
		LDRB R2, [R0]
 8000290:	7802      	ldrb	r2, [r0, #0]
		LDRB R3, [R1]
 8000292:	780b      	ldrb	r3, [r1, #0]
		CMP R2, R3
 8000294:	429a      	cmp	r2, r3
		BNE palindrome_fail
 8000296:	d108      	bne.n	80002aa <palindrome_fail>

		// Iterate pointers until they pass
		SUB R0, #0x1
 8000298:	f1a0 0001 	sub.w	r0, r0, #1
		ADD R1, #0x1
 800029c:	f101 0101 	add.w	r1, r1, #1
		CMP R0, R1
 80002a0:	4288      	cmp	r0, r1
		BGT palindrome_loop_until_tested
 80002a2:	dcf5      	bgt.n	8000290 <palindrome_loop_until_tested>

080002a4 <palindrome_pass>:

	// Set R0 to 1 if string is a palindrome, else 0
	palindrome_pass:
		LDR R0, =#0x1
 80002a4:	f04f 0001 	mov.w	r0, #1
		BX LR
 80002a8:	4770      	bx	lr

080002aa <palindrome_fail>:

	palindrome_fail:
		LDR R0, =#0x0
 80002aa:	f04f 0000 	mov.w	r0, #0
		BX LR
 80002ae:	4770      	bx	lr

080002b0 <Vowels>:
.syntax unified
.thumb

.text
Vowels:
	LDR R1, =0b0 //Count Letters
 80002b0:	f04f 0100 	mov.w	r1, #0
	LDR R3, =0b0 //Count vowels
 80002b4:	f04f 0300 	mov.w	r3, #0
	LDR R5, =0b0 //Switch Vowel/Cons
 80002b8:	f04f 0500 	mov.w	r5, #0

080002bc <count_letters>:

count_letters:
	LDRB R2, [R0], #1    // After loading byte pointer is incremented by 1
 80002bc:	f810 2b01 	ldrb.w	r2, [r0], #1
    CMP R2, #0           // Check if reached the end of the string
 80002c0:	2a00      	cmp	r2, #0
    BEQ continue
 80002c2:	d00c      	beq.n	80002de <continue>
	B Checkif_letter
 80002c4:	e7ff      	b.n	80002c6 <Checkif_letter>

080002c6 <Checkif_letter>:

Checkif_letter:
//If character is less than 'A' it is not a letter
	CMP   R2, #'A'
 80002c6:	2a41      	cmp	r2, #65	@ 0x41
    BLT count_letters
 80002c8:	dbf8      	blt.n	80002bc <count_letters>
//If character is greater than 'Z' could not be a letter
    CMP   R2, #'Z'
 80002ca:	2a5a      	cmp	r2, #90	@ 0x5a
    BGT Check_lowercase
 80002cc:	dcff      	bgt.n	80002ce <Check_lowercase>

080002ce <Check_lowercase>:

Check_lowercase:
//If character is less than 'a' and greater than 'Z' it is not a letter
	CMP R2, #'a'
 80002ce:	2a61      	cmp	r2, #97	@ 0x61
	BLT count_letters
 80002d0:	dbf4      	blt.n	80002bc <count_letters>
//If character is greater than 'z' it is not a letter
	CMP R2, #'z'
 80002d2:	2a7a      	cmp	r2, #122	@ 0x7a
	BGT count_letters
 80002d4:	dcf2      	bgt.n	80002bc <count_letters>
	B Add_letter
 80002d6:	e7ff      	b.n	80002d8 <Add_letter>

080002d8 <Add_letter>:

Add_letter:
	ADD R1, #0b1        // Add 1 to the letters counter
 80002d8:	f101 0101 	add.w	r1, r1, #1
	B count_letters
 80002dc:	e7ee      	b.n	80002bc <count_letters>

080002de <continue>:

	continue:
    	LDR R0, =test_string // Reload the string from the start
 80002de:	4828      	ldr	r0, [pc, #160]	@ (8000380 <display_loop+0x1e>)
    	B vowel_lowercase
 80002e0:	e7ff      	b.n	80002e2 <vowel_lowercase>

080002e2 <vowel_lowercase>:

    vowel_lowercase:
        LDRB R4, [R0], #1    // After loading byte pointer is incremented by 1
 80002e2:	f810 4b01 	ldrb.w	r4, [r0], #1
        CMP R4, #0           // Check if reached the end of the string
 80002e6:	2c00      	cmp	r4, #0
        BEQ end_lowercase
 80002e8:	d009      	beq.n	80002fe <end_lowercase>
       // If less than 'A', it's not an uppercase letter
        CMP R4, #'A'
 80002ea:	2c41      	cmp	r4, #65	@ 0x41
        BLT vowel_lowercase
 80002ec:	dbf9      	blt.n	80002e2 <vowel_lowercase>
        // If greater than 'Z', it's not an uppercase letter
        CMP R4, #'Z'
 80002ee:	2c5a      	cmp	r4, #90	@ 0x5a
        BGT vowel_lowercase
 80002f0:	dcf7      	bgt.n	80002e2 <vowel_lowercase>
        ADD R4, #32		// Convert to lowercase by adding 32 (as shown in the ASCII table this converts to lowercase)
 80002f2:	f104 0420 	add.w	r4, r4, #32
        SUB R0, #1
 80002f6:	f1a0 0001 	sub.w	r0, r0, #1
        STRB R4, [R0]   // Store the modified character at the point it was found
 80002fa:	7004      	strb	r4, [r0, #0]
        B vowel_lowercase
 80002fc:	e7f1      	b.n	80002e2 <vowel_lowercase>

080002fe <end_lowercase>:

	end_lowercase:
		LDR R0, =test_string //Reload the string from the start
 80002fe:	4820      	ldr	r0, [pc, #128]	@ (8000380 <display_loop+0x1e>)
    	B count_vowels
 8000300:	e7ff      	b.n	8000302 <count_vowels>

08000302 <count_vowels>:

    count_vowels:
    	LDRB R2, [R0], #1	// After loading byte pointer is incremented by 1
 8000302:	f810 2b01 	ldrb.w	r2, [r0], #1
    	//Check if the loaded byte is equal to a vowel, if so add 1 to R3 (vowel counter)
    	CMP R2, 'e'
 8000306:	2a65      	cmp	r2, #101	@ 0x65
    	BEQ add_vowel
 8000308:	d00a      	beq.n	8000320 <add_vowel>
    	CMP R2, 'i'
 800030a:	2a69      	cmp	r2, #105	@ 0x69
    	BEQ add_vowel
 800030c:	d008      	beq.n	8000320 <add_vowel>
    	CMP R2, 'o'
 800030e:	2a6f      	cmp	r2, #111	@ 0x6f
    	BEQ add_vowel
 8000310:	d006      	beq.n	8000320 <add_vowel>
    	CMP R2, 'u'
 8000312:	2a75      	cmp	r2, #117	@ 0x75
    	BEQ add_vowel
 8000314:	d004      	beq.n	8000320 <add_vowel>
    	CMP R2, 'a'
 8000316:	2a61      	cmp	r2, #97	@ 0x61
    	BEQ add_vowel
 8000318:	d002      	beq.n	8000320 <add_vowel>
    	//Loop until end of the string (null terminator)
    	CMP R2, #0
 800031a:	2a00      	cmp	r2, #0
    	BEQ end
 800031c:	d003      	beq.n	8000326 <end>
    	B count_vowels
 800031e:	e7f0      	b.n	8000302 <count_vowels>

08000320 <add_vowel>:

    add_vowel:
    	ADD R3, #0b1
 8000320:	f103 0301 	add.w	r3, r3, #1
    	B count_vowels
 8000324:	e7ed      	b.n	8000302 <count_vowels>

08000326 <end>:
    end:
    	//Subtract vowles from letters to get consonants count
    	SUB R1, R3
 8000326:	eba1 0103 	sub.w	r1, r1, r3
    	BX LR
 800032a:	4770      	bx	lr

0800032c <set_led_state>:
decipher_buffer: .space 32

.text
set_led_state:
	// Replace GPIOE ODR with R3 bitmask
	LDR R1, =GPIOE
 800032c:	4911      	ldr	r1, [pc, #68]	@ (8000374 <display_loop+0x12>)
	STRB R3, [R1, #ODR + 1]
 800032e:	754b      	strb	r3, [r1, #21]

	BX LR
 8000330:	4770      	bx	lr

08000332 <main>:

main:
    // Initialise GPIO registers
	BL enable_peripheral_clocks // Branch with link to set the clocks for the I/O and UART
 8000332:	f7ff ff4f 	bl	80001d4 <enable_peripheral_clocks>
	BL Set_LED_to_output        // Once the clocks are started, need to initialise the discovery board I/O
 8000336:	f7ff ff55 	bl	80001e4 <Set_LED_to_output>
	B program_loop
 800033a:	e7ff      	b.n	800033c <program_loop>

0800033c <program_loop>:
	// Poll until a message is received
	// TODO

	// Load message into R1
	// TODO
	LDR R1, =test_palindrome
 800033c:	4911      	ldr	r1, [pc, #68]	@ (8000384 <display_loop+0x22>)

0800033e <check_palindrome>:

	// Check if message is a palindrome
	check_palindrome:
		BL palindrome
 800033e:	f7ff ff9f 	bl	8000280 <palindrome>

		// Decipher palindrome messages (R0 is 1 if palindrome, otherwise 0)
		CMP R0, #0x1
 8000342:	2801      	cmp	r0, #1
		BEQ decipher
 8000344:	d000      	beq.n	8000348 <decipher>

	B display_message_info
 8000346:	e007      	b.n	8000358 <display_message_info>

08000348 <decipher>:

decipher:
	// Setup and run cipher
	LDR R0, =decipher_key
 8000348:	480f      	ldr	r0, [pc, #60]	@ (8000388 <display_loop+0x26>)
	LDR R0, [R0]
 800034a:	6800      	ldr	r0, [r0, #0]
	LDR R2, =decipher_buffer
 800034c:	4a0f      	ldr	r2, [pc, #60]	@ (800038c <display_loop+0x2a>)
	LDR R3, =0x00
 800034e:	f04f 0300 	mov.w	r3, #0
	BL caesar_cipher
 8000352:	f7ff ff5a 	bl	800020a <caesar_cipher>
	B display_message_info
 8000356:	e7ff      	b.n	8000358 <display_message_info>

08000358 <display_message_info>:

display_message_info:
	// String input for vowels function is R0
	MOV R0, R1
 8000358:	4608      	mov	r0, r1

	// Count vowels and consonants in R6 and R7 respectively (from R3, R1 respectively)
	BL Vowels
 800035a:	f7ff ffa9 	bl	80002b0 <Vowels>
	MOV R6, R3
 800035e:	461e      	mov	r6, r3
	MOV R7, R1
 8000360:	460f      	mov	r7, r1

08000362 <display_loop>:

	display_loop:
		// Show vowels count
		MOV R3, R6
 8000362:	4633      	mov	r3, r6
		BL set_led_state
 8000364:	f7ff ffe2 	bl	800032c <set_led_state>

		// Delay
		// TODO

		// Show consonants
		MOV R3, R7
 8000368:	463b      	mov	r3, r7
		BL set_led_state
 800036a:	f7ff ffdf 	bl	800032c <set_led_state>

		// Delay
		// TODO

		B display_loop
 800036e:	e7f8      	b.n	8000362 <display_loop>
	LDR R0, = RCC @ load the address of the RCC address boundary (for enabling the IO clock)
 8000370:	40021000 	.word	0x40021000
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 8000374:	48001000 	.word	0x48001000
    LDR R1,=asciii_string
 8000378:	20000000 	.word	0x20000000
    LDR R2,=string_bufferr
 800037c:	20000006 	.word	0x20000006
    	LDR R0, =test_string // Reload the string from the start
 8000380:	20000014 	.word	0x20000014
	LDR R1, =test_palindrome
 8000384:	2000002b 	.word	0x2000002b
	LDR R0, =decipher_key
 8000388:	20000010 	.word	0x20000010
	LDR R2, =decipher_buffer
 800038c:	20000031 	.word	0x20000031

08000390 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000390:	480d      	ldr	r0, [pc, #52]	@ (80003c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000392:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000394:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000398:	480c      	ldr	r0, [pc, #48]	@ (80003cc <LoopForever+0x6>)
  ldr r1, =_edata
 800039a:	490d      	ldr	r1, [pc, #52]	@ (80003d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800039c:	4a0d      	ldr	r2, [pc, #52]	@ (80003d4 <LoopForever+0xe>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a0:	e002      	b.n	80003a8 <LoopCopyDataInit>

080003a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a6:	3304      	adds	r3, #4

080003a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ac:	d3f9      	bcc.n	80003a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ae:	4a0a      	ldr	r2, [pc, #40]	@ (80003d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b0:	4c0a      	ldr	r4, [pc, #40]	@ (80003dc <LoopForever+0x16>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b4:	e001      	b.n	80003ba <LoopFillZerobss>

080003b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b8:	3204      	adds	r2, #4

080003ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003bc:	d3fb      	bcc.n	80003b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003be:	f000 f811 	bl	80003e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003c2:	f7ff ffb6 	bl	8000332 <main>

080003c6 <LoopForever>:

LoopForever:
  b LoopForever
 80003c6:	e7fe      	b.n	80003c6 <LoopForever>
  ldr   r0, =_estack
 80003c8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80003cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d0:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80003d4:	0800044c 	.word	0x0800044c
  ldr r2, =_sbss
 80003d8:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80003dc:	20000070 	.word	0x20000070

080003e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC1_2_IRQHandler>
	...

080003e4 <__libc_init_array>:
 80003e4:	b570      	push	{r4, r5, r6, lr}
 80003e6:	4d0d      	ldr	r5, [pc, #52]	@ (800041c <__libc_init_array+0x38>)
 80003e8:	4c0d      	ldr	r4, [pc, #52]	@ (8000420 <__libc_init_array+0x3c>)
 80003ea:	1b64      	subs	r4, r4, r5
 80003ec:	10a4      	asrs	r4, r4, #2
 80003ee:	2600      	movs	r6, #0
 80003f0:	42a6      	cmp	r6, r4
 80003f2:	d109      	bne.n	8000408 <__libc_init_array+0x24>
 80003f4:	4d0b      	ldr	r5, [pc, #44]	@ (8000424 <__libc_init_array+0x40>)
 80003f6:	4c0c      	ldr	r4, [pc, #48]	@ (8000428 <__libc_init_array+0x44>)
 80003f8:	f000 f818 	bl	800042c <_init>
 80003fc:	1b64      	subs	r4, r4, r5
 80003fe:	10a4      	asrs	r4, r4, #2
 8000400:	2600      	movs	r6, #0
 8000402:	42a6      	cmp	r6, r4
 8000404:	d105      	bne.n	8000412 <__libc_init_array+0x2e>
 8000406:	bd70      	pop	{r4, r5, r6, pc}
 8000408:	f855 3b04 	ldr.w	r3, [r5], #4
 800040c:	4798      	blx	r3
 800040e:	3601      	adds	r6, #1
 8000410:	e7ee      	b.n	80003f0 <__libc_init_array+0xc>
 8000412:	f855 3b04 	ldr.w	r3, [r5], #4
 8000416:	4798      	blx	r3
 8000418:	3601      	adds	r6, #1
 800041a:	e7f2      	b.n	8000402 <__libc_init_array+0x1e>
 800041c:	08000444 	.word	0x08000444
 8000420:	08000444 	.word	0x08000444
 8000424:	08000444 	.word	0x08000444
 8000428:	08000448 	.word	0x08000448

0800042c <_init>:
 800042c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042e:	bf00      	nop
 8000430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000432:	bc08      	pop	{r3}
 8000434:	469e      	mov	lr, r3
 8000436:	4770      	bx	lr

08000438 <_fini>:
 8000438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043a:	bf00      	nop
 800043c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043e:	bc08      	pop	{r3}
 8000440:	469e      	mov	lr, r3
 8000442:	4770      	bx	lr
