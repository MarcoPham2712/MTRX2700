
Exercise 5 Integration B2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000278  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800040c  0800040c  00002044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800040c  0800040c  00002044  2**0
                  CONTENTS
  4 .ARM          00000000  0800040c  0800040c  00002044  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800040c  0800040c  00002044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800040c  0800040c  0000140c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000410  08000410  00001410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000044  20000000  08000414  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002044  2**0
                  CONTENTS
 10 .bss          0000001c  20000044  20000044  00002044  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000060  20000060  00002044  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY
 13 .debug_line   00000187  00000000  00000000  00002074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 000000b4  00000000  00000000  000021fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00000055  00000000  00000000  000022af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00000038  00000000  00000000  00002304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000048  00000000  00000000  00002340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000000a1  00000000  00000000  00002388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000019  00000000  00000000  00002429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000002c  00000000  00000000  00002444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000044 	.word	0x20000044
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003f4 	.word	0x080003f4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000048 	.word	0x20000048
 80001d0:	080003f4 	.word	0x080003f4

080001d4 <enable_peripheral_clocks>:

#include "definitions.s"


enable_peripheral_clocks:
	LDR R0, = RCC @ load the address of the RCC address boundary (for enabling the IO clock)
 80001d4:	485b      	ldr	r0, [pc, #364]	@ (8000344 <display_loop+0x10>)
	LDR R1, [R0, #AHBENR]	@ load the current value of the peripheral clock registers
 80001d6:	6941      	ldr	r1, [r0, #20]
	MOV R2, 1 << GPIOA_ENABLE | 1 << GPIOE_ENABLE	@ 21st bit is enable GPIOE clock, 17 is GPIOA clock
 80001d8:	f44f 1208 	mov.w	r2, #2228224	@ 0x220000
	ORR R1, R2	@Set the values of these two clocks on
 80001dc:	ea41 0102 	orr.w	r1, r1, r2
	STR R1, [R0, #AHBENR]	@Store the modified register back to the submodule
 80001e0:	6141      	str	r1, [r0, #20]
	BX LR	@return from function call
 80001e2:	4770      	bx	lr

080001e4 <Set_LED_to_output>:


@ initialise the discovery board I/O (just outputs: inputs are selected by default)
Set_LED_to_output:
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 80001e4:	4858      	ldr	r0, [pc, #352]	@ (8000348 <display_loop+0x14>)
	LDRH R1, [R0, #MODER + 2]	@Load the high half-word in the MODER Register
 80001e6:	8841      	ldrh	r1, [r0, #2]
	LDR R2, =0x5555		@Load the binary value of 01 ( OUTPUT ) for each port up to 2 bytes as 0x5555 = 0x0101 0101 0101 0101
 80001e8:	f245 5255 	movw	r2, #21845	@ 0x5555
	STRH R2, [R0, #MODER + 2]	@Store the new register values in the top half word presenting
 80001ec:	8042      	strh	r2, [r0, #2]

	BX LR @ return from function call
 80001ee:	4770      	bx	lr

080001f0 <Set_button_input>:

Set_button_input:
	LDR R0, = GPIOA
 80001f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
	LDRB R1, [R0, #MODER]
 80001f4:	7801      	ldrb	r1, [r0, #0]
	AND R1, #0b11111100
 80001f6:	f001 01fc 	and.w	r1, r1, #252	@ 0xfc
	STRB R1, [R0, #MODER]
 80001fa:	7001      	strb	r1, [r0, #0]
	BX LR
 80001fc:	4770      	bx	lr

080001fe <caesar_cipher>:
// R3: 'A' or 'a' to indicate if cipher is upper/lower
// R4: Result of division required for modulo operator
// R5: Modulo divisor
caesar_cipher:
	// Register setup
	POP {R0, R1} // Pop the cipher key and string from the stack
 80001fe:	bc03      	pop	{r0, r1}
	SUB R1, #1   // Start before the string (because pre-increment loop)
 8000200:	f1a1 0101 	sub.w	r1, r1, #1
	MOV R5, #26
 8000204:	f04f 051a 	mov.w	r5, #26

	// Convert cipher key to positive value in range [0, 25]
	SDIV R4, R0, R5
 8000208:	fb90 f4f5 	sdiv	r4, r0, r5
	MUL R4, R5
 800020c:	fb05 f404 	mul.w	r4, r5, r4
	SUB R0, R4
 8000210:	eba0 0004 	sub.w	r0, r0, r4
	CMP R0, #0 // Add 26 to negative values
 8000214:	2800      	cmp	r0, #0
	BGE cipher_next
 8000216:	da00      	bge.n	800021a <cipher_next>
	ADD R0, R5
 8000218:	4428      	add	r0, r5

0800021a <cipher_next>:

	cipher_next:
		// Iterate string until terminating NULLL
		LDRB R2, [R1, #1]!
 800021a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
		CMP R2, #0
 800021e:	2a00      	cmp	r2, #0
		BEQ cipher_finish
 8000220:	d017      	beq.n	8000252 <cipher_finish>

		// Ignore values before and after the alphabet
		CMP R2, #'A'
 8000222:	2a41      	cmp	r2, #65	@ 0x41
		BLT cipher_next
 8000224:	dbf9      	blt.n	800021a <cipher_next>
		CMP R2, #'z'
 8000226:	2a7a      	cmp	r2, #122	@ 0x7a
		BGT cipher_next
 8000228:	dcf7      	bgt.n	800021a <cipher_next>

		// Check if uppercase or lower case
		CMP R2, #'Z'
 800022a:	2a5a      	cmp	r2, #90	@ 0x5a
		MOV R3, #'A'
 800022c:	f04f 0341 	mov.w	r3, #65	@ 0x41
		BLE perform_cipher
 8000230:	dd03      	ble.n	800023a <perform_cipher>

		CMP R2, #'a'
 8000232:	2a61      	cmp	r2, #97	@ 0x61
		MOV R3, #'a'
 8000234:	f04f 0361 	mov.w	r3, #97	@ 0x61
		BGE perform_cipher
 8000238:	daff      	bge.n	800023a <perform_cipher>

0800023a <perform_cipher>:

	perform_cipher:
		// Convert letter to a number [0, 25] and perform cipher
		SUB R2, R3
 800023a:	eba2 0203 	sub.w	r2, r2, r3
		ADD R2, R0
 800023e:	4402      	add	r2, r0

		// Modulo operation (subtract highest multiple of 26)
		UDIV R4, R2, R5
 8000240:	fbb2 f4f5 	udiv	r4, r2, r5
		MUL R4, R5
 8000244:	fb05 f404 	mul.w	r4, r5, r4
		SUB R2, R4
 8000248:	eba2 0204 	sub.w	r2, r2, r4

		// Convert number back to letter of given case, store in R1
		ADD R2, R3
 800024c:	441a      	add	r2, r3
		STRB R2, [R1]
 800024e:	700a      	strb	r2, [r1, #0]
		B cipher_next
 8000250:	e7e3      	b.n	800021a <cipher_next>

08000252 <cipher_finish>:

	cipher_finish:
		BX LR
 8000252:	4770      	bx	lr

08000254 <palindrome>:
 * R0 is used as a backwards iterating pointer
 * Result is stored in R0 (1 is palindrome, 0 is not)
 */
palindrome:
	// Load the address of the string into R0
	MOV R0, R1
 8000254:	4608      	mov	r0, r1

08000256 <palindrome_loop_to_null>:

	// Set R0 pointer to end of string
	palindrome_loop_to_null:
		// Load string value into R2 and compare
		LDRB R2, [R0]
 8000256:	7802      	ldrb	r2, [r0, #0]
		CMP R2, #0x0
 8000258:	2a00      	cmp	r2, #0
		ADD R0, #0x1
 800025a:	f100 0001 	add.w	r0, r0, #1
		BNE palindrome_loop_to_null
 800025e:	d1fa      	bne.n	8000256 <palindrome_loop_to_null>

	// Set pointer to before string NULL terminator
	SUB R0, #0x2
 8000260:	f1a0 0002 	sub.w	r0, r0, #2

08000264 <palindrome_loop_until_tested>:

	// Iterate pointers R1/R0 forward/backwards respectively until they pass
	palindrome_loop_until_tested:
		// Load and compare both characters
		LDRB R2, [R0]
 8000264:	7802      	ldrb	r2, [r0, #0]
		LDRB R3, [R1]
 8000266:	780b      	ldrb	r3, [r1, #0]
		CMP R2, R3
 8000268:	429a      	cmp	r2, r3
		BNE palindrome_fail
 800026a:	d108      	bne.n	800027e <palindrome_fail>

		// Iterate pointers until they pass
		SUB R0, #0x1
 800026c:	f1a0 0001 	sub.w	r0, r0, #1
		ADD R1, #0x1
 8000270:	f101 0101 	add.w	r1, r1, #1
		CMP R0, R1
 8000274:	4288      	cmp	r0, r1
		BGT palindrome_loop_until_tested
 8000276:	dcf5      	bgt.n	8000264 <palindrome_loop_until_tested>

08000278 <palindrome_pass>:

	// Set R0 to 1 if string is a palindrome, else 0
	palindrome_pass:
		LDR R0, =#0x1
 8000278:	f04f 0001 	mov.w	r0, #1
		BX LR
 800027c:	4770      	bx	lr

0800027e <palindrome_fail>:

	palindrome_fail:
		LDR R0, =#0x0
 800027e:	f04f 0000 	mov.w	r0, #0
		BX LR
 8000282:	4770      	bx	lr

08000284 <Vowels>:
.syntax unified
.thumb

.text
Vowels:
	LDR R1, =0b0 //Count Letters
 8000284:	f04f 0100 	mov.w	r1, #0
	LDR R3, =0b0 //Count vowels
 8000288:	f04f 0300 	mov.w	r3, #0
	LDR R5, =0b0 //Switch Vowel/Cons
 800028c:	f04f 0500 	mov.w	r5, #0

08000290 <count_letters>:

count_letters:
	LDRB R2, [R0], #1    // After loading byte pointer is incremented by 1
 8000290:	f810 2b01 	ldrb.w	r2, [r0], #1
    CMP R2, #0           // Check if reached the end of the string
 8000294:	2a00      	cmp	r2, #0
    BEQ continue
 8000296:	d00c      	beq.n	80002b2 <continue>
	B Checkif_letter
 8000298:	e7ff      	b.n	800029a <Checkif_letter>

0800029a <Checkif_letter>:

Checkif_letter:
//If character is less than 'A' it is not a letter
	CMP   R2, #'A'
 800029a:	2a41      	cmp	r2, #65	@ 0x41
    BLT count_letters
 800029c:	dbf8      	blt.n	8000290 <count_letters>
//If character is greater than 'Z' could not be a letter
    CMP   R2, #'Z'
 800029e:	2a5a      	cmp	r2, #90	@ 0x5a
    BGT Check_lowercase
 80002a0:	dcff      	bgt.n	80002a2 <Check_lowercase>

080002a2 <Check_lowercase>:

Check_lowercase:
//If character is less than 'a' and greater than 'Z' it is not a letter
	CMP R2, #'a'
 80002a2:	2a61      	cmp	r2, #97	@ 0x61
	BLT count_letters
 80002a4:	dbf4      	blt.n	8000290 <count_letters>
//If character is greater than 'z' it is not a letter
	CMP R2, #'z'
 80002a6:	2a7a      	cmp	r2, #122	@ 0x7a
	BGT count_letters
 80002a8:	dcf2      	bgt.n	8000290 <count_letters>
	B Add_letter
 80002aa:	e7ff      	b.n	80002ac <Add_letter>

080002ac <Add_letter>:

Add_letter:
	ADD R1, #0b1        // Add 1 to the letters counter
 80002ac:	f101 0101 	add.w	r1, r1, #1
	B count_letters
 80002b0:	e7ee      	b.n	8000290 <count_letters>

080002b2 <continue>:

	continue:
    	LDR R0, =test_string // Reload the string from the start
 80002b2:	4826      	ldr	r0, [pc, #152]	@ (800034c <display_loop+0x18>)
    	B vowel_lowercase
 80002b4:	e7ff      	b.n	80002b6 <vowel_lowercase>

080002b6 <vowel_lowercase>:

    vowel_lowercase:
        LDRB R4, [R0], #1    // After loading byte pointer is incremented by 1
 80002b6:	f810 4b01 	ldrb.w	r4, [r0], #1
        CMP R4, #0           // Check if reached the end of the string
 80002ba:	2c00      	cmp	r4, #0
        BEQ end_lowercase
 80002bc:	d009      	beq.n	80002d2 <end_lowercase>
       // If less than 'A', it's not an uppercase letter
        CMP R4, #'A'
 80002be:	2c41      	cmp	r4, #65	@ 0x41
        BLT vowel_lowercase
 80002c0:	dbf9      	blt.n	80002b6 <vowel_lowercase>
        // If greater than 'Z', it's not an uppercase letter
        CMP R4, #'Z'
 80002c2:	2c5a      	cmp	r4, #90	@ 0x5a
        BGT vowel_lowercase
 80002c4:	dcf7      	bgt.n	80002b6 <vowel_lowercase>
        ADD R4, #32		// Convert to lowercase by adding 32 (as shown in the ASCII table this converts to lowercase)
 80002c6:	f104 0420 	add.w	r4, r4, #32
        SUB R0, #1
 80002ca:	f1a0 0001 	sub.w	r0, r0, #1
        STRB R4, [R0]   // Store the modified character at the point it was found
 80002ce:	7004      	strb	r4, [r0, #0]
        B vowel_lowercase
 80002d0:	e7f1      	b.n	80002b6 <vowel_lowercase>

080002d2 <end_lowercase>:

	end_lowercase:
		LDR R0, =test_string //Reload the string from the start
 80002d2:	481e      	ldr	r0, [pc, #120]	@ (800034c <display_loop+0x18>)
    	B count_vowels
 80002d4:	e7ff      	b.n	80002d6 <count_vowels>

080002d6 <count_vowels>:

    count_vowels:
    	LDRB R2, [R0], #1	// After loading byte pointer is incremented by 1
 80002d6:	f810 2b01 	ldrb.w	r2, [r0], #1
    	//Check if the loaded byte is equal to a vowel, if so add 1 to R3 (vowel counter)
    	CMP R2, 'e'
 80002da:	2a65      	cmp	r2, #101	@ 0x65
    	BEQ add_vowel
 80002dc:	d00a      	beq.n	80002f4 <add_vowel>
    	CMP R2, 'i'
 80002de:	2a69      	cmp	r2, #105	@ 0x69
    	BEQ add_vowel
 80002e0:	d008      	beq.n	80002f4 <add_vowel>
    	CMP R2, 'o'
 80002e2:	2a6f      	cmp	r2, #111	@ 0x6f
    	BEQ add_vowel
 80002e4:	d006      	beq.n	80002f4 <add_vowel>
    	CMP R2, 'u'
 80002e6:	2a75      	cmp	r2, #117	@ 0x75
    	BEQ add_vowel
 80002e8:	d004      	beq.n	80002f4 <add_vowel>
    	CMP R2, 'a'
 80002ea:	2a61      	cmp	r2, #97	@ 0x61
    	BEQ add_vowel
 80002ec:	d002      	beq.n	80002f4 <add_vowel>
    	//Loop until end of the string (null terminator)
    	CMP R2, #0
 80002ee:	2a00      	cmp	r2, #0
    	BEQ end
 80002f0:	d003      	beq.n	80002fa <end>
    	B count_vowels
 80002f2:	e7f0      	b.n	80002d6 <count_vowels>

080002f4 <add_vowel>:

    add_vowel:
    	ADD R3, #0b1
 80002f4:	f103 0301 	add.w	r3, r3, #1
    	B count_vowels
 80002f8:	e7ed      	b.n	80002d6 <count_vowels>

080002fa <end>:
    end:
    	//Subtract vowles from letters to get consonants count
    	SUB R1, R3
 80002fa:	eba1 0103 	sub.w	r1, r1, r3
    	BX LR
 80002fe:	4770      	bx	lr

08000300 <set_led_state>:
decipher_buffer: .space 32

.text
set_led_state:
	// Replace GPIOE ODR with R3 bitmask
	LDR R1, =GPIOE
 8000300:	4911      	ldr	r1, [pc, #68]	@ (8000348 <display_loop+0x14>)
	STRB R3, [R1, #ODR + 1]
 8000302:	754b      	strb	r3, [r1, #21]

	BX LR
 8000304:	4770      	bx	lr

08000306 <main>:

main:
    // Initialise GPIO registers
	BL enable_peripheral_clocks // Branch with link to set the clocks for the I/O and UART
 8000306:	f7ff ff65 	bl	80001d4 <enable_peripheral_clocks>
	BL Set_LED_to_output        // Once the clocks are started, need to initialise the discovery board I/O
 800030a:	f7ff ff6b 	bl	80001e4 <Set_LED_to_output>
	B program_loop
 800030e:	e7ff      	b.n	8000310 <program_loop>

08000310 <program_loop>:
	// Poll until a message is received
	// TODO

	// Load message into R1
	// TODO
	LDR R1, =test_palindrome
 8000310:	490f      	ldr	r1, [pc, #60]	@ (8000350 <display_loop+0x1c>)

08000312 <check_palindrome>:

	// Check if message is a palindrome
	check_palindrome:
		BL palindrome
 8000312:	f7ff ff9f 	bl	8000254 <palindrome>

		// Decipher palindrome messages (R0 is 1 if palindrome, otherwise 0)
		CMP R0, #0x1
 8000316:	2801      	cmp	r0, #1
		BEQ decipher
 8000318:	d000      	beq.n	800031c <decipher>

	B display_message_info
 800031a:	e006      	b.n	800032a <display_message_info>

0800031c <decipher>:

decipher:
	// Setup and run cipher
	LDR R0, =decipher_key
 800031c:	480d      	ldr	r0, [pc, #52]	@ (8000354 <display_loop+0x20>)
	LDR R0, [R0]
 800031e:	6800      	ldr	r0, [r0, #0]
	LDR R1, =test_palindrome
 8000320:	490b      	ldr	r1, [pc, #44]	@ (8000350 <display_loop+0x1c>)
	PUSH {R0, R1}
 8000322:	b403      	push	{r0, r1}
	BL caesar_cipher
 8000324:	f7ff ff6b 	bl	80001fe <caesar_cipher>
	B display_message_info
 8000328:	e7ff      	b.n	800032a <display_message_info>

0800032a <display_message_info>:

display_message_info:
	// String input for vowels function is R0
	MOV R0, R1
 800032a:	4608      	mov	r0, r1

	// Count vowels and consonants in R6 and R7 respectively (from R3, R1 respectively)
	BL Vowels
 800032c:	f7ff ffaa 	bl	8000284 <Vowels>
	MOV R6, R3
 8000330:	461e      	mov	r6, r3
	MOV R7, R1
 8000332:	460f      	mov	r7, r1

08000334 <display_loop>:

	display_loop:
		// Show vowels count
		MOV R3, R6
 8000334:	4633      	mov	r3, r6
		BL set_led_state
 8000336:	f7ff ffe3 	bl	8000300 <set_led_state>

		// Delay
		// TODO

		// Show consonants
		MOV R3, R7
 800033a:	463b      	mov	r3, r7
		BL set_led_state
 800033c:	f7ff ffe0 	bl	8000300 <set_led_state>

		// Delay
		// TODO

		B display_loop
 8000340:	e7f8      	b.n	8000334 <display_loop>
 8000342:	0000      	.short	0x0000
	LDR R0, = RCC @ load the address of the RCC address boundary (for enabling the IO clock)
 8000344:	40021000 	.word	0x40021000
	LDR R0, =GPIOE 	@ load the address of the GPIOE register into R0
 8000348:	48001000 	.word	0x48001000
    	LDR R0, =test_string // Reload the string from the start
 800034c:	20000004 	.word	0x20000004
	LDR R1, =test_palindrome
 8000350:	2000001b 	.word	0x2000001b
	LDR R0, =decipher_key
 8000354:	20000000 	.word	0x20000000

08000358 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000358:	480d      	ldr	r0, [pc, #52]	@ (8000390 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800035c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000360:	480c      	ldr	r0, [pc, #48]	@ (8000394 <LoopForever+0x6>)
  ldr r1, =_edata
 8000362:	490d      	ldr	r1, [pc, #52]	@ (8000398 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000364:	4a0d      	ldr	r2, [pc, #52]	@ (800039c <LoopForever+0xe>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000368:	e002      	b.n	8000370 <LoopCopyDataInit>

0800036a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800036c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036e:	3304      	adds	r3, #4

08000370 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000370:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000372:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000374:	d3f9      	bcc.n	800036a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000376:	4a0a      	ldr	r2, [pc, #40]	@ (80003a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000378:	4c0a      	ldr	r4, [pc, #40]	@ (80003a4 <LoopForever+0x16>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800037c:	e001      	b.n	8000382 <LoopFillZerobss>

0800037e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000380:	3204      	adds	r2, #4

08000382 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000382:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000384:	d3fb      	bcc.n	800037e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000386:	f000 f811 	bl	80003ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038a:	f7ff ffbc 	bl	8000306 <main>

0800038e <LoopForever>:

LoopForever:
  b LoopForever
 800038e:	e7fe      	b.n	800038e <LoopForever>
  ldr   r0, =_estack
 8000390:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000398:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 800039c:	08000414 	.word	0x08000414
  ldr r2, =_sbss
 80003a0:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 80003a4:	20000060 	.word	0x20000060

080003a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a8:	e7fe      	b.n	80003a8 <ADC1_2_IRQHandler>
	...

080003ac <__libc_init_array>:
 80003ac:	b570      	push	{r4, r5, r6, lr}
 80003ae:	4d0d      	ldr	r5, [pc, #52]	@ (80003e4 <__libc_init_array+0x38>)
 80003b0:	4c0d      	ldr	r4, [pc, #52]	@ (80003e8 <__libc_init_array+0x3c>)
 80003b2:	1b64      	subs	r4, r4, r5
 80003b4:	10a4      	asrs	r4, r4, #2
 80003b6:	2600      	movs	r6, #0
 80003b8:	42a6      	cmp	r6, r4
 80003ba:	d109      	bne.n	80003d0 <__libc_init_array+0x24>
 80003bc:	4d0b      	ldr	r5, [pc, #44]	@ (80003ec <__libc_init_array+0x40>)
 80003be:	4c0c      	ldr	r4, [pc, #48]	@ (80003f0 <__libc_init_array+0x44>)
 80003c0:	f000 f818 	bl	80003f4 <_init>
 80003c4:	1b64      	subs	r4, r4, r5
 80003c6:	10a4      	asrs	r4, r4, #2
 80003c8:	2600      	movs	r6, #0
 80003ca:	42a6      	cmp	r6, r4
 80003cc:	d105      	bne.n	80003da <__libc_init_array+0x2e>
 80003ce:	bd70      	pop	{r4, r5, r6, pc}
 80003d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d4:	4798      	blx	r3
 80003d6:	3601      	adds	r6, #1
 80003d8:	e7ee      	b.n	80003b8 <__libc_init_array+0xc>
 80003da:	f855 3b04 	ldr.w	r3, [r5], #4
 80003de:	4798      	blx	r3
 80003e0:	3601      	adds	r6, #1
 80003e2:	e7f2      	b.n	80003ca <__libc_init_array+0x1e>
 80003e4:	0800040c 	.word	0x0800040c
 80003e8:	0800040c 	.word	0x0800040c
 80003ec:	0800040c 	.word	0x0800040c
 80003f0:	08000410 	.word	0x08000410

080003f4 <_init>:
 80003f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003f6:	bf00      	nop
 80003f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fa:	bc08      	pop	{r3}
 80003fc:	469e      	mov	lr, r3
 80003fe:	4770      	bx	lr

08000400 <_fini>:
 8000400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000402:	bf00      	nop
 8000404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000406:	bc08      	pop	{r3}
 8000408:	469e      	mov	lr, r3
 800040a:	4770      	bx	lr
